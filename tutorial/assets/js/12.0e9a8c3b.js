(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{330:function(t,s,a){"use strict";a.r(s);var n=a(15),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_12-附录-b-在你的应用中嵌入-git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-附录-b-在你的应用中嵌入-git"}},[t._v("#")]),t._v(" 12 附录 B: 在你的应用中嵌入 Git")]),t._v(" "),s("h2",{attrs:{id:"a2-1-附录-b-在你的应用中嵌入-git-命令行-git-方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a2-1-附录-b-在你的应用中嵌入-git-命令行-git-方式"}},[t._v("#")]),t._v(" A2.1 附录 B: 在你的应用中嵌入 Git - 命令行 Git 方式")]),t._v(" "),s("p",[t._v("如果你的应用程序的目标用户是开发者，那么在其中集成源码控制功能会让他们从中受益。 甚至对于文档编辑器等并非面向程序员的应用，也可以从版本控制系统中受益，Git 的工作模式在多种场景下表现得都非常出色。")]),t._v(" "),s("p",[t._v("如果你想将 Git 整合进你的应用程序，那么通常有两种可行的选择：启动 shell 来调用 Git 的命令行程序，或者将 Git 库嵌入到你的应用中。")]),t._v(" "),s("h3",{attrs:{id:"命令行-git-方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令行-git-方式"}},[t._v("#")]),t._v(" 命令行 Git 方式")]),t._v(" "),s("p",[t._v("一种方式就是启动一个 shell 进程并在里面使用 Git 的命令行工具来完成任务。 这种方式看起来很循规蹈矩，但是它的优点也因此而来，就是支持所有的 Git 的特性。 它也碰巧相当简单，因为几乎所有运行时环境都有一个相对简单的方式来调用一个带有命令行参数的进程。 然而，这种方式也有一些固有的缺点。")]),t._v(" "),s("p",[t._v("首先就是所有的输出都是纯文本格式。 这意味着你将被迫解析 Git 的有时会改变的输出格式，以随时了解它工作的进度和结果。更糟糕的是，这可能是毫无效率并且容易出错的。")]),t._v(" "),s("p",[t._v("另外一个就是令人捉急的错误修复能力。 如果一个版本库被莫名其妙地损毁，或者用户使用了一个奇奇怪怪的配置， Git 只会简单地拒绝进行一些操作。")]),t._v(" "),s("p",[t._v("还有一个就是进程的管理。 Git 会要求你在一个独立的进程中维护一个 shell 环境，这可能会无谓地增加复杂性。 试图协调许许多多的类似的进程（尤其是在某些情况下，当不同的进程在访问相同的版本库时）是对你的能力的极大挑战。")]),t._v(" "),s("h2",{attrs:{id:"a2-2-附录-b-在你的应用中嵌入-git-libgit2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a2-2-附录-b-在你的应用中嵌入-git-libgit2"}},[t._v("#")]),t._v(" A2.2 附录 B: 在你的应用中嵌入 Git - Libgit2")]),t._v(" "),s("h3",{attrs:{id:"libgit2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#libgit2"}},[t._v("#")]),t._v(" Libgit2")]),t._v(" "),s("p",[t._v("© 另外一种可以供你使用的是 Libgit2。 Libgit2 是一个 Git 的非依赖性的工具，它致力于为其他程序使用 Git 提供更好的 API。 你可以在 "),s("a",{attrs:{href:"https://libgit2.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://libgit2.org"),s("OutboundLink")],1),t._v(" 找到它。")]),t._v(" "),s("p",[t._v("首先，让我们来看一下 C API 长啥样。 这是一个旋风式旅行。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打开一个版本库")]),t._v("\ngit_repository "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" error "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git_repository_open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/path/to/repository"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 逆向引用 HEAD 到一个提交")]),t._v("\ngit_object "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("head_commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nerror "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git_revparse_single")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("head_commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HEAD^{commit}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ngit_commit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("commit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("git_commit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("head_commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 显示这个提交的一些详情")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git_commit_message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" git_signature "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("author "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git_commit_author")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s <%s>\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" author"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" author"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" git_oid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tree_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git_commit_tree_id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 清理现场")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git_commit_free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git_repository_free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("前两行打开一个 Git 版本库。 这个 "),s("code",[t._v("git_repository")]),t._v(" 类型代表了一个在内存中带有缓存的指向一个版本库的句柄。 这是最简单的方法，只是你必须知道一个版本库的工作目录或者一个 "),s("code",[t._v(".git")]),t._v(" 文件夹的精确路径。 另外还有 "),s("code",[t._v("git_repository_open_ext")]),t._v(" ，它包括了带选项的搜索， "),s("code",[t._v("git_clone")]),t._v(" 及其同类可以用来做远程版本库的本地克隆， "),s("code",[t._v("git_repository_init")]),t._v(" 则可以创建一个全新的版本库。")]),t._v(" "),s("p",[t._v("第二段代码使用了一种 rev-parse 语法（要了解更多，请看 "),s("a",{attrs:{href:"ch00/_branch_references"}},[t._v("分支引用")]),t._v(" ）来得到 HEAD 真正指向的提交。 返回类型是一个 "),s("code",[t._v("git_object")]),t._v(" 指针，它指代位于版本库里的 Git 对象数据库中的某个东西。 "),s("code",[t._v("git_object")]),t._v(" 实际上是几种不同的对象的“父”类型，每个“子”类型的内存布局和 "),s("code",[t._v("git_object")]),t._v(" 是一样的，所以你能安全地把它们转换为正确的类型。 在上面的例子中， "),s("code",[t._v("git_object_type(commit)")]),t._v(" 会返回 "),s("code",[t._v("GIT_OBJ_COMMIT")]),t._v(" ，所以转换成 "),s("code",[t._v("git_commit")]),t._v(" 指针是安全的。")]),t._v(" "),s("p",[t._v("下一段展示了如何访问一个提交的详情。 最后一行使用了 "),s("code",[t._v("git_oid")]),t._v(" 类型，这是 Libgit2 用来表示一个 SHA-1 哈希的方法。")]),t._v(" "),s("p",[t._v("从这个例子中，我们可以看到一些模式：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果你声明了一个指针，并在一个 Libgit2 调用中传递一个引用，那么这个调用可能返回一个 int 类型的错误码。 值 "),s("code",[t._v("0")]),t._v(" 表示成功，比它小的则是一个错误。")])]),t._v(" "),s("li",[s("p",[t._v("如果 Libgit2 为你填入一个指针，那么你有责任释放它。")])]),t._v(" "),s("li",[s("p",[t._v("如果 Libgit2 在一个调用中返回一个 "),s("code",[t._v("const")]),t._v(" 指针，你不需要释放它，但是当它所指向的对象被释放时它将不可用。")])]),t._v(" "),s("li",[s("p",[t._v("用 C 来写有点蛋疼。")])])]),t._v(" "),s("p",[t._v("最后一点意味着你应该不会在使用 Libgit2 时编写 C 语言程序。 但幸运的是，有许多可用的各种语言的绑定，能让你在特定的语言和环境中更加容易的操作 Git 版本库。 我们来看一下下面这个用 Libgit2 的 Ruby 绑定写成的例子，它叫 Rugged，你可以在 "),s("a",{attrs:{href:"https://github.com/libgit2/rugged",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/libgit2/rugged"),s("OutboundLink")],1),t._v(" 找到它。")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("repo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rugged"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Repository")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path/to/repository'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncommit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target\nputs commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message\nputs "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("#{")]),s("span",{pre:!0,attrs:{class:"token content"}},[t._v("commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("author"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" <")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("#{")]),s("span",{pre:!0,attrs:{class:"token content"}},[t._v("commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("author"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('>"')])]),t._v("\ntree "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tree\n")])])]),s("p",[t._v("你可以发现，代码看起来更加清晰了。 首先， Rugged 使用异常机制，它可以抛出类似于 "),s("code",[t._v("ConfigError")]),t._v(" 或者 "),s("code",[t._v("ObjectError")]),t._v(" 之类的东西来告知错误的情况。 其次，不需要明确资源释放，因为 Ruby 是支持垃圾回收的。 我们来看一个稍微复杂一点的例子：从头开始制作一个提交。")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("blob_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Blob contents"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":blob")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (1)")]),t._v("\n\nindex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index\nindex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read_tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nindex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":path")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'newfile.txt'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":oid")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" blob_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (2)")]),t._v("\n\nsig "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob@example.com"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":name")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bob User"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":time")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ncommit_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rugged"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":tree")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write_tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (3)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":author")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" sig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":committer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" sig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (4)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Add newfile.txt"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (5)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":parents")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("empty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("compact"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (6)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":update_ref")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'HEAD'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (7)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncommit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lookup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commit_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (8)")]),t._v("\n")])])]),s("ol",[s("li",[s("p",[t._v("创建一个新的 blob ，它包含了一个新文件的内容。")])]),t._v(" "),s("li",[s("p",[t._v("将 HEAD 提交树填入索引，并在路径 "),s("code",[t._v("newfile.txt")]),t._v(" 增加新文件。")])]),t._v(" "),s("li",[s("p",[t._v("这就在 ODB 中创建了一个新的树，并在一个新的提交中使用它。")])]),t._v(" "),s("li",[s("p",[t._v("我们在 author 栏和 committer 栏使用相同的签名。")])]),t._v(" "),s("li",[s("p",[t._v("提交的信息。")])]),t._v(" "),s("li",[s("p",[t._v("当创建一个提交时，你必须指定这个新提交的父提交。 这里使用了 HEAD 的末尾作为单一的父提交。")])]),t._v(" "),s("li",[s("p",[t._v("在做一个提交的过程中， Rugged （和 Libgit2 ）能在需要时更新引用。")])]),t._v(" "),s("li",[s("p",[t._v("返回值是一个新提交对象的 SHA-1 哈希，你可以用它来获得一个 "),s("code",[t._v("Commit")]),t._v(" 对象。")])])]),t._v(" "),s("p",[t._v("Ruby 的代码很好很简洁，另一方面因为 Libgit2 做了大量工作，所以代码运行起来其实速度也不赖。 如果你不是一个 Ruby 程序员，我们在 "),s("a",{attrs:{href:"ch00/_libgit2_bindings"}},[t._v("其它绑定")]),t._v(" 有提到其它的一些绑定。")]),t._v(" "),s("h4",{attrs:{id:"高级功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高级功能"}},[t._v("#")]),t._v(" 高级功能")]),t._v(" "),s("p",[t._v("Libgit2 有几个超过核心 Git 的能力。 例如它的可定制性：Libgit2 允许你为一些不同类型的操作自定义的“后端”，让你得以使用与原生 Git 不同的方式存储东西。 Libgit2 允许为自定义后端指定配置、引用的存储以及对象数据库，")]),t._v(" "),s("p",[t._v("我们来看一下它究竟是怎么工作的。 下面的例子借用自 Libgit2 团队提供的后端样本集 （可以在 "),s("a",{attrs:{href:"https://github.com/libgit2/libgit2-backends",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/libgit2/libgit2-backends"),s("OutboundLink")],1),t._v(" 上找到）。 一个对象数据库的自定义后端是这样建立的：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("git_odb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("odb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" error "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git_odb_new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("odb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (1)")]),t._v("\n\ngit_odb_backend "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("my_backend"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nerror "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git_odb_backend_mine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("my_backend"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*…*/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (2)")]),t._v("\n\nerror "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git_odb_add_backend")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("odb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" my_backend"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (3)")]),t._v("\n\ngit_repository "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nerror "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git_repository_open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some-path"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nerror "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git_repository_set_odb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" odb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (4)")]),t._v("\n")])])]),s("p",[s("em",[t._v("（注意：这个错误被捕获了，但是没有被处理。我们希望你的代码比我们的更好。）")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("初始化一个空的对象数据库（ ODB ）“前端”，它将被作为一个用来做真正的工作的“后端”的容器。")])]),t._v(" "),s("li",[s("p",[t._v("初始化一个自定义 ODB 后端。")])]),t._v(" "),s("li",[s("p",[t._v("为这个前端增加一个后端。")])]),t._v(" "),s("li",[s("p",[t._v("打开一个版本库，并让它使用我们的 ODB 来寻找对象。")])])]),t._v(" "),s("p",[t._v("但是 "),s("code",[t._v("git_odb_backend_mine")]),t._v(" 是个什么东西呢？ 嗯，那是一个你自己的 ODB 实现的构造器，并且你能在那里做任何你想做的事，前提是你能正确地填写 "),s("code",[t._v("git_odb_backend")]),t._v(" 结构。 它看起来_应该_是这样的：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    git_odb_backend parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其它的一些东西")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("custom_context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" my_backend_struct"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git_odb_backend_mine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("git_odb_backend "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("backend_out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*…*/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    my_backend_struct "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("backend"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    backend "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("calloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_backend_struct"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    backend"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("custom_context "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" …"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    backend"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("my_backend__read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    backend"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read_prefix "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("my_backend__read_prefix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    backend"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read_header "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("my_backend__read_header"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ……")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("backend_out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("git_odb_backend "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" backend"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" GIT_SUCCESS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("my_backend_struct")]),t._v(" 的第一个成员必须是一个 "),s("code",[t._v("git_odb_backend")]),t._v(" 结构，这是一个微妙的限制：这样就能确保内存布局是 Libgit2 的代码所期望的样子。 其余都是随意的，这个结构的大小可以随心所欲。")]),t._v(" "),s("p",[t._v("这个初始化函数为该结构分配内存，设置自定义的上下文，然后填写它支持的 "),s("code",[t._v("parent")]),t._v(" 结构的成员。 阅读 Libgit2 的 "),s("code",[t._v("include/git2/sys/odb_backend.h")]),t._v(" 源码以了解全部调用签名，你特定的使用环境会帮你决定使用哪一种调用签名。")]),t._v(" "),s("h4",{attrs:{id:"其它绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其它绑定"}},[t._v("#")]),t._v(" 其它绑定")]),t._v(" "),s("p",[t._v("Libgit2 有很多种语言的绑定。 在这篇文章中，我们展现了一个使用了几个更加完整的绑定包的小例子，这些库存在于许多种语言中，包括 C++、Go、Node.js、Erlang 以及 JVM ，它们的成熟度各不相同。 官方的绑定集合可以通过浏览这个版本库得到： "),s("a",{attrs:{href:"https://github.com/libgit2",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/libgit2"),s("OutboundLink")],1),t._v(" 。 我们写的代码将返回当前 HEAD 指向的提交的提交信息（就像 "),s("code",[t._v("git log -1")]),t._v(" 那样）。")]),t._v(" "),s("h5",{attrs:{id:"libgit2sharp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#libgit2sharp"}},[t._v("#")]),t._v(" LibGit2Sharp")]),t._v(" "),s("p",[t._v("如果你在编写一个 .NET 或者 Mono 应用，那么 LibGit2Sharp ("),s("a",{attrs:{href:"https://github.com/libgit2/libgit2sharp",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/libgit2/libgit2sharp"),s("OutboundLink")],1),t._v(") 就是你所需要的。 这个绑定是用 C# 写成的，并且已经采取许多措施来用令人感到自然的 CLR API 包装原始的 Libgit2 的调用。 我们的例子看起来就像这样：")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Repository")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"C:\\path\\to\\repo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Tip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("对于 Windows 桌面应用，一个叫做 NuGet 的包会让你快速上手。")]),t._v(" "),s("h5",{attrs:{id:"objective-git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#objective-git"}},[t._v("#")]),t._v(" objective-git")]),t._v(" "),s("p",[t._v("如果你的应用运行在一个 Apple 平台上，你很有可能使用 Objective-C 作为实现语言。 Objective-Git ("),s("a",{attrs:{href:"https://github.com/libgit2/objective-git",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/libgit2/objective-git"),s("OutboundLink")],1),t._v(") 是这个环境下的 Libgit2 绑定。 一个例子看起来类似这样：")]),t._v(" "),s("div",{staticClass:"language-objc extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objc"}},[s("code",[t._v("GTRepository "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("repo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GTRepository alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" initWithURL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSURL fileURLWithPath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"/path/to/repo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nNSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("msg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("epo headReferenceWithError"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" resolvedTarget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Objective-git 与 Swift 完美兼容，所以你把 Objective-C 落在一边的时候不用恐惧。")]),t._v(" "),s("h5",{attrs:{id:"pygit2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pygit2"}},[t._v("#")]),t._v(" pygit2")]),t._v(" "),s("p",[t._v("Python 的 Libgit2 绑定叫做 Pygit2 ，你可以在 "),s("a",{attrs:{href:"https://www.pygit2.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.pygit2.org/"),s("OutboundLink")],1),t._v(" 找到它。 我们的示例程序：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("pygit2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Repository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/path/to/repo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打开代码仓库")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head                          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取当前分支")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("peel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pygit2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到对应的提交")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message                       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 读取提交信息")]),t._v("\n")])])]),s("h4",{attrs:{id:"扩展阅读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展阅读"}},[t._v("#")]),t._v(" 扩展阅读")]),t._v(" "),s("p",[t._v("当然，完全阐述 Libgit2 的能力已超出本书范围。 如果你想了解更多关于 Libgit2 的信息，可以浏览它的 API 文档： "),s("a",{attrs:{href:"https://libgit2.github.com/libgit2",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://libgit2.github.com/libgit2"),s("OutboundLink")],1),t._v(", 以及一系列的指南： "),s("a",{attrs:{href:"https://libgit2.github.com/docs",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://libgit2.github.com/docs"),s("OutboundLink")],1),t._v(". 对于其它的绑定，检查附带的 README 和测试文件，那里通常有简易教程，以及指向拓展阅读的链接。")]),t._v(" "),s("h2",{attrs:{id:"a2-3-附录-b-在你的应用中嵌入-git-jgit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a2-3-附录-b-在你的应用中嵌入-git-jgit"}},[t._v("#")]),t._v(" A2.3 附录 B: 在你的应用中嵌入 Git - JGit")]),t._v(" "),s("h3",{attrs:{id:"jgit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jgit"}},[t._v("#")]),t._v(" JGit")]),t._v(" "),s("p",[t._v("如果你想在一个 Java 程序中使用 Git ，有一个功能齐全的 Git 库，那就是 JGit 。 JGit 是一个用 Java 写成的功能相对健全的 Git 的实现，它在 Java 社区中被广泛使用。 JGit 项目由 Eclipse 维护，它的主页在 "),s("a",{attrs:{href:"https://www.eclipse.org/jgit",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.eclipse.org/jgit"),s("OutboundLink")],1),t._v(" 。")]),t._v(" "),s("h4",{attrs:{id:"起步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#起步"}},[t._v("#")]),t._v(" 起步")]),t._v(" "),s("p",[t._v("有很多种方式可以让 JGit 连接你的项目，并依靠它去写代码。 最简单的方式也许就是使用 Maven 。你可以通过在你的 pom.xml 文件里的 标签中增加像下面这样的片段来完成这个整合。")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[t._v("\n    org.eclipse.jgit\n    org.eclipse.jgit\n    3.5.0.201409260305-r\n")])])]),s("p",[t._v("在你读到这段文字时 "),s("code",[t._v("version")]),t._v(" 很可能已经更新了，所以请浏览 "),s("a",{attrs:{href:"https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit"),s("OutboundLink")],1),t._v(" 以获取最新的仓库信息。 当这一步完成之后， Maven 就会自动获取并使用你所需要的 JGit 库。")]),t._v(" "),s("p",[t._v("如果你想自己管理二进制的依赖包，那么你可以从 "),s("a",{attrs:{href:"https://www.eclipse.org/jgit/download",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.eclipse.org/jgit/download"),s("OutboundLink")],1),t._v(" 获得预构建的 JGit 二进制文件。 你可以像下面这样执行一个命令来将它们构建进你的项目。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("javac -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App.java\njava -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App\n")])])]),s("h4",{attrs:{id:"底层命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#底层命令"}},[t._v("#")]),t._v(" 底层命令")]),t._v(" "),s("p",[t._v("JGit 的 API 有两种基本的层次：底层命令和高层命令。 这个两个术语都来自 Git ，并且 JGit 也被按照相同的方式粗略地划分：高层 API 是一个面向普通用户级别功能的友好的前端（一系列普通用户使用 Git 命令行工具时可能用到的东西），底层 API 则直接作用于低级的仓库对象。")]),t._v(" "),s("p",[t._v("大多数 JGit 会话会以 "),s("code",[t._v("Repository")]),t._v(" 类作为起点，你首先要做的事就是创建一个它的实例。 对于一个基于文件系统的仓库来说（嗯， JGit 允许其它的存储模型），用 "),s("code",[t._v("FileRepositoryBuilder")]),t._v(" 完成它。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个新仓库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Repository")]),t._v(" newlyCreatedRepo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileRepositoryBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/tmp/new_repo/.git"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnewlyCreatedRepo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打开一个存在的仓库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Repository")]),t._v(" existingRepo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileRepositoryBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setGitDir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_repo/.git"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("无论你的程序是否知道仓库的确切位置，builder 中的那个流畅的 API 都可以提供给它寻找仓库所需所有信息。 它可以使用环境变量 （"),s("code",[t._v(".readEnvironment()")]),t._v("） ，从工作目录的某处开始并搜索 （"),s("code",[t._v(".setWorkTree(…).findGitDir()")]),t._v("） , 或者仅仅只是像上面那样打开一个已知的 "),s("code",[t._v(".git")]),t._v(" 目录。")]),t._v(" "),s("p",[t._v("当你拥有一个 "),s("code",[t._v("Repository")]),t._v(" 实例后，你就能对它做各种各样的事。 下面是一个速览：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取引用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ref")]),t._v(" master "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRef")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"master"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取该引用所指向的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectId")]),t._v(" masterTip "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getObjectId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Rev-parse")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectId")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HEAD^{tree}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 装载对象原始内容")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectLoader")]),t._v(" loader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("masterTip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nloader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RefUpdate")]),t._v(" createBranch1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateRef")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"refs/heads/branch1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncreateBranch1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setNewObjectId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("masterTip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncreateBranch1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RefUpdate")]),t._v(" deleteBranch1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateRef")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"refs/heads/branch1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndeleteBranch1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setForceUpdate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndeleteBranch1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配置")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Config")]),t._v(" cfg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cfg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这里完成了一大堆事情，所以我们还是一次理解一段的好。")]),t._v(" "),s("p",[t._v("第一行获取一个指向 "),s("code",[t._v("master")]),t._v(" 引用的指针。 JGit 自动抓取位于 "),s("code",[t._v("refs/heads/master")]),t._v(" 的 "),s("em",[t._v("真正的")]),t._v(" "),s("code",[t._v("master")]),t._v(" 引用，并返回一个允许你获取该引用的信息的对象。 你可以获取它的名字 （"),s("code",[t._v(".getName()")]),t._v("） ，或者一个直接引用的目标对象 （"),s("code",[t._v(".getObjectId()")]),t._v("） ，或者一个指向该引用的符号指针 （"),s("code",[t._v(".getTarget()")]),t._v("） 。 引用对象也经常被用来表示标签的引用和对象，所以你可以询问某个标签是否被“削除”了，或者说它指向一个标签对象的（也许很长的）字符串的最终目标。")]),t._v(" "),s("p",[t._v("第二行获得以 "),s("code",[t._v("master")]),t._v(" 引用的目标，它返回一个 ObjectId 实例。 不管是否存在于一个 Git 对象的数据库，ObjectId 都会代表一个对象的 SHA-1 哈希。 第三行与此相似，但是它展示了 JGit 如何处理 rev-parse 语法（要了解更多，请看 "),s("a",{attrs:{href:"ch00/_branch_references"}},[t._v("分支引用")]),t._v(" ），你可以传入任何 Git 了解的对象说明符，然后 JGit 会返回该对象的一个有效的 ObjectId ，或者 "),s("code",[t._v("null")]),t._v(" 。")]),t._v(" "),s("p",[t._v("接下来两行展示了如何装载一个对象的原始内容。 在这个例子中，我们调用 "),s("code",[t._v("ObjectLoader.copyTo()")]),t._v(" 直接向标准输出流输出对象的内容，除此之外 ObjectLoader 还带有读取对象的类型和长度并将它以字节数组返回的方法。 对于一个（ "),s("code",[t._v(".isLarge()")]),t._v(" 返回 "),s("code",[t._v("true")]),t._v(" 的）大的对象，你可以调用 "),s("code",[t._v(".openStream()")]),t._v(" 来获得一个类似 InputStream 的对象，它可以在没有一次性将所有数据拉到内存的前提下读取对象的原始数据。")]),t._v(" "),s("p",[t._v("接下来几行展现了如何创建一个新的分支。 我们创建一个 RefUpdate 实例，配置一些参数，然后调用 "),s("code",[t._v(".update()")]),t._v(" 来确认这个更改。 删除相同分支的代码就在这行下面。 记住必须先 "),s("code",[t._v(".setForceUpdate(true)")]),t._v(" 才能让它工作，否则调用 "),s("code",[t._v(".delete()")]),t._v(" 只会返回 "),s("code",[t._v("REJECTED")]),t._v(" ，然后什么都没有发生。")]),t._v(" "),s("p",[t._v("最后一个例子展示了如何从 Git 配置文件中获取 "),s("code",[t._v("user.name")]),t._v(" 的值。 这个 Config 实例使用我们先前打开的仓库做本地配置，但是它也会自动地检测并读取全局和系统的配置文件。")]),t._v(" "),s("p",[t._v("这只是底层 API 的冰山一角，另外还有许多可以使用的方法和类。 还有一个没有放在这里说明的，就是 JGit 是用异常机制来处理错误的。 JGit API 有时使用标准的 Java 异常（例如 "),s("code",[t._v("IOException")]),t._v(" ），但是它也提供了大量 JGit 自己定义的异常类型（例如 "),s("code",[t._v("NoRemoteRepositoryException")]),t._v("、 "),s("code",[t._v("CorruptObjectException")]),t._v(" 和 "),s("code",[t._v("NoMergeBaseException")]),t._v("）。")]),t._v(" "),s("h4",{attrs:{id:"高层命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高层命令"}},[t._v("#")]),t._v(" 高层命令")]),t._v(" "),s("p",[t._v("底层 API 更加完善，但是有时将它们串起来以实现普通的目的非常困难，例如将一个文件添加到索引，或者创建一个新的提交。 为了解决这个问题， JGit 提供了一系列高层 API ，使用这些 API 的入口点就是 "),s("code",[t._v("Git")]),t._v(" 类：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Repository")]),t._v(" repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构建仓库……")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Git")]),t._v(" git "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Git")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Git 类有一系列非常好的 "),s("em",[t._v("构建器")]),t._v(" 风格的高层方法，它可以用来构造一些复杂的行为。 我们来看一个例子——做一件类似 "),s("code",[t._v("git ls-remote")]),t._v(" 的事。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CredentialsProvider")]),t._v(" cp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UsernamePasswordCredentialsProvider")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p4ssw0rd"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),t._v(" remoteRefs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" git"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lsRemote")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setCredentialsProvider")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setRemote")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"origin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTags")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeads")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ref")]),t._v(" ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" remoteRefs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ref"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" -> "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ref"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getObjectId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这是一个 Git 类的公共样式，这个方法返回一个可以让你串连若干方法调用来设置参数的命令对象，当你调用 "),s("code",[t._v(".call()")]),t._v(" 时它们就会被执行。 在这情况下，我们只是请求了 "),s("code",[t._v("origin")]),t._v(" 远程的标签，而不是头部。 还要注意用于验证的 "),s("code",[t._v("CredentialsProvider")]),t._v(" 对象的使用。")]),t._v(" "),s("p",[t._v("在 Git 类中还可以使用许多其它的命令，包括但不限于 "),s("code",[t._v("add")]),t._v("、"),s("code",[t._v("blame")]),t._v("、"),s("code",[t._v("commit")]),t._v("、"),s("code",[t._v("clean")]),t._v("、"),s("code",[t._v("push")]),t._v("、"),s("code",[t._v("rebase")]),t._v("、"),s("code",[t._v("revert")]),t._v(" 和 "),s("code",[t._v("reset")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"拓展阅读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拓展阅读"}},[t._v("#")]),t._v(" 拓展阅读")]),t._v(" "),s("p",[t._v("这只是 JGit 的全部能力的冰山一角。 如果你对这有兴趣并且想深入学习，在下面可以找到一些信息和灵感。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("JGit API 在线官方文档： "),s("a",{attrs:{href:"https://www.eclipse.org/jgit/documentation",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.eclipse.org/jgit/documentation"),s("OutboundLink")],1),t._v(" 。 这是基本的 Javadoc ，所以你也可以在你最喜欢的 JVM IDE 上将它们安装它们到本地。")])]),t._v(" "),s("li",[s("p",[t._v("JGit Cookbook ： "),s("a",{attrs:{href:"https://github.com/centic9/jgit-cookbook",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/centic9/jgit-cookbook"),s("OutboundLink")],1),t._v(" 拥有许多如何利用 JGit 实现特定任务的例子。")])])]),t._v(" "),s("h2",{attrs:{id:"a2-4-附录-b-在你的应用中嵌入-git-go-git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a2-4-附录-b-在你的应用中嵌入-git-go-git"}},[t._v("#")]),t._v(" A2.4 附录 B: 在你的应用中嵌入 Git - go-git")]),t._v(" "),s("h3",{attrs:{id:"go-git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go-git"}},[t._v("#")]),t._v(" go-git")]),t._v(" "),s("p",[t._v("如果你想将 Git 集成到用 Golang 编写的服务中，这里还有一个纯 Go 库的实现。 这个库的实现没有任何原生依赖，因此不易出现手动管理内存的错误。 它对于标准 Golang 性能分析工具（如 CPU、内存分析器、竞争检测器等）也是透明的。")]),t._v(" "),s("p",[t._v("go-git 专注于可扩展性、兼容性并支持大多数管道 API，记录在 "),s("a",{attrs:{href:"https://github.com/go-git/go-git/blob/master/COMPATIBILITY.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/go-git/go-git/blob/master/COMPATIBILITY.md"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("以下是使用 Go API 的基本示例：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" \t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gopkg.in/src-d/go-git.v4"')]),t._v("\n\nr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" git"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PlainClone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/tmp/foo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("git"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CloneOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    URL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://github.com/src-d/go-git"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Progress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Stdout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("你只要拥有一个 "),s("code",[t._v("Repository")]),t._v(" 实例，就可以访问相应仓库信息并对其进行改变：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 HEAD 指向的分支")]),t._v("\nref"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取由 ref 指向的提交对象")]),t._v("\ncommit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CommitObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ref"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Hash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检索提交历史")]),t._v("\nhistory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("History")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历并逐个打印提交")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" history "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"高级功能-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高级功能-2"}},[t._v("#")]),t._v(" 高级功能")]),t._v(" "),s("p",[t._v("go-git 几乎没有值得注意的高级功能，其中之一是可插拔存储系统，类似于 Libgit2 后端。 默认实现是内存存储，速度非常快。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" git"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("memory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewStorage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("git"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CloneOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    URL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://github.com/src-d/go-git"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("可插拔存储提供了许多有趣的选项。 例如，https://github.com/go-git/go-git/tree/master/_examples/storage[] 允许你在 Aerospike 数据库中存储引用、对象和配置。")]),t._v(" "),s("p",[t._v("另一个特性是灵活的文件系统抽象。 使用 "),s("a",{attrs:{href:"https://godoc.org/github.com/src-d/go-billy#Filesystem",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://godoc.org/github.com/src-d/go-billy#Filesystem"),s("OutboundLink")],1),t._v(" 可以很容易以不同的方式存储所有文件，即通过将所有文件打包到磁盘上的单个归档文件或保存它们都在内存中。")]),t._v(" "),s("p",[t._v("另一个高级用例包括一个可微调的 HTTP 客户端，例如 "),s("a",{attrs:{href:"https://github.com/go-git/go-git/blob/master/_examples/custom_http/main.go",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/go-git/go-git/blob/master/_examples/custom_http/main.go"),s("OutboundLink")],1),t._v(" 中的案例。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("customClient "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tTransport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Transport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接受任何证书（可能对测试有用）")]),t._v("\n\t\tTLSClientConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("InsecureSkipVerify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tTimeout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 15 秒超时")]),t._v("\n\t\tCheckRedirect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" via "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ErrUseLastResponse "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不要跟随重定向")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 覆盖 http(s) 默认协议以使用我们的自定义客户端")]),t._v("\nclient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("InstallProtocol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" githttp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("customClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果协议为 https://，则使用新客户端克隆存储库")]),t._v("\nr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" git"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("memory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewStorage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("git"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CloneOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("URL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"延伸阅读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#延伸阅读"}},[t._v("#")]),t._v(" 延伸阅读")]),t._v(" "),s("p",[t._v("对 go-git 功能的全面介绍超出了本书的范围。 如果您想了解有关 go-git 的更多信息，请参阅 "),s("a",{attrs:{href:"https://godoc.org/gopkg.in/src-d/go-git.v4",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://godoc.org/gopkg.in/src-d/go-git.v4"),s("OutboundLink")],1),t._v(" 上的 API 文档， 以及 "),s("a",{attrs:{href:"https://github.com/go-git/go-git/tree/master/_examples",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/go-git/go-git/tree/master/_examples"),s("OutboundLink")],1),t._v(" 上的系列使用示例。")]),t._v(" "),s("h2",{attrs:{id:"a2-5-附录-b-在你的应用中嵌入-git-dulwich"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a2-5-附录-b-在你的应用中嵌入-git-dulwich"}},[t._v("#")]),t._v(" A2.5 附录 B: 在你的应用中嵌入 Git - Dulwich")]),t._v(" "),s("h3",{attrs:{id:"dulwich"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dulwich"}},[t._v("#")]),t._v(" Dulwich")]),t._v(" "),s("p",[t._v("There is also a pure-Python Git implementation - Dulwich. The project is hosted under "),s("a",{attrs:{href:"https://www.dulwich.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.dulwich.io/"),s("OutboundLink")],1),t._v(" It aims to provide an interface to git repositories (both local and remote) that doesn’t call out to git directly but instead uses pure Python. It has an optional C extensions though, that significantly improve the performance.")]),t._v(" "),s("p",[t._v("Dulwich follows git design and separate two basic levels of API: plumbing and porcelain.")]),t._v(" "),s("p",[t._v("Here is an example of using the lower level API to access the commit message of the last commit:")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" dulwich"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("repo "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Repo\nr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# '57fbe010446356833a6ad1600059d80b1e731e15'")]),t._v("\n\nc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nc\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ")]),t._v("\n\nc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 'Add note about encoding.\\n'")]),t._v("\n")])])]),s("p",[t._v("To print a commit log using high-level porcelain API, one can use:")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" dulwich "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" porcelain\nporcelain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max_entries"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#commit: 57fbe010446356833a6ad1600059d80b1e731e15")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Author: Jelmer Vernooĳ ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Date:   Sat Apr 29 2017 23:57:34 +0000")]),t._v("\n")])])]),s("h4",{attrs:{id:"further-reading"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#further-reading"}},[t._v("#")]),t._v(" Further Reading")]),t._v(" "),s("p",[t._v("The API documentation, tutorial, and many examples of how to do specific tasks with Dulwich are available on the official website "),s("a",{attrs:{href:"https://www.dulwich.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.dulwich.io"),s("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);s.default=e.exports}}]);