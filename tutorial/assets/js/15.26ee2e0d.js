(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{340:function(t,_,v){"use strict";v.r(_);var e=v(15),r=Object(e.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"_13-附录-c-git-命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_13-附录-c-git-命令"}},[t._v("#")]),t._v(" 13 附录 C: Git 命令")]),t._v(" "),_("h2",{attrs:{id:"a3-1-附录-c-git-命令-设置与配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a3-1-附录-c-git-命令-设置与配置"}},[t._v("#")]),t._v(" A3.1 附录 C: Git 命令 - 设置与配置")]),t._v(" "),_("p",[t._v("在这一整本书里我们介绍了大量的 Git 命令，并尽可能的通过讲故事的的方式来介绍它们，慢慢的介绍了越来越多的命令。 但是这导致这些命令的示例用法都散落在在全书的各处。")]),t._v(" "),_("p",[t._v("在此附录中，我们会将本书中所提到过的命令都过一遍，并根据其用途大致的分类。 我们会大致地讨论每个命的作用，指出其在本书中哪些章节使用过。")]),t._v(" "),_("h3",{attrs:{id:"设置与配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设置与配置"}},[t._v("#")]),t._v(" 设置与配置")]),t._v(" "),_("p",[t._v("有两个十分常用的命令："),_("code",[t._v("config")]),t._v(" 和 "),_("code",[t._v("help")]),t._v("。 从第一次调用 Git 到日常微调及阅读参考，它们一直陪伴着你。")]),t._v(" "),_("h4",{attrs:{id:"git-config"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-config"}},[t._v("#")]),t._v(" git config")]),t._v(" "),_("p",[t._v("Git 做的很多工作都有一种默认方式。 对于绝大多数工作而言，你可以改变 Git 的默认方式，或者根据你的偏好来设置。 这些设置涵盖了所有的事，从告诉 Git 你的名字，到指定偏好的终端颜色，以及你使用的编辑器。 此命令会从几个特定的配置文件中读取和写入配置值，以便你可以从全局或者针对特定的仓库来进行设置。")]),t._v(" "),_("p",[t._v("本书几乎所有的章节都用到了 "),_("code",[t._v("git config")]),t._v(" 命令。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_first_time"}},[t._v("初次运行 Git 前的配置")]),t._v(" 一节中，在开始使用 Git 之前，我们用它来指定我们的名字，邮箱地址和编辑器偏好。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_git_aliases"}},[t._v("Git 别名")]),t._v(" 一节中我们展示了如何创建可以展开为长选项序列的短命令，以便你不用每次都输入它们。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_rebasing"}},[t._v("变基")]),t._v(" 一节中，执行 "),_("code",[t._v("git pull")]),t._v(" 命令时，使用此命令来将 "),_("code",[t._v("--rebase")]),t._v(" 作为默认选项。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_credential_caching"}},[t._v("凭证存储")]),t._v(" 一节中，我们使用它来为你的 HTTP 密码设置一个默认的存储区域。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_keyword_expansion"}},[t._v("关键字展开")]),t._v(" 一节中我们展示了如何设置在 Git 的内容添加和减少时使用的 smudge 过滤器 和 clean 过滤器。")]),t._v(" "),_("p",[t._v("最后，基本上 "),_("a",{attrs:{href:"ch00/_git_config"}},[t._v("配置 Git")]),t._v(" 整个章节都是针对此命令的。")]),t._v(" "),_("h4",{attrs:{id:"git-config-core-editor-命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-config-core-editor-命令"}},[t._v("#")]),t._v(" git config core.editor 命令")]),t._v(" "),_("p",[t._v("就像 "),_("a",{attrs:{href:"ch00/_first_time"}},[t._v("初次运行 Git 前的配置")]),t._v(" 里的设置指示，很多编辑器可以如下设置：")]),t._v(" "),_("p",[t._v("Table 4. 详细的 "),_("code",[t._v("core.editor")]),t._v(" 设置命令列表")]),t._v(" "),_("p",[t._v("编辑器")]),t._v(" "),_("p",[t._v("设置命令")]),t._v(" "),_("p",[t._v("Atom")]),t._v(" "),_("p",[_("code",[t._v('git config --global core.editor "atom --wait"')])]),t._v(" "),_("p",[t._v("BBEdit (Mac, with command line tools)")]),t._v(" "),_("p",[_("code",[t._v('git config --global core.editor "bbedit -w"')])]),t._v(" "),_("p",[t._v("Emacs")]),t._v(" "),_("p",[_("code",[t._v("git config --global core.editor emacs")])]),t._v(" "),_("p",[t._v("Gedit (Linux)")]),t._v(" "),_("p",[_("code",[t._v('git config --global core.editor "gedit --wait --new-window"')])]),t._v(" "),_("p",[t._v("Gvim (Windows 64-bit)")]),t._v(" "),_("p",[_("code",[t._v("git config --global core.editor \"'C:/Program Files/Vim/vim72/gvim.exe' --nofork '%*'\"")]),t._v(" (Also see note below)")]),t._v(" "),_("p",[t._v("Kate (Linux)")]),t._v(" "),_("p",[_("code",[t._v('git config --global core.editor "kate"')])]),t._v(" "),_("p",[t._v("nano")]),t._v(" "),_("p",[_("code",[t._v('git config --global core.editor "nano -w"')])]),t._v(" "),_("p",[t._v("Notepad (Windows 64-bit)")]),t._v(" "),_("p",[_("code",[t._v("git config core.editor notepad")])]),t._v(" "),_("p",[t._v("Notepad++ (Windows 64-bit)")]),t._v(" "),_("p",[_("code",[t._v("git config --global core.editor \"'C:/Program Files/Notepad/notepad.exe' -multiInst -notabbar -nosession -noPlugin\"")]),t._v(" (Also see note below)")]),t._v(" "),_("p",[t._v("Scratch (Linux)")]),t._v(" "),_("p",[_("code",[t._v('git config --global core.editor "scratch-text-editor"')])]),t._v(" "),_("p",[t._v("Sublime Text (macOS)")]),t._v(" "),_("p",[_("code",[t._v('git config --global core.editor "/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl --new-window --wait"')])]),t._v(" "),_("p",[t._v("Sublime Text (Windows 64-bit)")]),t._v(" "),_("p",[_("code",[t._v("git config --global core.editor \"'C:/Program Files/Sublime Text 3/sublime_text.exe' -w\"")]),t._v(" (Also see note below)")]),t._v(" "),_("p",[t._v("TextEdit (macOS)")]),t._v(" "),_("p",[_("code",[t._v('git config --global --add core.editor "open -W -n"')])]),t._v(" "),_("p",[t._v("Textmate")]),t._v(" "),_("p",[_("code",[t._v('git config --global core.editor "mate -w"')])]),t._v(" "),_("p",[t._v("Textpad (Windows 64-bit)")]),t._v(" "),_("p",[_("code",[t._v("git config --global core.editor \"'C:/Program Files/TextPad 5/TextPad.exe' -m")]),t._v(" (Also see note below)")]),t._v(" "),_("p",[t._v("Vim")]),t._v(" "),_("p",[_("code",[t._v('git config --global core.editor "vim"')])]),t._v(" "),_("p",[t._v("VS Code")]),t._v(" "),_("p",[_("code",[t._v('git config --global core.editor "code --wait"')])]),t._v(" "),_("p",[t._v("WordPad")]),t._v(" "),_("p",[_("code",[t._v('git config --global core.editor \'"C:\\Program Files\\Windows NT\\Accessories\\wordpad.exe"\'"')])]),t._v(" "),_("p",[t._v("Xi")]),t._v(" "),_("p",[_("code",[t._v('git config --global core.editor "xi --wait"')])]),t._v(" "),_("p",[t._v("Note")]),t._v(" "),_("p",[t._v("如果你在 64 位 Windows 系统上安装了 32 位的编辑器，那么它会被安装在 "),_("code",[t._v("C:\\Program Files (x86)\\")]),t._v(" 而非上表中所写的 "),_("code",[t._v("C:\\Program Files\\")]),t._v(" 中。")]),t._v(" "),_("h4",{attrs:{id:"git-help"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-help"}},[t._v("#")]),t._v(" git help")]),t._v(" "),_("p",[_("code",[t._v("git help")]),t._v(" 命令用来显示任何命令的 Git 自带文档。 但是我们仅会在此附录中提到大部分最常用的命令，对于每一个命令的完整的可选项及标志列表，你可以随时运行 "),_("code",[t._v("git help")]),t._v(" 命令来了解。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_git_help"}},[t._v("获取帮助")]),t._v(" 一节中介绍了 "),_("code",[t._v("git help")]),t._v(" 命令，同时在 "),_("a",{attrs:{href:"ch00/_setting_up_server"}},[t._v("配置服务器")]),t._v(" 一节中给你展示了如何使用它来查找更多关于 "),_("code",[t._v("git shell")]),t._v(" 的信息。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-B%3A-%E5%9C%A8%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%AD%E5%B5%8C%E5%85%A5-Git-Dulwich",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),_("OutboundLink")],1),t._v(" | "),_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E8%8E%B7%E5%8F%96%E4%B8%8E%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"a3-2-附录-c-git-命令-获取与创建项目"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a3-2-附录-c-git-命令-获取与创建项目"}},[t._v("#")]),t._v(" A3.2 附录 C: Git 命令 - 获取与创建项目")]),t._v(" "),_("h3",{attrs:{id:"获取与创建项目"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#获取与创建项目"}},[t._v("#")]),t._v(" 获取与创建项目")]),t._v(" "),_("p",[t._v("有几种方式获取一个 Git 仓库。 一种是从网络上或者其他地方拷贝一个现有的仓库，另一种就是在一个目录中创建一个新的仓库。")]),t._v(" "),_("h4",{attrs:{id:"git-init"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-init"}},[t._v("#")]),t._v(" git init")]),t._v(" "),_("p",[t._v("你只需要简单地运行 "),_("code",[t._v("git init")]),t._v(" 就可以将一个目录转变成一个 Git 仓库，这样你就可以开始对它进行版本管理了。")]),t._v(" "),_("p",[t._v("我们一开始在 "),_("a",{attrs:{href:"ch00/_getting_a_repo"}},[t._v("获取 Git 仓库")]),t._v(" 一节中介绍了如何创建一个新的仓库来开始工作。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_remote_branches"}},[t._v("远程分支")]),t._v(" 一节中我们简单的讨论了如何改变默认分支。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_bare_repo"}},[t._v("把裸仓库放到服务器上")]),t._v(" 一节中我们使用此命令来为一个服务器创建一个空的祼仓库。")]),t._v(" "),_("p",[t._v("最后，我们在 "),_("a",{attrs:{href:"ch00/_plumbing_porcelain"}},[t._v("底层命令与上层命令")]),t._v(" 一节中介绍了此命令背后工作的原理的一些细节。")]),t._v(" "),_("h4",{attrs:{id:"git-clone"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-clone"}},[t._v("#")]),t._v(" git clone")]),t._v(" "),_("p",[_("code",[t._v("git clone")]),t._v(" 实际上是一个封装了其他几个命令的命令。 它创建了一个新目录，切换到新的目录，然后 "),_("code",[t._v("git init")]),t._v(" 来初始化一个空的 Git 仓库， 然后为你指定的 URL 添加一个（默认名称为 "),_("code",[t._v("origin")]),t._v(" 的）远程仓库（"),_("code",[t._v("git remote add")]),t._v("），再针对远程仓库执行 "),_("code",[t._v("git fetch")]),t._v("，最后通过 "),_("code",[t._v("git checkout")]),t._v(" 将远程仓库的最新提交检出到本地的工作目录。")]),t._v(" "),_("p",[_("code",[t._v("git clone")]),t._v(" 命令在本书中多次用到，这里只列举几个有意思的地方。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_git_cloning"}},[t._v("克隆现有的仓库")]),t._v(" 一节中我们通过几个示例详细介绍了此命令。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_getting_git_on_a_server"}},[t._v("在服务器上搭建 Git")]),t._v(" 一节中，我们使用了 "),_("code",[t._v("--bare")]),t._v(" 选项来创建一个没有任何工作目录的 Git 仓库副本。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_bundling"}},[t._v("打包")]),t._v(" 一节中我们使用它来解包一个打包好的 Git 仓库。")]),t._v(" "),_("p",[t._v("最后，在 "),_("a",{attrs:{href:"ch00/_cloning_submodules"}},[t._v("克隆含有子模块的项目")]),t._v(" 一节中我们学习了使用 "),_("code",[t._v("--recursive")]),t._v(" 选项来让克隆一个带有子模块的仓库变得简单。")]),t._v(" "),_("p",[t._v("虽然在本书的其他地方都有用到此命令，但是上面这些用法是特例，或者使用方式有点特别。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E8%AE%BE%E7%BD%AE%E4%B8%8E%E9%85%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),_("OutboundLink")],1),t._v(" | "),_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E5%BF%AB%E7%85%A7%E5%9F%BA%E7%A1%80",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"a3-3-附录-c-git-命令-快照基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a3-3-附录-c-git-命令-快照基础"}},[t._v("#")]),t._v(" A3.3 附录 C: Git 命令 - 快照基础")]),t._v(" "),_("h3",{attrs:{id:"快照基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#快照基础"}},[t._v("#")]),t._v(" 快照基础")]),t._v(" "),_("p",[t._v("对于基本的暂存内容及提交到你的历史记录中的工作流，只有少数基本的命令。")]),t._v(" "),_("h4",{attrs:{id:"git-add"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-add"}},[t._v("#")]),t._v(" git add")]),t._v(" "),_("p",[_("code",[t._v("git add")]),t._v(" 命令将内容从工作目录添加到暂存区（或称为索引（index）区），以备下次提交。 当 "),_("code",[t._v("git commit")]),t._v(" 命令执行时，默认情况下它只会检查暂存区域，因此 "),_("code",[t._v("git add")]),t._v(" 是用来确定下一次提交时快照的样子的。")]),t._v(" "),_("p",[t._v("这个命令对于 Git 来说特别重要，所以在本书中被无数次地提及和使用。 我们将快速地过一遍一些可以看到的独特的用法。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_tracking_files"}},[t._v("跟踪新文件")]),t._v(" 一节中介绍并详细解释了 "),_("code",[t._v("git add")]),t._v(" 命令。")]),t._v(" "),_("p",[t._v("然后，我们在 "),_("a",{attrs:{href:"ch00/_basic_merge_conflicts"}},[t._v("遇到冲突时的分支合并")]),t._v(" 一节中提到了如何使用它来解决合并冲突。")]),t._v(" "),_("p",[t._v("接下来，我们在 "),_("a",{attrs:{href:"ch00/_interactive_staging"}},[t._v("交互式暂存")]),t._v(" 一章中使用它来交互式的暂存一个已修改文件的特定部分。")]),t._v(" "),_("p",[t._v("最后，在 "),_("a",{attrs:{href:"ch00/_tree_objects"}},[t._v("树对象")]),t._v(" 一节中我们在底层模拟了它的用法，以便你了解幕后发生了什么。")]),t._v(" "),_("h4",{attrs:{id:"git-status"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-status"}},[t._v("#")]),t._v(" git status")]),t._v(" "),_("p",[_("code",[t._v("git status")]),t._v(" 命令会显示工作区及暂存区域中不同状态的文件。 其中包含了已修改但未暂存，或已经暂存但没有提交的文件。 在一般的显示形式中，它会给你一些如何在这些暂存区之间移动文件的提示。")]),t._v(" "),_("p",[t._v("首先，我们在 "),_("a",{attrs:{href:"ch00/_checking_status"}},[t._v("检查当前文件状态")]),t._v(" 一节中介绍了 "),_("code",[t._v("status")]),t._v(" 的基本及简单的形式。 虽然我们在全书中都有用到它，但是绝大部分的你能用 "),_("code",[t._v("git status")]),t._v(" 做的事情都在这一章讲到了。")]),t._v(" "),_("h4",{attrs:{id:"git-diff"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-diff"}},[t._v("#")]),t._v(" git diff")]),t._v(" "),_("p",[t._v("当需要查看任意两棵树的差异时，可以使用 "),_("code",[t._v("git diff")]),t._v(" 命令。 此命令可以查看你工作环境与你的暂存区的差异（"),_("code",[t._v("git diff")]),t._v(" 默认的做法），你暂存区域与你最后提交之间的差异（"),_("code",[t._v("git diff --staged")]),t._v("），或者比较两个提交记录的差异（"),_("code",[t._v("git diff master branchB")]),t._v("）。")]),t._v(" "),_("p",[t._v("首先，我们在 "),_("a",{attrs:{href:"ch00/_git_diff_staged"}},[t._v("查看已暂存和未暂存的修改")]),t._v(" 一章中研究了 "),_("code",[t._v("git diff")]),t._v(" 的基本用法，在此节中我们展示了如何查看哪些变化已经暂存了，哪些没有。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_commit_guidelines"}},[t._v("提交准则")]),t._v(" 一节中,我们在提交前使用 "),_("code",[t._v("--check")]),t._v(" 选项来检查可能存在的空白字符问题。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_what_is_introduced"}},[t._v("确定引入了哪些东西")]),t._v(" 一节中,了解了使用 "),_("code",[t._v("git diff A…​B")]),t._v(" 语法来更有效地比较不同分支之间的差异。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_advanced_merging"}},[t._v("高级合并")]),t._v(" 一节中我们使用 "),_("code",[t._v("-b")]),t._v(" 选项来过滤掉空白字符的差异，及通过 "),_("code",[t._v("--theirs")]),t._v("、"),_("code",[t._v("--ours")]),t._v(" 和 "),_("code",[t._v("--base")]),t._v(" 选项来比较不同暂存区冲突文件的差异。")]),t._v(" "),_("p",[t._v("最后，在 "),_("a",{attrs:{href:"ch00/_starting_submodules"}},[t._v("开始使用子模块")]),t._v(" 一节中,我们使用此命令合 "),_("code",[t._v("--submodule")]),t._v(" 选项来有效地比较子模块的变化。")]),t._v(" "),_("h4",{attrs:{id:"git-difftool"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-difftool"}},[t._v("#")]),t._v(" git difftool")]),t._v(" "),_("p",[t._v("当你不想使用内置的 "),_("code",[t._v("git diff")]),t._v(" 命令时。"),_("code",[t._v("git difftool")]),t._v(" 可以用来简单地启动一个外部工具来为你展示两棵树之间的差异。")]),t._v(" "),_("p",[t._v("我们只在 "),_("a",{attrs:{href:"ch00/_git_diff_staged"}},[t._v("查看已暂存和未暂存的修改")]),t._v(" 一节中简单的提到了此命令。")]),t._v(" "),_("h4",{attrs:{id:"git-commit"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[t._v("#")]),t._v(" git commit")]),t._v(" "),_("p",[_("code",[t._v("git commit")]),t._v(" 命令将所有通过 "),_("code",[t._v("git add")]),t._v(" 暂存的文件内容在数据库中创建一个持久的快照，然后将当前分支上的分支指针移到其之上。")]),t._v(" "),_("p",[t._v("首先，我们在 "),_("a",{attrs:{href:"ch00/_committing_changes"}},[t._v("提交更新")]),t._v(" 一节中涉及了此命令的基本用法。 我们演示了如何在日常的工作流程中通过使用 "),_("code",[t._v("-a")]),t._v(" 标志来跳过 "),_("code",[t._v("git add")]),t._v(" 这一步，及如何使用 "),_("code",[t._v("-m")]),t._v(" 标志通过命令行而不启动一个编辑器来传递提交信息。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_undoing"}},[t._v("撤消操作")]),t._v(" 一节中我们介绍了使用 "),_("code",[t._v("--amend")]),t._v(" 选项来重做最后的提交。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_git_branches_overview"}},[t._v("分支简介")]),t._v("，我们探讨了 "),_("code",[t._v("git commit")]),t._v(" 的更多细节，及工作原理。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_signing_commits"}},[t._v("签署提交")]),t._v(" 一节中我们探讨了如何使用 "),_("code",[t._v("-S")]),t._v(" 标志来为提交签名加密。")]),t._v(" "),_("p",[t._v("最后，在 "),_("a",{attrs:{href:"ch00/_git_commit_objects"}},[t._v("提交对象")]),t._v(" 一节中，我们了解了 "),_("code",[t._v("git commit")]),t._v(" 在背后做了什么，及它是如何实现的。")]),t._v(" "),_("h4",{attrs:{id:"git-reset"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),_("p",[_("code",[t._v("git reset")]),t._v(" 命令主要用来根据你传递给动作的参数来执行撤销操作。 它可以移动 "),_("code",[t._v("HEAD")]),t._v(" 指针并且可选的改变 "),_("code",[t._v("index")]),t._v(" 或者暂存区，如果你使用 "),_("code",[t._v("--hard")]),t._v(" 参数的话你甚至可以改变工作区。 如果错误地为这个命令附加后面的参数，你可能会丢失你的工作，所以在使用前你要确定你已经完全理解了它。")]),t._v(" "),_("p",[t._v("首先，我们在 "),_("a",{attrs:{href:"ch00/_unstaging"}},[t._v("取消暂存的文件")]),t._v(" 一节中介绍了 "),_("code",[t._v("git reset")]),t._v(" 简单高效的用法，用来对执行过 "),_("code",[t._v("git add")]),t._v(" 命令的文件取消暂存。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_git_reset"}},[t._v("重置揭密")]),t._v(" 一节中我们详细介绍了此命令，几乎整节都在解释此命令。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_abort_merge"}},[t._v("中断一次合并")]),t._v(" 一节中，我们使用 "),_("code",[t._v("git reset --hard")]),t._v(" 来取消一个合并，同时我们也使用了 "),_("code",[t._v("git merge --abort")]),t._v(" 命令，它是 "),_("code",[t._v("git reset")]),t._v(" 的一个简单的封装。")]),t._v(" "),_("h4",{attrs:{id:"git-rm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-rm"}},[t._v("#")]),t._v(" git rm")]),t._v(" "),_("p",[_("code",[t._v("git rm")]),t._v(" 是 Git 用来从工作区，或者暂存区移除文件的命令。 在为下一次提交暂存一个移除操作上，它与 "),_("code",[t._v("git add")]),t._v(" 有一点类似。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_removing_files"}},[t._v("移除文件")]),t._v(" 一节中提到了 "),_("code",[t._v("git rm")]),t._v(" 的一些细节，包括递归地移除文件，和使用 "),_("code",[t._v("--cached")]),t._v(" 选项来只移除暂存区域的文件但是保留工作区的文件。")]),t._v(" "),_("p",[t._v("在本书的 "),_("a",{attrs:{href:"ch00/_removing_objects"}},[t._v("移除对象")]),t._v(" 一节中，介绍了 "),_("code",[t._v("git rm")]),t._v(" 仅有的几种不同用法，如在执行 "),_("code",[t._v("git filter-branch")]),t._v(" 中使用和解释了 "),_("code",[t._v("--ignore-unmatch")]),t._v(" 选项。 这对脚本来说很有用。")]),t._v(" "),_("h4",{attrs:{id:"git-mv"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-mv"}},[t._v("#")]),t._v(" git mv")]),t._v(" "),_("p",[_("code",[t._v("git mv")]),t._v(" 命令是一个便利命令，用于移到一个文件并且在新文件上执行`git add`命令及在老文件上执行`git rm`命令。")]),t._v(" "),_("p",[t._v("我们只是在 "),_("a",{attrs:{href:"ch00/_git_mv"}},[t._v("移动文件")]),t._v(" 一节中简单地提到了此命令。")]),t._v(" "),_("h4",{attrs:{id:"git-clean"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-clean"}},[t._v("#")]),t._v(" git clean")]),t._v(" "),_("p",[_("code",[t._v("git clean")]),t._v(" 是一个用来从工作区中移除不想要的文件的命令。 可以是编译的临时文件或者合并冲突的文件。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_git_clean"}},[t._v("清理工作目录")]),t._v(" 一节中我们介绍了你可能会使用 "),_("code",[t._v("clean")]),t._v(" 命令的大量选项及场景。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E8%8E%B7%E5%8F%96%E4%B8%8E%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),_("OutboundLink")],1),t._v(" | "),_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E5%88%86%E6%94%AF%E4%B8%8E%E5%90%88%E5%B9%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"a3-4-附录-c-git-命令-分支与合并"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a3-4-附录-c-git-命令-分支与合并"}},[t._v("#")]),t._v(" A3.4 附录 C: Git 命令 - 分支与合并")]),t._v(" "),_("h3",{attrs:{id:"分支与合并"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支与合并"}},[t._v("#")]),t._v(" 分支与合并")]),t._v(" "),_("p",[t._v("Git 有几个实现大部的分支及合并功能的实用命令。")]),t._v(" "),_("h4",{attrs:{id:"git-branch"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),_("p",[_("code",[t._v("git branch")]),t._v(" 命令实际上是某种程度上的分支管理工具。 它可以列出你所有的分支、创建新分支、删除分支及重命名分支。")]),t._v(" "),_("p",[_("a",{attrs:{href:"ch00/ch03-git-branching"}},[t._v("Git 分支")]),t._v(" 一节主要是为 "),_("code",[t._v("branch")]),t._v(" 命令来设计的，它贯穿了整个章节。 首先，我们在 "),_("a",{attrs:{href:"ch00/_create_new_branch"}},[t._v("分支创建")]),t._v(" 一节中介绍了它，然后我们在 "),_("a",{attrs:{href:"ch00/_branch_management"}},[t._v("分支管理")]),t._v(" 一节中介绍了它的其它大部分特性（列举及删除）。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_tracking_branches"}},[t._v("跟踪分支")]),t._v(" 一节中，我们使用 "),_("code",[t._v("git branch -u")]),t._v(" 选项来设置一个跟踪分支。")]),t._v(" "),_("p",[t._v("最后，我们在 "),_("a",{attrs:{href:"ch00/_git_refs"}},[t._v("Git 引用")]),t._v(" 一节中讲到了它在背后做一什么。")]),t._v(" "),_("h4",{attrs:{id:"git-checkout"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout"}},[t._v("#")]),t._v(" git checkout")]),t._v(" "),_("p",[_("code",[t._v("git checkout")]),t._v(" 命令用来切换分支，或者检出内容到工作目录。")]),t._v(" "),_("p",[t._v("我们是在 "),_("a",{attrs:{href:"ch00/_switching_branches"}},[t._v("分支切换")]),t._v(" 一节中第一次认识了命令及 "),_("code",[t._v("git branch")]),t._v(" 命令。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_tracking_branches"}},[t._v("跟踪分支")]),t._v(" 一节中我们了解了如何使用 "),_("code",[t._v("--track")]),t._v(" 标志来开始跟踪分支。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_checking_out_conflicts"}},[t._v("检出冲突")]),t._v(" 一节中，我们用此命令和 "),_("code",[t._v("--conflict=diff3")]),t._v(" 来重新介绍文件冲突。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_git_reset"}},[t._v("重置揭密")]),t._v(" 一节中，我们进一步了解了其细节及与 "),_("code",[t._v("git reset")]),t._v(" 的关系。")]),t._v(" "),_("p",[t._v("最后，我们在 "),_("a",{attrs:{href:"ch00/ref_the_ref"}},[t._v("HEAD 引用")]),t._v(" 一节中介绍了此命令的一些实现细节。")]),t._v(" "),_("h4",{attrs:{id:"git-merge"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-merge"}},[t._v("#")]),t._v(" git merge")]),t._v(" "),_("p",[_("code",[t._v("git merge")]),t._v(" 工具用来合并一个或者多个分支到你已经检出的分支中。 然后它将当前分支指针移动到合并结果上。")]),t._v(" "),_("p",[t._v("我们首先在 "),_("a",{attrs:{href:"ch00/_basic_branching"}},[t._v("新建分支")]),t._v(" 一节中介绍了 "),_("code",[t._v("git merge")]),t._v(" 命令。 虽然它在本书的各种地方都有用到，但是 "),_("code",[t._v("merge")]),t._v(" 命令只有几个变种，一般只是 "),_("code",[t._v("git merge")]),t._v(" 带上一个你想合并进来的一个分支名称。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_public_project"}},[t._v("派生的公开项目")]),t._v(" 的后面介绍了如何做一个 "),_("code",[t._v("squashed merge")]),t._v(" （指 Git 合并时将其当作一个新的提交而不是记录你合并时的分支的历史记录。）")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_advanced_merging"}},[t._v("高级合并")]),t._v(" 一节中，我们介绍了合并的过程及命令，包含 "),_("code",[t._v("-Xignore-space-change")]),t._v(" 命令及 "),_("code",[t._v("--abort")]),t._v(" 选项来中止一个有问题的提交。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_signing_commits"}},[t._v("签署提交")]),t._v(" 一节中我们学习了如何在合并前验证签名，如果你项目正在使用 GPG 签名的话。")]),t._v(" "),_("p",[t._v("最后，我们在 "),_("a",{attrs:{href:"ch00/_subtree_merge"}},[t._v("子树合并")]),t._v(" 一节中学习了子树合并。")]),t._v(" "),_("h4",{attrs:{id:"git-mergetool"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-mergetool"}},[t._v("#")]),t._v(" git mergetool")]),t._v(" "),_("p",[t._v("当你在 Git 的合并中遇到问题时，可以使用 "),_("code",[t._v("git mergetool")]),t._v(" 来启动一个外部的合并帮助工具。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_basic_merge_conflicts"}},[t._v("遇到冲突时的分支合并")]),t._v(" 中快速介绍了一下它，然后在 "),_("a",{attrs:{href:"ch00/_external_merge_tools"}},[t._v("外部的合并与比较工具")]),t._v(" 一节中介绍了如何实现你自己的外部合并工具的细节。")]),t._v(" "),_("h4",{attrs:{id:"git-log"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-log"}},[t._v("#")]),t._v(" git log")]),t._v(" "),_("p",[_("code",[t._v("git log")]),t._v(" 命令用来展示一个项目的可达历史记录，从最近的提交快照起。 默认情况下，它只显示你当前所在分支的历史记录，但是可以显示不同的甚至多个头记录或分支以供遍历。 此命令通常也用来在提交记录级别显示两个或多个分支之间的差异。")]),t._v(" "),_("p",[t._v("在本书的每一章几乎都有用到此命令来描述一个项目的历史。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_viewing_history"}},[t._v("查看提交历史")]),t._v(" 一节中我们介绍了此命令，并深入做了研究。 研究了包括 "),_("code",[t._v("-p")]),t._v(" 和 "),_("code",[t._v("--stat")]),t._v(" 选项来了解每一个提交引入的变更，及使用`--pretty` 和 "),_("code",[t._v("--online")]),t._v(" 选项来查看简洁的历史记录。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_create_new_branch"}},[t._v("分支创建")]),t._v(" 一节中我们使用它加 "),_("code",[t._v("--decorate")]),t._v(" 选项来简单的可视化我们分支的指针所在，同时我们使用 "),_("code",[t._v("--graph")]),t._v(" 选项来查看分叉的历史记录是怎么样的。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_private_team"}},[t._v("私有小型团队")]),t._v(" 和 "),_("a",{attrs:{href:"ch00/_commit_ranges"}},[t._v("提交区间")]),t._v(" 章节中，我们介绍了在使用 "),_("code",[t._v("git log")]),t._v(" 命令时用 "),_("code",[t._v("branchA..branchB")]),t._v(" 的语法来查看一个分支相对于另一个分支, 哪一些提交是唯一的。 在 "),_("a",{attrs:{href:"ch00/_commit_ranges"}},[t._v("提交区间")]),t._v(" 一节中我们作了更多介绍。")]),t._v(" "),_("p",[t._v("在 <_merge_log>> 和 "),_("a",{attrs:{href:"ch00/_triple_dot"}},[t._v("三点")]),t._v(" 章节中，我们介绍了 "),_("code",[t._v("branchA…​branchB")]),t._v(" 格式和 "),_("code",[t._v("--left-right")]),t._v(" 语法来查看哪些仅其中一个分支。 在 "),_("a",{attrs:{href:"ch00/_merge_log"}},[t._v("合并日志")]),t._v(" 一节中我们还研究了如何使用 "),_("code",[t._v("--merge")]),t._v(" 选项来帮助合并冲突调试，同样也使用 "),_("code",[t._v("--cc")]),t._v(" 选项来查看在你历史记录中的合并提交的冲突。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_git_reflog"}},[t._v("引用日志")]),t._v(" 一节中我们使用此工具和 "),_("code",[t._v("-g")]),t._v(" 选项 而不是遍历分支来查看 Git 的 "),_("code",[t._v("reflog")]),t._v("。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_searching"}},[t._v("搜索")]),t._v(" 一节中我们研究了`-S` 及 "),_("code",[t._v("-L")]),t._v(" 选项来进行来在代码的历史变更中进行相当优雅地搜索，如一个函数的历史。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_signing_commits"}},[t._v("签署提交")]),t._v(" 一节中，我们了解了如何使用 "),_("code",[t._v("--show-signature")]),t._v(" 来为每一个提交的 "),_("code",[t._v("git log")]),t._v(" 输出中，添加一个判断是否已经合法的签名的一个验证。")]),t._v(" "),_("h4",{attrs:{id:"git-stash"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),_("p",[_("code",[t._v("git stash")]),t._v(" 命令用来临时地保存一些还没有提交的工作，以便在分支上不需要提交未完成工作就可以清理工作目录。")]),t._v(" "),_("p",[_("a",{attrs:{href:"ch00/_git_stashing"}},[t._v("贮藏与清理")]),t._v(" 一整个章节基本就是在讲这个命令。")]),t._v(" "),_("h4",{attrs:{id:"git-tag"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-tag"}},[t._v("#")]),t._v(" git tag")]),t._v(" "),_("p",[_("code",[t._v("git tag")]),t._v(" 命令用来为代码历史记录中的某一个点指定一个永久的书签。 一般来说它用于发布相关事项。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_git_tagging"}},[t._v("打标签")]),t._v(" 一节中介绍了此命令及相关细节，并在 "),_("a",{attrs:{href:"ch00/_tagging_releases"}},[t._v("为发布打标签")]),t._v(" 一节实践了此命令。")]),t._v(" "),_("p",[t._v("我也在 "),_("a",{attrs:{href:"ch00/_signing"}},[t._v("签署工作")]),t._v(" 一节中介绍了如何使用 "),_("code",[t._v("-s")]),t._v(" 标志创建一个 GPG 签名的标签，然后使用 "),_("code",[t._v("-v")]),t._v(" 选项来验证。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E5%BF%AB%E7%85%A7%E5%9F%BA%E7%A1%80",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),_("OutboundLink")],1),t._v(" | "),_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E9%A1%B9%E7%9B%AE%E5%88%86%E4%BA%AB%E4%B8%8E%E6%9B%B4%E6%96%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"a3-5-附录-c-git-命令-项目分享与更新"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a3-5-附录-c-git-命令-项目分享与更新"}},[t._v("#")]),t._v(" A3.5 附录 C: Git 命令 - 项目分享与更新")]),t._v(" "),_("h3",{attrs:{id:"项目分享与更新"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#项目分享与更新"}},[t._v("#")]),t._v(" 项目分享与更新")]),t._v(" "),_("p",[t._v("在 Git 中没有多少访问网络的命令，几乎所以的命令都是在操作本地的数据库。 当你想要分享你的工作，或者从其他地方拉取变更时，这有几个处理远程仓库的命令。")]),t._v(" "),_("h4",{attrs:{id:"git-fetch"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-fetch"}},[t._v("#")]),t._v(" git fetch")]),t._v(" "),_("p",[_("code",[t._v("git fetch")]),t._v(" 命令与一个远程的仓库交互，并且将远程仓库中有但是在当前仓库的没有的所有信息拉取下来然后存储在你本地数据库中。")]),t._v(" "),_("p",[t._v("我们开始在 "),_("a",{attrs:{href:"ch00/_fetching_and_pulling"}},[t._v("从远程仓库中抓取与拉取")]),t._v(" 一节中介绍了此命令，然后我们在 "),_("a",{attrs:{href:"ch00/_remote_branches"}},[t._v("远程分支")]),t._v(" 中看到了几个使用示例。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_contributing_project"}},[t._v("向一个项目贡献")]),t._v(" 一节中有几个示例中也都有使用此命令。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_pr_refs"}},[t._v("合并请求引用")]),t._v(" 我们用它来抓取一个在默认空间之外指定的引用，在 "),_("a",{attrs:{href:"ch00/_bundling"}},[t._v("打包")]),t._v(" 中，我们了解了怎么从一个包中获取内容。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_refspec"}},[t._v("引用规范")]),t._v(" 章节中我们设置了高度自定义的 "),_("code",[t._v("refspec")]),t._v(" 以便 "),_("code",[t._v("git fetch")]),t._v(" 可以做一些跟默认不同的事情。")]),t._v(" "),_("h4",{attrs:{id:"git-pull"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-pull"}},[t._v("#")]),t._v(" git pull")]),t._v(" "),_("p",[_("code",[t._v("git pull")]),t._v(" 命令基本上就是 "),_("code",[t._v("git fetch")]),t._v(" 和 "),_("code",[t._v("git merge")]),t._v(" 命令的组合体，Git 从你指定的远程仓库中抓取内容，然后马上尝试将其合并进你所在的分支中。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_fetching_and_pulling"}},[t._v("从远程仓库中抓取与拉取")]),t._v(" 一节中快速介绍了此命令，然后在 "),_("a",{attrs:{href:"ch00/_inspecting_remote"}},[t._v("查看某个远程仓库")]),t._v(" 一节中了解了如果你运行此命令的话，什么将会合并。")]),t._v(" "),_("p",[t._v("我们也在 "),_("a",{attrs:{href:"ch00/_rebase_rebase"}},[t._v("用变基解决变基")]),t._v(" 一节中了解了如何使用此命令来来处理变基的难题。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_checking_out_conflicts"}},[t._v("检出冲突")]),t._v(" 一节中我们展示了使用此命令如何通过一个 URL 来一次性的拉取变更。")]),t._v(" "),_("p",[t._v("最后，我们在 "),_("a",{attrs:{href:"ch00/_signing_commits"}},[t._v("签署提交")]),t._v(" 一节中我们快速的介绍了你可以使用 "),_("code",[t._v("--verify-signatures")]),t._v(" 选项来验证你正在拉取下来的经过 GPG 签名的提交。")]),t._v(" "),_("h4",{attrs:{id:"git-push"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-push"}},[t._v("#")]),t._v(" git push")]),t._v(" "),_("p",[_("code",[t._v("git push")]),t._v(" 命令用来与另一个仓库通信，计算你本地数据库与远程仓库的差异，然后将差异推送到另一个仓库中。 它需要有另一个仓库的写权限，因此这通常是需要验证的。")]),t._v(" "),_("p",[t._v("我们开始在 "),_("a",{attrs:{href:"ch00/_pushing_remotes"}},[t._v("推送到远程仓库")]),t._v(" 一节中介绍了 "),_("code",[t._v("git push")]),t._v(" 命令。 在这一节中主要介绍了推送一个分支到远程仓库的基本用法。 在 "),_("a",{attrs:{href:"ch00/_pushing_branches"}},[t._v("推送")]),t._v(" 一节中，我们深入了解了如何推送指定分支，在 "),_("a",{attrs:{href:"ch00/_tracking_branches"}},[t._v("跟踪分支")]),t._v(" 一节中我们了解了如何设置一个默认的推送的跟踪分支。 在 "),_("a",{attrs:{href:"ch00/_delete_branches"}},[t._v("删除远程分支")]),t._v(" 一节中我们使用 "),_("code",[t._v("--delete")]),t._v(" 标志和 "),_("code",[t._v("git push")]),t._v(" 命令来在删除一个在服务器上的分支。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_contributing_project"}},[t._v("向一个项目贡献")]),t._v(" 一整节中，我们看到了几个使用 "),_("code",[t._v("git push")]),t._v(" 在多个远程仓库分享分支中的工作的示例。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_sharing_tags"}},[t._v("共享标签")]),t._v(" 一节中，我们知道了如何使用此命令加 "),_("code",[t._v("--tags")]),t._v(" 选项来分享你打的标签。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_publishing_submodules"}},[t._v("发布子模块改动")]),t._v(" 一节中，我们使用 "),_("code",[t._v("--recurse-submodules")]),t._v(" 选项来检查是否我们所有的子模块的工作都已经在推送子项目之前已经推送出去了，当使用子模块时这真的很有帮助。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_other_client_hooks"}},[t._v("其它客户端钩子")]),t._v(" 中我们简单的提到了 "),_("code",[t._v("pre-push")]),t._v(" 挂钩（hook），它是一个可以用来设置成在一个推送完成之前运行的脚本，以检查推送是否被允许。")]),t._v(" "),_("p",[t._v("最后，在 "),_("a",{attrs:{href:"ch00/_pushing_refspecs"}},[t._v("引用规范推送")]),t._v(" 一节中，我们知道了使用完整的 refspec 来推送，而不是通常使用的简写形式。 这对我们精确的指定要分享出去的工作很有帮助。")]),t._v(" "),_("h4",{attrs:{id:"git-remote"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-remote"}},[t._v("#")]),t._v(" git remote")]),t._v(" "),_("p",[_("code",[t._v("git remote")]),t._v(" 命令是一个是你远程仓库记录的管理工具。 它允许你将一个长的 URL 保存成一个简写的句柄，例如 "),_("code",[t._v("origin")]),t._v(" ，这样你就可以不用每次都输入他们了。 你可以有多个这样的句柄，"),_("code",[t._v("git remote")]),t._v(" 可以用来添加，修改，及删除它们。")]),t._v(" "),_("p",[t._v("此命令在 "),_("a",{attrs:{href:"ch00/_remote_repos"}},[t._v("远程仓库的使用")]),t._v(" 一节中做了详细的介绍，包括列举、添加、移除、重命名功能。")]),t._v(" "),_("p",[t._v("几乎在此书的后续章节中都有使用此命令，但是一般是以 "),_("code",[t._v("git remote add")]),t._v(" 这样的标准格式。")]),t._v(" "),_("h4",{attrs:{id:"git-archive"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-archive"}},[t._v("#")]),t._v(" git archive")]),t._v(" "),_("p",[_("code",[t._v("git archive")]),t._v(" 命令用来创建项目一个指定快照的归档文件。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_preparing_release"}},[t._v("准备一次发布")]),t._v(" 一节中，使用 "),_("code",[t._v("git archive")]),t._v(" 命令来创建一个项目的归档文件用于分享。")]),t._v(" "),_("h4",{attrs:{id:"git-submodule"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-submodule"}},[t._v("#")]),t._v(" git submodule")]),t._v(" "),_("p",[_("code",[t._v("git submodule")]),t._v(" 命令用来管理一个仓库的其他外部仓库。 它可以被用在库或者其他类型的共享资源上。 "),_("code",[t._v("submodule")]),t._v(" 命令有几个子命令, 如（"),_("code",[t._v("add")]),t._v("、"),_("code",[t._v("update")]),t._v("、"),_("code",[t._v("sync")]),t._v(" 等等）用来管理这些资源。")]),t._v(" "),_("p",[t._v("只在 "),_("a",{attrs:{href:"ch00/_git_submodules"}},[t._v("子模块")]),t._v(" 章节中提到和详细介绍了此命令。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E5%88%86%E6%94%AF%E4%B8%8E%E5%90%88%E5%B9%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),_("OutboundLink")],1),t._v(" | "),_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E6%A3%80%E6%9F%A5%E4%B8%8E%E6%AF%94%E8%BE%83",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"a3-6-附录-c-git-命令-检查与比较"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a3-6-附录-c-git-命令-检查与比较"}},[t._v("#")]),t._v(" A3.6 附录 C: Git 命令 - 检查与比较")]),t._v(" "),_("h3",{attrs:{id:"检查与比较"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#检查与比较"}},[t._v("#")]),t._v(" 检查与比较")]),t._v(" "),_("h4",{attrs:{id:"git-show"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-show"}},[t._v("#")]),t._v(" git show")]),t._v(" "),_("p",[_("code",[t._v("git show")]),t._v(" 命令可以以一种简单的人类可读的方式来显示一个 Git 对象。 你一般使用此命令来显示一个标签或一个提交的信息。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_annotated_tags"}},[t._v("附注标签")]),t._v(" 一节中使用此命令来显示带注解标签的信息。")]),t._v(" "),_("p",[t._v("然后，我们在 "),_("a",{attrs:{href:"ch00/_revision_selection"}},[t._v("选择修订版本")]),t._v(" 一节中，用了很多次来显示不同的版本选择将解析出来的提交。")]),t._v(" "),_("p",[t._v("我们使用 "),_("code",[t._v("git show")]),t._v(" 做的最有意思的事情是在 "),_("a",{attrs:{href:"ch00/_manual_remerge"}},[t._v("手动文件再合并")]),t._v(" 一节中用来在合并冲突的多个暂存区域中提取指定文件的内容。")]),t._v(" "),_("h4",{attrs:{id:"git-shortlog"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-shortlog"}},[t._v("#")]),t._v(" git shortlog")]),t._v(" "),_("p",[_("code",[t._v("git shortlog")]),t._v(" 是一个用来归纳 "),_("code",[t._v("git log")]),t._v(" 的输出的命令。 它可以接受很多与 "),_("code",[t._v("git log")]),t._v(" 相同的选项，但是此命令并不会列出所有的提交，而是展示一个根据作者分组的提交记录的概括性信息")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_the_shortlog"}},[t._v("制作提交简报")]),t._v(" 一节中展示了如何使用此命令来创建一个漂亮的 changelog 文件。")]),t._v(" "),_("h4",{attrs:{id:"git-describe"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-describe"}},[t._v("#")]),t._v(" git describe")]),t._v(" "),_("p",[_("code",[t._v("git describe")]),t._v(" 命令用来接受任何可以解析成一个提交的东西，然后生成一个人类可读的字符串且不可变。 这是一种获得一个提交的描述的方式，它跟一个提交的 SHA-1 值一样是无歧义，但是更具可读性。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_build_number"}},[t._v("生成一个构建号")]),t._v(" 及 "),_("a",{attrs:{href:"ch00/_preparing_release"}},[t._v("准备一次发布")]),t._v(" 章节中使用 "),_("code",[t._v("git describe")]),t._v(" 命令来获得一个字符串来命名我们发布的文件。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E9%A1%B9%E7%9B%AE%E5%88%86%E4%BA%AB%E4%B8%8E%E6%9B%B4%E6%96%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),_("OutboundLink")],1),t._v(" | "),_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E8%B0%83%E8%AF%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"a3-7-附录-c-git-命令-调试"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a3-7-附录-c-git-命令-调试"}},[t._v("#")]),t._v(" A3.7 附录 C: Git 命令 - 调试")]),t._v(" "),_("h3",{attrs:{id:"调试"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调试"}},[t._v("#")]),t._v(" 调试")]),t._v(" "),_("p",[t._v("Git 有一些命令可以用来帮你调试你代码中的问题。 包括找出是什么时候，是谁引入的变更。")]),t._v(" "),_("h4",{attrs:{id:"git-bisect"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-bisect"}},[t._v("#")]),t._v(" git bisect")]),t._v(" "),_("p",[_("code",[t._v("git bisect")]),t._v(" 工具是一个非常有用的调试工具，它通过自动进行一个二分查找来找到哪一个特定的提交是导致 bug 或者问题的第一个提交。")]),t._v(" "),_("p",[t._v("仅在 "),_("a",{attrs:{href:"ch00/_binary_search"}},[t._v("二分查找")]),t._v(" 一节中完整的介绍了此命令。")]),t._v(" "),_("h4",{attrs:{id:"git-blame"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-blame"}},[t._v("#")]),t._v(" git blame")]),t._v(" "),_("p",[_("code",[t._v("git blame")]),t._v(" 命令标注任何文件的行，指出文件的每一行的最后的变更的提交及谁是那一个提交的作者。 当你要找那个人去询问关于这块特殊代码的信息时这会很有用。")]),t._v(" "),_("p",[t._v("只有 "),_("a",{attrs:{href:"ch00/_file_annotation"}},[t._v("文件标注")]),t._v(" 一节中提到此命令。")]),t._v(" "),_("h4",{attrs:{id:"git-grep"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-grep"}},[t._v("#")]),t._v(" git grep")]),t._v(" "),_("p",[_("code",[t._v("git grep")]),t._v(" 命令可以帮助在源代码中，甚至是你项目的老版本中的任意文件中查找任何字符串或者正则表达式。")]),t._v(" "),_("p",[t._v("只有 "),_("a",{attrs:{href:"ch00/_git_grep"}},[t._v("Git Grep")]),t._v(" 的章节中提到此命令。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E6%A3%80%E6%9F%A5%E4%B8%8E%E6%AF%94%E8%BE%83",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),_("OutboundLink")],1),t._v(" | "),_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E8%A1%A5%E4%B8%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"a3-8-附录-c-git-命令-补丁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a3-8-附录-c-git-命令-补丁"}},[t._v("#")]),t._v(" A3.8 附录 C: Git 命令 - 补丁")]),t._v(" "),_("h3",{attrs:{id:"补丁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#补丁"}},[t._v("#")]),t._v(" 补丁")]),t._v(" "),_("p",[t._v("Git 中的一些命令是以引入的变更即提交这样的概念为中心的，这样一系列的提交，就是一系列的补丁。 这些命令以这样的方式来管理你的分支。")]),t._v(" "),_("h4",{attrs:{id:"git-cherry-pick"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick"}},[t._v("#")]),t._v(" git cherry-pick")]),t._v(" "),_("p",[_("code",[t._v("git cherry-pick")]),t._v(" 命令用来获得在单个提交中引入的变更，然后尝试将作为一个新的提交引入到你当前分支上。 从一个分支单独一个或者两个提交而不是合并整个分支的所有变更是非常有用的。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_rebase_cherry_pick"}},[t._v("变基与拣选工作流")]),t._v(" 一节中描述和演示了 "),_("code",[t._v("Cherry picking")])]),t._v(" "),_("h4",{attrs:{id:"git-rebase"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),_("p",[_("code",[t._v("git rebase")]),t._v(" 命令基本是是一个自动化的 "),_("code",[t._v("cherry-pick")]),t._v(" 命令。 它计算出一系列的提交，然后再以它们在其他地方以同样的顺序一个一个的 "),_("code",[t._v("cherry-picks")]),t._v(" 出它们。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_rebasing"}},[t._v("变基")]),t._v(" 一章中详细提到了此命令，包括与已经公开的分支的变基所涉及的协作问题。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_replace"}},[t._v("替换")]),t._v(" 中我们在一个分离历史记录到两个单独的仓库的示例中实践了此命令，同时使用了 "),_("code",[t._v("--onto")]),t._v(" 选项。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/ef_rerere"}},[t._v("Rerere")]),t._v(" 一节中，我们研究了在变基时遇到的合并冲突的问题。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_changing_multiple"}},[t._v("修改多个提交信息")]),t._v(" 一节中，我们也结合 "),_("code",[t._v("-i")]),t._v(" 选项将其用于交互式的脚本模式。")]),t._v(" "),_("h4",{attrs:{id:"git-revert"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-revert"}},[t._v("#")]),t._v(" git revert")]),t._v(" "),_("p",[_("code",[t._v("git revert")]),t._v(" 命令本质上就是一个逆向的 "),_("code",[t._v("git cherry-pick")]),t._v(" 操作。 它将你提交中的变更的以完全相反的方式的应用到一个新创建的提交中，本质上就是撤销或者倒转。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_reverse_commit"}},[t._v("还原提交")]),t._v(" 一节中使用此命令来撤销一个合并提交。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E8%B0%83%E8%AF%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),_("OutboundLink")],1),t._v(" | "),_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E9%82%AE%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"a3-9-附录-c-git-命令-邮件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a3-9-附录-c-git-命令-邮件"}},[t._v("#")]),t._v(" A3.9 附录 C: Git 命令 - 邮件")]),t._v(" "),_("h3",{attrs:{id:"邮件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#邮件"}},[t._v("#")]),t._v(" 邮件")]),t._v(" "),_("p",[t._v("很多 Git 项目，包括 Git 本身，基本是通过邮件列表来维护的。 从方便地生成邮件补丁到从一个邮箱中应用这些补丁,Git 都有工具来让这些操作变得简单。")]),t._v(" "),_("h4",{attrs:{id:"git-apply"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-apply"}},[t._v("#")]),t._v(" git apply")]),t._v(" "),_("p",[_("code",[t._v("git apply")]),t._v(" 命令应用一个通过 "),_("code",[t._v("git diff")]),t._v(" 或者甚至使用 GNU diff 命令创建的补丁。 它跟补丁命令做了差不多的工作，但还是有一些小小的差别。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_patches_from_email"}},[t._v("应用来自邮件的补丁")]),t._v(" 一节中演示了它的使用及什么环境下你可能会用到它。")]),t._v(" "),_("h4",{attrs:{id:"git-am"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-am"}},[t._v("#")]),t._v(" git am")]),t._v(" "),_("p",[_("code",[t._v("git am")]),t._v(" 命令用来应用来自邮箱的补丁。特别是那些被 mbox 格式化过的。 这对于通过邮件接受补丁并将他们轻松地应用到你的项目中很有用。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_git_am"}},[t._v("使用 "),_("code",[t._v("am")]),t._v(" 命令应用补丁")]),t._v(" 命令中提到了它的用法及工作流，包括使用 "),_("code",[t._v("--resolved")]),t._v("、"),_("code",[t._v("-i")]),t._v(" 及 "),_("code",[t._v("-3")]),t._v(" 选项。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_email_hooks"}},[t._v("电子邮件工作流钩子")]),t._v(" 也提到了几条 hooks，你可以用来辅助与 "),_("code",[t._v("git am")]),t._v(" 相关工作流。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_email_notifications"}},[t._v("邮件通知")]),t._v(" 一节中我们也将用此命令来应用 格式化的 GitHub 的推送请求的变更。")]),t._v(" "),_("h4",{attrs:{id:"git-format-patch"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-format-patch"}},[t._v("#")]),t._v(" git format-patch")]),t._v(" "),_("p",[_("code",[t._v("git format-patch")]),t._v(" 命令用来以 mbox 的格式来生成一系列的补丁以便你可以发送到一个邮件列表中。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_project_over_email"}},[t._v("通过邮件的公开项目")]),t._v(" 一节中研究了一个使用 "),_("code",[t._v("git format-patch")]),t._v(" 工具为一个项目做贡献的示例。")]),t._v(" "),_("h4",{attrs:{id:"git-imap-send"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-imap-send"}},[t._v("#")]),t._v(" git imap-send")]),t._v(" "),_("p",[_("code",[t._v("git imap-send")]),t._v(" 将一个由 "),_("code",[t._v("git format-patch")]),t._v(" 生成的邮箱上传至 IMAP 草稿文件夹。 我们在 "),_("a",{attrs:{href:"ch00/_project_over_email"}},[t._v("通过邮件的公开项目")]),t._v(" 一节中见过一个通过使用 "),_("code",[t._v("git imap-send")]),t._v(" 工具向一个项目发送补丁进行贡献的例子。")]),t._v(" "),_("h4",{attrs:{id:"git-send-email"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-send-email"}},[t._v("#")]),t._v(" git send-email")]),t._v(" "),_("p",[_("code",[t._v("git send-mail")]),t._v(" 命令用来通过邮件发送那些使用 "),_("code",[t._v("git format-patch")]),t._v(" 生成的补丁。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_project_over_email"}},[t._v("通过邮件的公开项目")]),t._v(" 一节中研究了一个使用 "),_("code",[t._v("git send-email")]),t._v(" 工具发送补丁来为一个项目做贡献的示例。")]),t._v(" "),_("h4",{attrs:{id:"git-request-pull"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-request-pull"}},[t._v("#")]),t._v(" git request-pull")]),t._v(" "),_("p",[_("code",[t._v("git request-pull")]),t._v(" 命令只是简单的用来生成一个可通过邮件发送给某个人的示例信息体。 如果你在公共服务器上有一个分支，并且想让别人知道如何集成这些变更，而不用通过邮件发送补丁，你就可以执行此命令的输出发送给这个你想拉取变更的人。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_public_project"}},[t._v("派生的公开项目")]),t._v(" 一节中演示了如何使用 "),_("code",[t._v("git request-pull")]),t._v(" 来生成一个推送消息。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E8%A1%A5%E4%B8%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),_("OutboundLink")],1),t._v(" | "),_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E5%A4%96%E9%83%A8%E7%B3%BB%E7%BB%9F",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"a3-10-附录-c-git-命令-外部系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a3-10-附录-c-git-命令-外部系统"}},[t._v("#")]),t._v(" A3.10 附录 C: Git 命令 - 外部系统")]),t._v(" "),_("h3",{attrs:{id:"外部系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#外部系统"}},[t._v("#")]),t._v(" 外部系统")]),t._v(" "),_("p",[t._v("Git 有一些可以与其他的版本控制系统集成的命令。")]),t._v(" "),_("h4",{attrs:{id:"git-svn"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-svn"}},[t._v("#")]),t._v(" git svn")]),t._v(" "),_("p",[_("code",[t._v("git svn")]),t._v(" 可以使 Git 作为一个客户端来与 Subversion 版本控制系统通信。 这意味着你可以使用 Git 来检出内容，或者提交到 Subversion 服务器。")]),t._v(" "),_("p",[_("a",{attrs:{href:"ch00/_git_svn"}},[t._v("Git 与 Subversion")]),t._v(" 一章深入讲解了此命令。")]),t._v(" "),_("h4",{attrs:{id:"git-fast-import"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-fast-import"}},[t._v("#")]),t._v(" git fast-import")]),t._v(" "),_("p",[t._v("对于其他版本控制系统或者从其他任何的格式导入，你可以使用 "),_("code",[t._v("git fast-import")]),t._v(" 快速地将其他格式映射到 Git 可以轻松记录的格式。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_custom_importer"}},[t._v("一个自定义的导入器")]),t._v(" 一节中深入讲解了此命令。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E9%82%AE%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),_("OutboundLink")],1),t._v(" | "),_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E7%AE%A1%E7%90%86",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"a3-11-附录-c-git-命令-管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a3-11-附录-c-git-命令-管理"}},[t._v("#")]),t._v(" A3.11 附录 C: Git 命令 - 管理")]),t._v(" "),_("h3",{attrs:{id:"管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#管理"}},[t._v("#")]),t._v(" 管理")]),t._v(" "),_("p",[t._v("如果你正在管理一个 Git 仓库，或者需要通过一个复杂的方法来修复某些东西，Git 提供了一些管理命令来帮助你。")]),t._v(" "),_("h4",{attrs:{id:"git-gc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-gc"}},[t._v("#")]),t._v(" git gc")]),t._v(" "),_("p",[_("code",[t._v("git gc")]),t._v(" 命令在你的仓库中执行 “garbage collection”，删除数据库中不需要的文件和将其他文件打包成一种更有效的格式。")]),t._v(" "),_("p",[t._v("此命令一般在背后为你工作，虽然你可以手动执行它-如果你想的话。 我们在"),_("a",{attrs:{href:"ch00/_git_gc"}},[t._v("维护")]),t._v(" 一节中研究此命令的几个示例。")]),t._v(" "),_("h4",{attrs:{id:"git-fsck"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-fsck"}},[t._v("#")]),t._v(" git fsck")]),t._v(" "),_("p",[_("code",[t._v("git fsck")]),t._v(" 命令用来检查内部数据库的问题或者不一致性。")]),t._v(" "),_("p",[t._v("我们只在 "),_("a",{attrs:{href:"ch00/_data_recovery"}},[t._v("数据恢复")]),t._v(" 这一节中快速使用了一次此命令来搜索所有的悬空对象（dangling object）。")]),t._v(" "),_("h4",{attrs:{id:"git-reflog"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-reflog"}},[t._v("#")]),t._v(" git reflog")]),t._v(" "),_("p",[_("code",[t._v("git reflog")]),t._v(" 命令分析你所有分支的头指针的日志来查找出你在重写历史上可能丢失的提交。")]),t._v(" "),_("p",[t._v("我们主要在 "),_("a",{attrs:{href:"ch00/_git_reflog"}},[t._v("引用日志")]),t._v(" 一节中提到了此命令，并在展示了一般用法，及如何使用 "),_("code",[t._v("git log -g")]),t._v(" 来通过 "),_("code",[t._v("git log")]),t._v(" 的输出来查看同样的信息。")]),t._v(" "),_("p",[t._v("我们同样在 "),_("a",{attrs:{href:"ch00/_data_recovery"}},[t._v("数据恢复")]),t._v(" 一节中研究了一个恢复丢失的分支的实例。")]),t._v(" "),_("h4",{attrs:{id:"git-filter-branch"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-filter-branch"}},[t._v("#")]),t._v(" git filter-branch")]),t._v(" "),_("p",[_("code",[t._v("git filter-branch")]),t._v(" 命令用来根据某些规则来重写大量的提交记录，例如从任何地方删除文件，或者通过过滤一个仓库中的一个单独的子目录以提取出一个项目。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_removing_file_every_commit"}},[t._v("从每一个提交中移除一个文件")]),t._v(" 一节中，我们解释了此命令，并探究了其他几个选项，例如 "),_("code",[t._v("--commit-filter")]),t._v("，"),_("code",[t._v("--subdirectory-filter")]),t._v(" 及 "),_("code",[t._v("--tree-filter")]),t._v(" 。")]),t._v(" "),_("p",[t._v("在 "),_("a",{attrs:{href:"ch00/_git_p4"}},[t._v("Git-p4")]),t._v(" 和 "),_("a",{attrs:{href:"ch00/_git_tfs"}},[t._v("TFS")]),t._v(" 的章节中我们使用它来修复已经导入的外部仓库。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E5%A4%96%E9%83%A8%E7%B3%BB%E7%BB%9F",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),_("OutboundLink")],1),t._v(" | "),_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E5%BA%95%E5%B1%82%E5%91%BD%E4%BB%A4",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"a3-12-附录-c-git-命令-底层命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a3-12-附录-c-git-命令-底层命令"}},[t._v("#")]),t._v(" A3.12 附录 C: Git 命令 - 底层命令")]),t._v(" "),_("h3",{attrs:{id:"底层命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#底层命令"}},[t._v("#")]),t._v(" 底层命令")]),t._v(" "),_("p",[t._v("在本书中我们也遇到了不少底层的命令。")]),t._v(" "),_("p",[t._v("我们遇到的第一个底层命令是在 "),_("a",{attrs:{href:"ch00/_pr_refs"}},[t._v("合并请求引用")]),t._v(" 中的 "),_("code",[t._v("ls-remote")]),t._v(" 命令。我们用它来查看服务端的原始引用。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/_manual_remerge"}},[t._v("手动文件再合并")]),t._v("、 "),_("a",{attrs:{href:"ch00/ef_rerere"}},[t._v("Rerere")]),t._v(" 及 "),_("a",{attrs:{href:"ch00/_the_index"}},[t._v("索引")]),t._v(" 章节中使用 "),_("code",[t._v("ls-files")]),t._v(" 来查看暂存区的更原始的样子。")]),t._v(" "),_("p",[t._v("我们同样在 "),_("a",{attrs:{href:"ch00/_branch_references"}},[t._v("分支引用")]),t._v(" 一节中提到了 "),_("code",[t._v("rev-parse")]),t._v(" 命令，它可以接受任意字符串，并将其转成一个对象的 SHA-1 值。")]),t._v(" "),_("p",[t._v("我们在 "),_("a",{attrs:{href:"ch00/ch10-git-internals"}},[t._v("Git 内部原理")]),t._v(" 一章中对大部分的底层命令进行了介绍，这差不多正是这一章的重点所在。 我们尽量避免了在本书的其他部分使用这些命令。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-C%3A-Git-%E5%91%BD%E4%BB%A4-%E7%AE%A1%E7%90%86",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),_("OutboundLink")],1),t._v(" | "),_("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),_("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=r.exports}}]);