(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{346:function(t,s,a){"use strict";a.r(s);var e=a(15),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_6-github"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-github"}},[t._v("#")]),t._v(" 6 GitHub")]),t._v(" "),s("h2",{attrs:{id:"_6-1-github-账户的创建和配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-github-账户的创建和配置"}},[t._v("#")]),t._v(" 6.1 GitHub - 账户的创建和配置")]),t._v(" "),s("p",[t._v("GitHub 是最大的 Git 版本库托管商，是成千上万的开发者和项目能够合作进行的中心。 大部分 Git 版本库都托管在 GitHub，很多开源项目使用 GitHub 实现 Git 托管、问题追踪、代码审查以及其它事情。 所以，尽管这不是 Git 开源项目的直接部分，但如果想要专业地使用 Git，你将不可避免地与 GitHub 打交道，所以这依然是一个绝好的学习机会。")]),t._v(" "),s("p",[t._v("本章将讨论如何高效地使用 GitHub。 我们将学习如何注册和管理账户、创建和使用 Git 版本库、向已有项目贡献的通用流程以及如何接受别人向你自己项目的贡献、GitHub 的编程接口和很多能够让这些操作更简单的小提示。")]),t._v(" "),s("p",[t._v("如果你对如何使用 GitHub 托管自己的项目，或者与已经托管在 GitHub 上面的项目进行合作没有兴趣，可以直接跳到 "),s("a",{attrs:{href:"#ch07-git-tools"}},[t._v("Git 工具")]),t._v(" 这一章。")]),t._v(" "),s("h3",{attrs:{id:"账户的创建和配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#账户的创建和配置"}},[t._v("#")]),t._v(" 账户的创建和配置")]),t._v(" "),s("p",[t._v("你所需要做的第一件事是创建一个免费账户。 直接访问 "),s("a",{attrs:{href:"https://github.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com"),s("OutboundLink")],1),t._v("，选择一个未被占用的用户名，提供一个电子邮件地址和密码，点击写着“Sign up for GitHub”的绿色大按钮即可。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/signup.png",alt:"GitHub 注册表单。"}})]),t._v(" "),s("p",[t._v("Figure 82. GitHub 注册表单。")]),t._v(" "),s("p",[t._v("你将看到的下一个页面是升级计划的价格页面，目前我们可以直接忽略这个页面。 GitHub 会给你提供的邮件地址发送一封验证邮件。 尽快到你的邮箱进行验证，这是非常重要的（我们会在后面了解到这点）。")]),t._v(" "),s("p",[t._v("Note")]),t._v(" "),s("p",[t._v("GitHub 为免费账户提供了几乎所有的功能，除了一些高级的特性。")]),t._v(" "),s("p",[t._v("GitHub 的付费计划包含一些高级工具和功能，不过本书将不涉及这部分内容。 关于可选方案及其对比的更多信息见 "),s("a",{attrs:{href:"https://github.com/pricing",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/pricing"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("点击屏幕左上角的章鱼猫（Octocat）图标，你将来到控制面板页面。 现在，你已经做好了使用 GitHub 的准备工作。")]),t._v(" "),s("h4",{attrs:{id:"ssh-访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssh-访问"}},[t._v("#")]),t._v(" SSH 访问")]),t._v(" "),s("p",[t._v("现在，你完全可以使用 "),s("code",[t._v("https://")]),t._v(" 协议，通过你刚刚创建的用户名和密码访问 Git 版本库。 但是，如果仅仅克隆公有项目，你甚至不需要注册——刚刚我们创建的账户是为了以后 fork 其它项目，以及推送我们自己的修改。")]),t._v(" "),s("p",[t._v("如果你习惯使用 SSH 远程，你需要配置一个公钥。 （如果你没有公钥，参考 "),s("a",{attrs:{href:"ch00/_generate_ssh_key"}},[t._v("生成 SSH 公钥")]),t._v("。） 使用窗口右上角的链接打开你的账户设置：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/account-settings.png",alt:"“Account settings”链接。"}})]),t._v(" "),s("p",[t._v("Figure 83. “Account settings”链接。")]),t._v(" "),s("p",[t._v("然后在左侧选择“SSH keys”部分。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/ssh-keys.png",alt:"“SSH keys”链接。"}})]),t._v(" "),s("p",[t._v("Figure 84. “SSH keys”链接。")]),t._v(" "),s("p",[t._v("在这个页面点击“"),s("code",[t._v("Add an SSH key")]),t._v("”按钮，给你的公钥起一个名字，将你的 "),s("code",[t._v("~/.ssh/id_rsa.pub")]),t._v(" （或者自定义的其它名字）公钥文件的内容粘贴到文本区，然后点击“Add key”。")]),t._v(" "),s("p",[t._v("Note")]),t._v(" "),s("p",[t._v("确保给你的 SSH 密钥起一个能够记得住的名字。 你可以为每一个密钥起名字（例如，“我的笔记本电脑”或者“工作账户”等），以便以后需要吊销密钥时能够方便地区分。")]),t._v(" "),s("h4",{attrs:{id:"头像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#头像"}},[t._v("#")]),t._v(" 头像")]),t._v(" "),s("p",[t._v("下一步，如果愿意的话，你可以将生成的头像换成你喜欢的图片。 首先，来到“Profile”标签页（在“SSH Keys”标签页上方），点击“Upload new picture”。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/your-profile.png",alt:"“Profile”链接。"}})]),t._v(" "),s("p",[t._v("Figure 85. “Profile”链接。")]),t._v(" "),s("p",[t._v("我们选择了本地磁盘上的一个 Git 图标，上传之后还可以对其进行裁剪。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/avatar-crop.png",alt:"裁剪已上传的头像。"}})]),t._v(" "),s("p",[t._v("Figure 86. 裁剪头像")]),t._v(" "),s("p",[t._v("现在，在网站任意有你参与的位置，人们都可以在你的用户名旁边看到你的头像。")]),t._v(" "),s("p",[t._v("如果你已经把头像上传到了流行的 Gravatar 托管服务（Wordpress 账户经常使用），默认就会使用这个头像，因此，你就不需要进行这一步骤了。")]),t._v(" "),s("h4",{attrs:{id:"邮件地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#邮件地址"}},[t._v("#")]),t._v(" 邮件地址")]),t._v(" "),s("p",[t._v("GitHub 使用用户邮件地址区分 Git 提交。 如果你在自己的提交中使用了多个邮件地址，希望 GitHub 可以正确地将它们连接起来， 你需要在管理页面的 Emails 部分添加你拥有的所有邮箱地址。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/email-settings.png",alt:"添加所有邮件地址。"}})]),t._v(" "),s("p",[t._v("Figure 87. 添加邮件地址")]),t._v(" "),s("p",[t._v("在 "),s("a",{attrs:{href:"ch00/_add_email_addresses"}},[t._v("添加邮件地址")]),t._v(" 中我们可以看到一些不同的状态。 顶部的地址是通过验证的，并且被设置为主要地址，这意味着该地址会接收到所有的通知和回复。 第二个地址是通过验证的，如果愿意的话，可以将其设置为主要地址。 最后一个地址是未通过验证的，这意味着你不能将其设置为主要地址。 当 GitHub 发现任意版本库中的任意提交信息包含了这些地址，它就会将其链接到你的账户。")]),t._v(" "),s("h4",{attrs:{id:"两步验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两步验证"}},[t._v("#")]),t._v(" 两步验证")]),t._v(" "),s("p",[t._v("最后，为了额外的安全性，你绝对应当设置两步验证，简写为 “2FA”。 两步验证是一种用于降低因你的密码被盗而带来的账户风险的验证机制，现在已经变得越来越流行。 开启两步验证，GitHub 会要求你用两种不同的验证方法，这样，即使其中一个被攻破，攻击者也不能访问你的账户。")]),t._v(" "),s("p",[t._v("你可以在 Account settings 页面的 Security 标签页中找到 Two-factor Authentication 设置。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/2fa-1.png",alt:"Security 标签页中的 2FA"}})]),t._v(" "),s("p",[t._v("Figure 88. Security 标签页中的 2FA")]),t._v(" "),s("p",[t._v("点击“Set up two-factor authentication”按钮，会跳转到设置页面。该页面允许你选择是要在登录时使用手机 app 生成辅助码（一种“基于时间的一次性密码”），还是要 GitHub 通过 SMS 发送辅助码。")]),t._v(" "),s("p",[t._v("选择合适的方法后，按照提示步骤设置 2FA，你的账户会变得更安全，每次登录 GitHub 时都需要提供除密码以外的辅助码。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E5%88%86%E5%B8%83%E5%BC%8F-Git-%E6%80%BB%E7%BB%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),s("OutboundLink")],1),t._v(" | "),s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/GitHub-%E5%AF%B9%E9%A1%B9%E7%9B%AE%E5%81%9A%E5%87%BA%E8%B4%A1%E7%8C%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_6-2-github-对项目做出贡献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-github-对项目做出贡献"}},[t._v("#")]),t._v(" 6.2 GitHub - 对项目做出贡献")]),t._v(" "),s("h3",{attrs:{id:"对项目做出贡献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对项目做出贡献"}},[t._v("#")]),t._v(" 对项目做出贡献")]),t._v(" "),s("p",[t._v("账户已经建立好了，现在我们来了解一些能帮助你对现有的项目做出贡献的知识。")]),t._v(" "),s("h4",{attrs:{id:"派生项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#派生项目"}},[t._v("#")]),t._v(" 派生项目")]),t._v(" "),s("p",[t._v("如果你想要参与某个项目，但是并没有推送权限，这时可以对这个项目进行“派生（Fork）”。 当你“派生”一个项目时，GitHub 会在你的空间中创建一个完全属于你的项目副本，且你对其具有推送权限。")]),t._v(" "),s("p",[t._v("Note")]),t._v(" "),s("p",[t._v("在以前，“fork”是一个贬义词，指的是某个人使开源项目向不同的方向发展，或者创建一个竞争项目，使得原项目的贡献者分裂。 在 GitHub，“fork”指的是你自己的空间中创建的项目副本，这个副本允许你以一种更开放的方式对其进行修改。")]),t._v(" "),s("p",[t._v("通过这种方式，项目的管理者不再需要忙着把用户添加到贡献者列表并给予他们推送权限。 人们可以派生这个项目，将修改推送到派生出的项目副本中，并通过创建拉取请求（Pull Request，简称 PR）来让他们的改动进入源版本库，下文我们会详细说明。 创建了拉取请求后，就会开启一个可供审查代码的板块，项目的拥有者和贡献者可以在此讨论相关修改，直到项目拥有者对其感到满意，并且认为这些修改可以被合并到版本库。")]),t._v(" "),s("p",[t._v("你可以通过点击项目页面右上角的“Fork”按钮，来派生这个项目。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/forkbutton.png",alt:"“Fork”按钮."}})]),t._v(" "),s("p",[t._v("Figure 89. “Fork”按钮")]),t._v(" "),s("p",[t._v("稍等片刻，你将被转到新项目页面，该项目包含可写的代码副本。")]),t._v(" "),s("h4",{attrs:{id:"github-流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#github-流程"}},[t._v("#")]),t._v(" GitHub 流程")]),t._v(" "),s("p",[t._v("GitHub 设计了一个以拉取请求为中心的特殊合作流程。 它基于我们在 "),s("a",{attrs:{href:"ch00/_topic_branch"}},[t._v("主题分支")]),t._v(" 的 "),s("a",{attrs:{href:"ch00/ch03-git-branching"}},[t._v("Git 分支")]),t._v(" 中提到的工作流程。 不管你是在一个紧密的团队中使用单独的版本库，或者使用许多的“Fork”来为一个由陌生人组成的国际企业或网络做出贡献，这种合作流程都能应付。")]),t._v(" "),s("p",[t._v("流程通常如下：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("派生一个项目")])]),t._v(" "),s("li",[s("p",[t._v("从 "),s("code",[t._v("master")]),t._v(" 分支创建一个新分支")])]),t._v(" "),s("li",[s("p",[t._v("提交一些修改来改进项目")])]),t._v(" "),s("li",[s("p",[t._v("将这个分支推送到 GitHub 上")])]),t._v(" "),s("li",[s("p",[t._v("创建一个拉取请求")])]),t._v(" "),s("li",[s("p",[t._v("讨论，根据实际情况继续修改")])]),t._v(" "),s("li",[s("p",[t._v("项目的拥有者合并或关闭你的拉取请求")])]),t._v(" "),s("li",[s("p",[t._v("将更新后的 "),s("code",[t._v("master")]),t._v(" 分支同步到你的派生中")])])]),t._v(" "),s("p",[t._v("这基本和 "),s("a",{attrs:{href:"ch00/_integration_manager"}},[t._v("集成管理者工作流")]),t._v(" 中的一体化管理流程差不多，但是团队可以使用 GitHub 提供的网页工具替代电子邮件来交流和审查修改。")]),t._v(" "),s("p",[t._v("现在我们来看一个使用这个流程的例子。")]),t._v(" "),s("h5",{attrs:{id:"创建拉取请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建拉取请求"}},[t._v("#")]),t._v(" 创建拉取请求")]),t._v(" "),s("p",[t._v("Tony 在找一些能在他的 Arduino 微控制器上运行的代码，他觉得 "),s("a",{attrs:{href:"https://github.com/schacon/blink",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/schacon/blink"),s("OutboundLink")],1),t._v(" 中的代码不错。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/blink-01-start.png",alt:"他想要做出贡献的项目"}})]),t._v(" "),s("p",[t._v("Figure 90. 他想要做出贡献的项目")]),t._v(" "),s("p",[t._v("但是有个问题，这个代码中的的闪烁频率太高，我们觉得 3 秒一次比 1 秒一次更好一些。 所以让我们来改进这个程序，并将修改后的代码提交给这个项目。")]),t._v(" "),s("p",[t._v("首先，单击“Fork”按钮来获得这个项目的副本。 我们使用的用户名是“tonychacon”，所以这个项目副本的访问地址是： "),s("code",[t._v("[https://github.com/tonychacon/blink](https://github.com/tonychacon/blink)")]),t._v(" 。 我们将它克隆到本地，创建一个分支，修改代码，最后再将改动推送到 GitHub。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git clone https://github.com/tonychacon/blink (1)\nCloning into 'blink'...\n\n$ cd blink\n$ git checkout -b slow-blink (2)\nSwitched to a new branch 'slow-blink'\n\n$ sed -i '' 's/1000/3000/' blink.ino (macOS) (3)\n# If you're on a Linux system, do this instead:\n# $ sed -i 's/1000/3000/' blink.ino (3)\n\n$ git diff --word-diff (4)\ndiff --git a/blink.ino b/blink.ino\nindex 15b9911..a6cc5a5 100644\n--- a/blink.ino\n+++ b/blink.ino\n@@ -18,7 +18,7 @@ void setup() {\n// the loop routine runs over and over again forever:\nvoid loop() {\n  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)\n  [-delay(1000);-]{+delay(3000);+}               // wait for a second\n  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW\n  [-delay(1000);-]{+delay(3000);+}               // wait for a second\n}\n\n$ git commit -a -m 'three seconds is better' (5)\n[slow-blink 5ca509d] three seconds is better\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\n$ git push origin slow-blink (6)\nUsername for 'https://github.com': tonychacon\nPassword for 'https://tonychacon@github.com':\nCounting objects: 5, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 340 bytes | 0 bytes/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nTo https://github.com/tonychacon/blink\n * [new branch]      slow-blink -> slow-blink\n")])])]),s("ol",[s("li",[s("p",[t._v("将派生出的副本克隆到本地")])]),t._v(" "),s("li",[s("p",[t._v("创建出名称有意义的分支")])]),t._v(" "),s("li",[s("p",[t._v("修改代码")])]),t._v(" "),s("li",[s("p",[t._v("检查改动")])]),t._v(" "),s("li",[s("p",[t._v("将改动提交到分支中")])]),t._v(" "),s("li",[s("p",[t._v("将新分支推送到 GitHub 的副本中")])])]),t._v(" "),s("p",[t._v("现在到 GitHub 上查看之前的项目副本，可以看到 GitHub 提示我们有新的分支， 并且显示了一个大大的绿色按钮让我们可以检查我们的改动，并给源项目创建拉取请求。")]),t._v(" "),s("p",[t._v("你也可以到“Branches”（分支）页面查看分支并创建拉取请求： "),s("code",[t._v("[https://github.com/<用户名>/<项目名>/branches](https://github.com/<%E7%94%A8%E6%88%B7%E5%90%8D>/<%E9%A1%B9%E7%9B%AE%E5%90%8D>/branches)")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/blink-02-pr.png",alt:"拉取请求按钮"}})]),t._v(" "),s("p",[t._v("Figure 91. 拉取请求按钮")]),t._v(" "),s("p",[t._v("如果我们点击那个绿色按钮，就会跳到一个新页面，在这里我们可以为拉取请求填写标题和描述。 花点时间编写一个清晰有用的描述是非常值得的，这能让原项目拥有者明白你做了什么， 为什么这个改动是正确的，以及接受此更改是否能够改进他的项目。")]),t._v(" "),s("p",[t._v("同时我们也能看到比主分支中所“领先”（ahead）的提交（在这个例子中只有一个）以及所有将会被合并的改动与之前代码的对比。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/blink-03-pull-request-open.png",alt:"拉取请求创建页面"}})]),t._v(" "),s("p",[t._v("Figure 92. 拉取请求创建页面")]),t._v(" "),s("p",[t._v("当你单击了“Create pull request”（创建拉取请求）的按钮后，这个项目的拥有者将会收到一条包含关改动和拉取请求页面的链接的提醒。")]),t._v(" "),s("p",[t._v("Note")]),t._v(" "),s("p",[t._v("虽然拉取请求通常是在贡献者准备好在公开项目中提交改动的时候提交，但是也常被用在仍处于开发阶段的内部项目中。 因为拉取请求在提交后 "),s("strong",[t._v("依然可以加入新的改动")]),t._v(" ，它也经常被用来建立团队合作的环境，而不只是在最终阶段使用。")]),t._v(" "),s("h5",{attrs:{id:"利用拉取请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#利用拉取请求"}},[t._v("#")]),t._v(" 利用拉取请求")]),t._v(" "),s("p",[t._v("现在，项目的拥有者可以看到你的改动并合并它，拒绝它或是发表评论。 在这里我们就当作他喜欢这个点子，但是他想要让灯熄灭的时间比点亮的时间稍长一些。")]),t._v(" "),s("p",[t._v("接下来可能会通过电子邮件进行互动，就像我们在 "),s("a",{attrs:{href:"ch00/ch05-distributed-git"}},[t._v("分布式 Git")]),t._v(" 中提到的工作流程那样，但是在 GitHub，这些都在线上完成。 项目的拥有者可以审查修改，只需要单击某一行，就可以对其发表评论。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/blink-04-pr-comment.png",alt:"拉取请求中对某一行的评论"}})]),t._v(" "),s("p",[t._v("Figure 93. 对拉取请求内的特定一行发表评论")]),t._v(" "),s("p",[t._v("当维护者发表评论后，提交拉取请求的人，以及所有正在关注（Watching）这个版本库的用户都会收到通知。 我们待会儿将会告诉你如何修改这项设置。现在，如果 Tony 有开启电子邮件提醒，他将会收到这样的一封邮件：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/blink-04-email.png",alt:"电子邮件提醒"}})]),t._v(" "),s("p",[t._v("Figure 94. 通过电子邮件发送的评论提醒")]),t._v(" "),s("p",[t._v("每个人都能在拉取请求中发表评论。在 "),s("a",{attrs:{href:"ch00/_pr_discussion"}},[t._v("拉取请求讨论页面")]),t._v(" 里我们可以看到项目拥有者对某行代码发表评论， 并在讨论区留下了一个普通评论。你可以看到被评论的代码也会在互动中显示出来。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/blink-05-general-comment.png",alt:"拉取请求讨论页面"}})]),t._v(" "),s("p",[t._v("Figure 95. 拉取请求讨论页面")]),t._v(" "),s("p",[t._v("现在贡献者可以看到如何做才能让他们的改动被接受。幸运的是，这也是一件轻松的事情。 如果你使用的是电子邮件进行交流，你需要再次对代码进行修改并重新提交至邮件列表， 这些修改会自动更新到拉取请求上。在 "),s("a",{attrs:{href:"ch00/_pr_final"}},[t._v("最终的拉取请求")]),t._v(" 中，你也可以在更新后的拉取请求中看到已折叠的旧代码评论， 因为它是在修改后的行上添加的评论。")]),t._v(" "),s("p",[t._v("对现有的拉取请求添加提交并不会触发提醒，因此 Tony 在推送了他的修正后， 还需要通过评论告知项目拥有者他完成了修改请求。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/blink-06-final.png",alt:"最终的拉取请求"}})]),t._v(" "),s("p",[t._v("Figure 96. 最终的拉取请求")]),t._v(" "),s("p",[t._v("如果你点开拉取请求的“Files Changed”（更改的文件）选项卡，你将会看到“整理过的”差异表 —— 也就是这个分支被合并到主分支之后将会产生的所有改动， 其实就是 "),s("code",[t._v("git diff master…​<分支名>")]),t._v(" 命令的执行结果。 你可以浏览 "),s("a",{attrs:{href:"ch00/_what_is_introduced"}},[t._v("确定引入了哪些东西")]),t._v(" 来了解更多关于差异表的知识。")]),t._v(" "),s("p",[t._v("你还会注意到，GitHub 会检查你的拉取请求是否能直接合并，如果可以，将会提供一个按钮来进行合并操作。 这个按钮只在你对版本库有写入权限并且可以进行简洁合并时才会显示。 你点击后 GitHub 将做出一个“非快进式”（non-fast-forward）合并， 即使这个合并 "),s("strong",[t._v("能够")]),t._v(" 快进式（fast-forward）合并，GitHub 依然会创建一个合并提交。")]),t._v(" "),s("p",[t._v("如果你需要，你还可以将分支拉取并在本地合并。 如果你将这个分支合并到 "),s("code",[t._v("master")]),t._v(" 分支中并推送到 GitHub，这个拉取请求会被自动关闭。")]),t._v(" "),s("p",[t._v("这就是大部分 GitHub 项目使用的工作流程。创建分支，基于分支创建拉取请求，进行讨论， 根据需要继续在分支上进行修改，最终关闭或合并拉取请求。")]),t._v(" "),s("p",[t._v("Note")]),t._v(" "),s("p",[t._v("不必总是 Fork")]),t._v(" "),s("p",[t._v("有件很重要的事情：你可以在同一个版本库中不同的分支提交拉取请求。 如果你正在和某人实现某个功能，而且你对项目有写权限，你可以推送分支到版本库， 并在 "),s("code",[t._v("master")]),t._v(" 分支提交一个拉取请求并在此进行代码审查和讨论的操作。不需要进行“Fork”。")]),t._v(" "),s("h4",{attrs:{id:"拉取请求的进阶用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拉取请求的进阶用法"}},[t._v("#")]),t._v(" 拉取请求的进阶用法")]),t._v(" "),s("p",[t._v("目前，我们学到了如何在 GitHub 平台对一个项目进行最基础的贡献。现在我们会教给你一些小技巧，让你可以更加有效率地使用拉取请求。")]),t._v(" "),s("h5",{attrs:{id:"将拉取请求制作成补丁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将拉取请求制作成补丁"}},[t._v("#")]),t._v(" 将拉取请求制作成补丁")]),t._v(" "),s("p",[t._v("有一件重要的事情：许多项目并不认为拉取请求可以作为补丁， 就和通过邮件列表工作的的项目对补丁贡献的看法一样。 大多数的 GitHub 项目将拉取请求的分支当作对改动的交流方式，并将变更集合起来统一进行合并。")]),t._v(" "),s("p",[t._v("这是个重要的差异，因为一般来说改动会在代码完成前提出，这和基于邮件列表的补丁贡献有着天差地别。 这使得维护者们可以更早的沟通，由社区中的力量能提出更好的方案。 当有人从拉取请求提交了一些代码，并且维护者和社区提出了一些意见，这个补丁系列并不需要从头来过， 只需要将改动重新提交并推送到分支中，这使得讨论的背景和过程可以齐头并进。")]),t._v(" "),s("p",[t._v("举个例子，你可以回去看看 "),s("a",{attrs:{href:"ch00/_pr_final"}},[t._v("最终的拉取请求")]),t._v("，你会注意到贡献者没有变基他的提交再提交一个新的拉取请求， 而是直接增加了新的提交并推送到已有的分支中。 如果你之后再回去查看这个拉取请求，你可以轻松地找到这个修改的原因。 点击网页上的“Merge”（合并）按钮后，会建立一个合并提交并指向这个拉取请求，你就可以很轻松的研究原来的讨论内容。")]),t._v(" "),s("h5",{attrs:{id:"与上游保持同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#与上游保持同步"}},[t._v("#")]),t._v(" 与上游保持同步")]),t._v(" "),s("p",[t._v("如果你的拉取请求由于过时或其他原因不能干净地合并，你需要进行修复才能让维护者对其进行合并。 GitHub 会对每个提交进行测试，让你知道你的拉取请求能否简洁的合并。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/pr-01-fail.png",alt:"拉取请求合并失败"}})]),t._v(" "),s("p",[t._v("Figure 97. 不能进行干净合并")]),t._v(" "),s("p",[t._v("如果你看到了像 "),s("a",{attrs:{href:"ch00/_pr_fail"}},[t._v("不能进行干净合并")]),t._v(" 中的画面，你就需要修复你的分支让这个提示变成绿色，这样维护者就不需要再做额外的工作。")]),t._v(" "),s("p",[t._v("你有两种方法来解决这个问题。你可以把你的分支变基到目标分支中去 （通常是你派生出的版本库中的 "),s("code",[t._v("master")]),t._v(" 分支），或者你可以合并目标分支到你的分支中去。")]),t._v(" "),s("p",[t._v("GitHub 上的大多数的开发者会使用后一种方法，基于我们在上一节提到的理由： 我们最看重的是历史记录和最后的合并，变基除了给你带来看上去简洁的历史记录， 只会让你的工作变得更加困难且更容易犯错。")]),t._v(" "),s("p",[t._v("如果你想要合并目标分支来让你的拉取请求变得可合并，你需要将源版本库添加为一个新的远端，并从远端抓取内容，合并主分支的内容到你的分支中去，修复所有的问题并最终重新推送回你提交拉取请求使用的分支。")]),t._v(" "),s("p",[t._v("在这个例子中，我们再次使用之前的“tonychacon”用户来进行示范，源作者提交了一个改动， 使得拉取请求和它产生了冲突。现在来看我们解决这个问题的步骤。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git remote add upstream https://github.com/schacon/blink (1)\n\n$ git fetch upstream (2)\nremote: Counting objects: 3, done.\nremote: Compressing objects: 100% (3/3), done.\nUnpacking objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nFrom https://github.com/schacon/blink\n * [new branch]      master     -> upstream/master\n\n$ git merge upstream/master (3)\nAuto-merging blink.ino\nCONFLICT (content): Merge conflict in blink.ino\nAutomatic merge failed; fix conflicts and then commit the result.\n\n$ vim blink.ino (4)\n$ git add blink.ino\n$ git commit\n[slow-blink 3c8d735] Merge remote-tracking branch 'upstream/master' \\\n    into slower-blink\n\n$ git push origin slow-blink (5)\nCounting objects: 6, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (6/6), 682 bytes | 0 bytes/s, done.\nTotal 6 (delta 2), reused 0 (delta 0)\nTo https://github.com/tonychacon/blink\n   ef4725c..3c8d735  slower-blink -> slow-blink\n")])])]),s("ol",[s("li",[s("p",[t._v("将源版本库添加为一个远端，并命名为“upstream”（上游）")])]),t._v(" "),s("li",[s("p",[t._v("从远端抓取最新的内容")])]),t._v(" "),s("li",[s("p",[t._v("将该仓库的主分支的内容合并到你的分支中")])]),t._v(" "),s("li",[s("p",[t._v("修复产生的冲突")])]),t._v(" "),s("li",[s("p",[t._v("再推送回同一个分支")])])]),t._v(" "),s("p",[t._v("你完成了上面的步骤后，拉取请求将会自动更新并重新检查是否能干净的合并。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/pr-02-merge-fix.png",alt:"修复了的拉取请求"}})]),t._v(" "),s("p",[t._v("Figure 98. 拉取请求现在可以干净地合并了")]),t._v(" "),s("p",[t._v("Git 的伟大之处就是你可以一直重复以上操作。如果你有一个运行了十分久的项目， 你可以轻松地合并目标分支且只需要处理最近的一次冲突，这使得管理流程更加容易。")]),t._v(" "),s("p",[t._v("如果你一定想对分支做变基并进行清理，你可以这么做，但是强烈建议你不要强行地提交到已经提交了拉取请求的分支。 如果其他人拉取了这个分支并进行一些修改，你将会遇到 "),s("a",{attrs:{href:"ch00/_rebase_peril"}},[t._v("变基的风险")]),t._v(" 中提到的问题。 相对的，将变基后的分支推送到 GitHub 上的一个新分支中，并且创建一个全新的拉取请求引用旧的拉取请求，然后关闭旧的拉取请求。")]),t._v(" "),s("h5",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("p",[t._v("你的下个问题可能是“我该如何引用旧的拉取请求？”。 有许多方法可以让你在 GitHub 上的几乎任何地方引用其他东西。")]),t._v(" "),s("p",[t._v("先从如何对拉取请求或议题（Issue）进行相互引用开始。所有的拉取请求和议题在项目中都会有一个独一无二的编号。 举个例子，你无法同时拥有 3 号拉取请求和 3 号议题。如果你想要引用任何一个拉取请求或议题， 你只需要在提交或描述中输入 "),s("code",[t._v("<编号>")]),t._v(" 即可。 你也可以指定引用其他版本库的议题或拉取请求，如果你想要引用其他人对该版本库的“Fork”中的议题或拉取请求， 输入 "),s("code",[t._v("用户名<编号>")]),t._v(" ，如果在不同的版本库中，输入 "),s("code",[t._v("用户名/版本库名#<编号>")]),t._v(" 。")]),t._v(" "),s("p",[t._v("我们来看一个例子。假设我们对上个例子中的分支进行了变基，并为此创建一个新的拉取请求， 现在我们希望能在新的拉取请求中引用旧的拉取请求。 我们同时希望引用一个派生出的项目中的议题和一个完全不同的项目中的议题， 就可以像 "),s("a",{attrs:{href:"ch00/_pr_references"}},[t._v("在拉取请求中的交叉引用")]),t._v(" 这样填写描述。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/mentions-01-syntax.png",alt:"拉取请求中的引用"}})]),t._v(" "),s("p",[t._v("Figure 99. 在拉取请求中的交叉引用")]),t._v(" "),s("p",[t._v("当我们提交了这个拉取请求，我们将会看到以上内容被渲染成这样："),s("a",{attrs:{href:"ch00/_pr_references_render"}},[t._v("在拉取请求中渲染后的交叉引用")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/mentions-02-render.png",alt:"渲染后的拉取请求中的引用"}})]),t._v(" "),s("p",[t._v("Figure 100. 在拉取请求中渲染后的交叉引用")]),t._v(" "),s("p",[t._v("你会注意到完整的 GitHub 地址被简化了，只留下了必要的信息。")]),t._v(" "),s("p",[t._v("如果 Tony 回去关闭了源拉取请求，我们可以看到一个被引用的提示， GitHub 会自动的反向追踪事件并显示在拉取请求的时间轴上。 这意味着任何查看这个拉取请求的人可以轻松地访问新的拉取请求。 这个链接就像 "),s("a",{attrs:{href:"ch00/_pr_closed"}},[t._v("在拉取请求中渲染后的交叉引用")]),t._v(" 中展示的那样。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/mentions-03-closed.png",alt:"拉取请求关闭"}})]),t._v(" "),s("p",[t._v("Figure 101. 在拉取请求中渲染后的交叉引用")]),t._v(" "),s("p",[t._v("除了议题编号外，你还可以通过使用提交的 SHA-1 来引用提交。 你必须完整的写出 40 位长的 SHA-1，GitHub 会在评论中自动地产生指向这个提交的链接。 同样的，你可以像引用议题一样对派生的项目中的提交或者其他项目中的提交进行引用。")]),t._v(" "),s("h4",{attrs:{id:"github-风格的-markdown"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#github-风格的-markdown"}},[t._v("#")]),t._v(" GitHub 风格的 Markdown")]),t._v(" "),s("p",[t._v("对于在 GitHub 中绝大多数文本框中能够做到的事，引用其他议题只是个开始。 在议题和拉取请求的描述，评论和代码评论还有其他地方，都可以使用“GitHub 风格的 Markdown”。 Markdown 可以让你输入纯文本，但是渲染出丰富的内容。")]),t._v(" "),s("p",[t._v("查看 "),s("a",{attrs:{href:"ch00/_example_markdown"}},[t._v("一个 Markdown 的示例和渲染效果")]),t._v(" 里的示例来了解如何书写评论或文本，并通过 Markdown 进行渲染。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/markdown-01-example.png",alt:"Markdown 示例"}})]),t._v(" "),s("p",[t._v("Figure 102. 一个 Markdown 的示例和渲染效果")]),t._v(" "),s("h5",{attrs:{id:"github-风格的-markdown-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#github-风格的-markdown-2"}},[t._v("#")]),t._v(" GitHub 风格的 Markdown")]),t._v(" "),s("p",[t._v("GitHub 风格的 Markdown 增加了一些基础的 Markdown 中做不到的东西。 它在创建拉取请求和议题中的评论和描述时十分有用。")]),t._v(" "),s("h6",{attrs:{id:"任务列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务列表"}},[t._v("#")]),t._v(" 任务列表")]),t._v(" "),s("p",[t._v("第一个 GitHub 专属的 Markdown 功能，特别是用在拉取请求中，就是任务列表。 一个任务列表可以展示出一系列你想要完成的事情，并带有复选框。 把它们放在议题或拉取请求中时，通常可以展示你想要完成的事情。")]),t._v(" "),s("p",[t._v("你可以这样创建一个任务列表：")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("- [X] 编写代码\n- [ ] 编写所有测试程序\n- [ ] 为代码编写文档\n")])])]),s("p",[t._v("如果我们将这个列表加入拉取请求或议题的描述中，它将会被渲染 "),s("a",{attrs:{href:"ch00/_eg_task_lists"}},[t._v("Markdown 评论中渲染后的任务列表")]),t._v(" 这样。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/markdown-02-tasks.png",alt:"任务列表示例"}})]),t._v(" "),s("p",[t._v("Figure 103. Markdown 评论中渲染后的任务列表")]),t._v(" "),s("p",[t._v("在拉取请求中，任务列表经常被用来在合并之前展示这个分支将要完成的事情。 最酷的地方就是，你只需要点击复选框，就能更新评论 —— 你不需要直接修改 Markdown。")]),t._v(" "),s("p",[t._v("不仅如此，GitHub 还会将你在议题和拉取请求中的任务列表整理起来集中展示。 举个例子，如果你在一个拉取请求中有任务清单，你将会在所有拉取请求的总览页面上看到它的进度。 这使得人们可以把一个拉取请求分解成不同的小任务，同时便于其他人了解分支的进度。 你可以在 "),s("a",{attrs:{href:"ch00/_task_list_progress"}},[t._v("在拉取请求列表中的任务列表总结")]),t._v(" 看到一个例子。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/markdown-03-task-summary.png",alt:"任务列表示例"}})]),t._v(" "),s("p",[t._v("Figure 104. 在拉取请求列表中的任务列表总结")]),t._v(" "),s("p",[t._v("当你在实现一个任务的早期就提交拉取请求，并使用任务清单追踪你的进度，这个功能会十分的有用。")]),t._v(" "),s("h5",{attrs:{id:"代码片段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码片段"}},[t._v("#")]),t._v(" 代码片段")]),t._v(" "),s("p",[t._v("你也可以在评论中添加代码片段。这在你想要展示尚未提交到分支中的代码时会十分有用。 它也经常被用在展示无法正常工作的代码或这个拉取请求需要的代码。")]),t._v(" "),s("p",[t._v("你需要用“反引号”将需要添加的代码片段包起来。")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('```java\nfor(int i=0 ; i &lt; 5 ; i++)\n{\n   System.out.println("i is : " + i);\n}\n```\n')])])]),s("p",[t._v("如果加入语言的名称，就像我们这里加入的“java”一样，GitHub 会自动尝试对摘录的片段进行语法高亮。 在下面的例子中，它最终会渲染成这个样子： "),s("a",{attrs:{href:"ch00/_md_code"}},[t._v("渲染后的代码片段示例")]),t._v(" 。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/markdown-04-fenced-code.png",alt:"渲染后的代码片段"}})]),t._v(" "),s("p",[t._v("Figure 105. 渲染后的代码片段示例")]),t._v(" "),s("h5",{attrs:{id:"引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[t._v("#")]),t._v(" 引用")]),t._v(" "),s("p",[t._v("如果你在回复一个很长的评论之中的一小段，你只需要复制你需要的片段，并在每行前添加 "),s("code",[t._v(">")]),t._v(" 符号即可。 事实上，因为这个功能会被经常用到，它也有一个快捷键。 只要你把你要回应的文字选中，并按下 "),s("code",[t._v("r")]),t._v(" 键，选中的问题会自动引用并填入评论框。")]),t._v(" "),s("p",[t._v("引用的部分就像这样:")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("> Whether 'tis Nobler in the mind to suffer\n> The Slings and Arrows of outrageous Fortune,\n\nHow big are these slings and in particular, these arrows?\n")])])]),s("p",[t._v("经过渲染后，就会变成这样： "),s("a",{attrs:{href:"ch00/_md_quote"}},[t._v("渲染后的引用示例")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/markdown-05-quote.png",alt:"渲染后的引用"}})]),t._v(" "),s("p",[t._v("Figure 106. 渲染后的引用示例")]),t._v(" "),s("h5",{attrs:{id:"表情符号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表情符号"}},[t._v("#")]),t._v(" 表情符号")]),t._v(" "),s("p",[t._v("最后，我们可以在评论中使用表情符号。这经常出现在 GitHub 的议题和拉取请求的评论中。 GitHub 上甚至有表情助手。如果你在输入评论时以 "),s("code",[t._v(":")]),t._v(" 开头，自动完成器会帮助你找到你需要的表情。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/markdown-06-emoji-complete.png",alt:"表情符号自动完成器"}})]),t._v(" "),s("p",[t._v("Figure 107. 表情符号自动完成器")]),t._v(" "),s("p",[t._v("你也可以在评论的任何地方使用 "),s("code",[t._v(":<表情名称>:")]),t._v(" 来添加表情符号。 举个例子，你可以输入以下文字：")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("I :eyes: that :bug: and I :cold_sweat:.\n\n:trophy: for :microscope: it.\n\n:+1: and :sparkles: on this :ship:, it's :fire::poop:!\n\n:clap::tada::panda_face:\n")])])]),s("p",[t._v("渲染之后，就会变成这样： "),s("a",{attrs:{href:"ch00/_md_emoji"}},[t._v("使用了大量表情符号的评论")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/markdown-07-emoji.png",alt:"Emoji"}})]),t._v(" "),s("p",[t._v("Figure 108. 使用了大量表情符号的评论")]),t._v(" "),s("p",[t._v("虽然这个功能并不是非常实用，但是它在这种不方便表达感情的媒体里，加入了趣味的元素。")]),t._v(" "),s("p",[t._v("Note")]),t._v(" "),s("p",[t._v("事实上现在已经有大量的在线服务可以使用表情符号，这里有个列表可以让你快速的找到能表达你的情绪的表情符号：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.webfx.com/tools/emoji-cheat-sheet/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.webfx.com/tools/emoji-cheat-sheet/"),s("OutboundLink")],1)]),t._v(" "),s("h5",{attrs:{id:"图片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图片"}},[t._v("#")]),t._v(" 图片")]),t._v(" "),s("p",[t._v("从技术层面来说，这并不是 GitHub 风格 Markdown 的功能，但是也很有用。 如果不想使用 Markdown 语法来插入图片，GitHub 允许你通过拖拽图片到文本区来插入图片。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/markdown-08-drag-drop.png",alt:"拖拽插入图片"}})]),t._v(" "),s("p",[t._v("Figure 109. 通过拖拽的方式自动插入图片")]),t._v(" "),s("p",[t._v("如果你回去查看 "),s("a",{attrs:{href:"ch00/_md_drag"}},[t._v("通过拖拽的方式自动插入图片")]),t._v(" ，你会发现文本区上有个“Parsed as Markdown”的提示。 点击它你可以了解所有能在 GitHub 上使用的 Markdown 功能。")]),t._v(" "),s("h4",{attrs:{id:"让你的-github-公共仓库保持更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#让你的-github-公共仓库保持更新"}},[t._v("#")]),t._v(" 让你的 GitHub 公共仓库保持更新")]),t._v(" "),s("p",[t._v("当你派生了一个 GitHub 仓库之后，你的仓库（即你的“派生”）会独立于原仓库而独立。 特别地，当原仓库有新的提交时，GitHub 会通知你：")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("This branch is 5 commits behind progit:master.\n（本分支落后 progit:master 5 个提交。）\n")])])]),s("p",[t._v("但你的 GitHub 仓库不会被 GitHub 自动更新，这件事必须由你自己来做。还好，这事儿很简单。")]),t._v(" "),s("p",[t._v("第一种方法无需配置。例如，若你从 "),s("code",[t._v("[https://github.com/progit/progit2.git](https://github.com/progit/progit2.git)")]),t._v(" 派生了项目， 你可以像这样更新你的 "),s("code",[t._v("master")]),t._v(" 分支：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git checkout master (1)\n$ git pull https://github.com/progit/progit2.git (2)\n$ git push origin master (3)\n")])])]),s("ol",[s("li",[s("p",[t._v("如果在另一个分支上，就切换到 "),s("code",[t._v("master")])])]),t._v(" "),s("li",[s("p",[t._v("从 "),s("code",[t._v("[https://github.com/progit/progit2.git](https://github.com/progit/progit2.git)")]),t._v(" 抓取更改后合并到 "),s("code",[t._v("master")])])]),t._v(" "),s("li",[s("p",[t._v("将 "),s("code",[t._v("master")]),t._v(" 分支推送到 "),s("code",[t._v("origin")])])])]),t._v(" "),s("p",[t._v("这虽然可行，但每次都要输入从哪个 URL 抓取有点麻烦。你可以稍微设置一下来自动完成它：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git remote add progit https://github.com/progit/progit2.git (1)\n$ git branch --set-upstream-to=progit/master master (2)\n$ git config --local remote.pushDefault origin (3)\n")])])]),s("ol",[s("li",[s("p",[t._v("添加源仓库并取一个名字，这里叫它 "),s("code",[t._v("progit")])])]),t._v(" "),s("li",[s("p",[t._v("将 "),s("code",[t._v("master")]),t._v(" 分支设置为从 "),s("code",[t._v("progit")]),t._v(" 远端抓取")])]),t._v(" "),s("li",[s("p",[t._v("将默认推送仓库设置为 "),s("code",[t._v("origin")])])])]),t._v(" "),s("p",[t._v("搞定之后，工作流程为更加简单：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git checkout master (1)\n$ git pull (2)\n$ git push (3)\n")])])]),s("ol",[s("li",[s("p",[t._v("如果在另一个分支上，就切换到 "),s("code",[t._v("master")])])]),t._v(" "),s("li",[s("p",[t._v("从 "),s("code",[t._v("progit")]),t._v(" 抓取更改后合并到 "),s("code",[t._v("master")])])]),t._v(" "),s("li",[s("p",[t._v("将 "),s("code",[t._v("master")]),t._v(" 分支推送到 "),s("code",[t._v("origin")])])])]),t._v(" "),s("p",[t._v("这种方法可能很有用，但也不是没有缺点。如果你向 "),s("code",[t._v("master")]),t._v(" 提交，再从 "),s("code",[t._v("progit")]),t._v(" 中拉取，然后推送到 "),s("code",[t._v("origin")]),t._v("，Git 会很乐意安静地为您完成这项工作，但不会警告你——所有这些操作在以上设置下都是有效的。 所以你必须注意永远不要直接提交到 "),s("code",[t._v("master")]),t._v("，因为该分支实际上属于上游仓库。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/GitHub-%E8%B4%A6%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),s("OutboundLink")],1),t._v(" | "),s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/GitHub-%E7%BB%B4%E6%8A%A4%E9%A1%B9%E7%9B%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_6-3-github-维护项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-github-维护项目"}},[t._v("#")]),t._v(" 6.3 GitHub - 维护项目")]),t._v(" "),s("h3",{attrs:{id:"维护项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#维护项目"}},[t._v("#")]),t._v(" 维护项目")]),t._v(" "),s("p",[t._v("现在我们可以很方便地向一个项目贡献内容，来看一下另一个方面的内容：创建、维护和管理你自己的项目。")]),t._v(" "),s("h4",{attrs:{id:"创建新的版本库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建新的版本库"}},[t._v("#")]),t._v(" 创建新的版本库")]),t._v(" "),s("p",[t._v("让我们创建一个版本库来分享我们的项目。 通过点击面板右侧的“New repository”按钮，或者顶部工具条你用户名旁边的 "),s("code",[t._v("+")]),t._v(" 按钮来开始我们的旅程。 参见 "),s("a",{attrs:{href:"ch00/_new_repo_dropdown"}},[t._v("这是 “New repository” 下拉列表.")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/newrepo.png",alt:"“Your repositories” 区域."}})]),t._v(" "),s("p",[t._v("Figure 110. 这是 “Your repositories” 区域.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/new-repo.png",alt:"“new repository” 下拉列表."}})]),t._v(" "),s("p",[t._v("Figure 111. 这是 “New repository” 下拉列表.")]),t._v(" "),s("p",[t._v("这会带你到 “new repository” 表单:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/newrepoform.png",alt:"“new repository” 表单。"}})]),t._v(" "),s("p",[t._v("Figure 112. 这是 “new repository” 表单.")]),t._v(" "),s("p",[t._v("这里除了一个你必须要填的项目名，其他字段都是可选的。 现在只需要点击 “Create Repository” 按钮，Duang!!! – 你就在 GitHub 上拥有了一个以 "),s("code",[t._v("/")]),t._v(" 命名的新仓库了。")]),t._v(" "),s("p",[t._v("因为目前暂无代码，GitHub 会显示有关创建新版本库或者关联到一个已有的 Git 版本库的一些说明。 我们不会在这里详细说明此项，如果你需要复习，去看 "),s("a",{attrs:{href:"ch00/ch02-git-basics-chapter"}},[t._v("Git 基础")]),t._v("。")]),t._v(" "),s("p",[t._v("现在你的项目就托管在 GitHub 上了，你可以把 URL 给任何你想分享的人。 GitHub 上的项目可通过 HTTP 或 SSH 访问，HTTPS 为 "),s("code",[t._v("[https://github.com//](https://github.com/<user>/<project_name>);")]),t._v(" ， SSH 为 "),s("code",[t._v("git@github.com:/")]),t._v(" 。 Git 可以通过以上两种 URL 进行抓取和推送，但是用户的访问权限又因连接时使用的证书不同而异。")]),t._v(" "),s("p",[t._v("Note")]),t._v(" "),s("p",[t._v("通常对于公开项目可以优先分享基于 HTTPS 的 URL，因为用户克隆项目不需要有一个 GitHub 帐号。 如果你分享 SSH URL，用户必须有一个帐号并且上传 SSH 密钥才能访问你的项目。 HTTPS URL 与你贴到浏览器里查看项目用的地址是一样的。")]),t._v(" "),s("h4",{attrs:{id:"添加合作者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加合作者"}},[t._v("#")]),t._v(" 添加合作者")]),t._v(" "),s("p",[t._v("如果你想与他人合作，并想给他们提交的权限，你需要把他们添加为 “Collaborators”。 如果 Ben，Jeff，Louise 都在 GitHub 上注册了，你想给他们推送的权限，你可以将他们添加到你的项目。 这样做会给他们 “推送” 权限，就是说他们对项目和 Git 版本库都有读写的权限。")]),t._v(" "),s("p",[t._v("点击边栏底部的 “Settings” 链接。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/reposettingslink.png",alt:"版本库设置链接."}})]),t._v(" "),s("p",[t._v("Figure 113. 版本库设置链接.")]),t._v(" "),s("p",[t._v("然后从左侧菜单中选择 “Collaborators” 。 然后，在输入框中填写用户名，点击 “Add collaborator.” 如果你想授权给多个人，你可以多次重复这个步骤。 如果你想收回权限，点击他们同一行右侧的 “X”")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/collaborators.png",alt:"版本库合作者."}})]),t._v(" "),s("p",[t._v("Figure 114. 版本库合作者.")]),t._v(" "),s("h4",{attrs:{id:"管理合并请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#管理合并请求"}},[t._v("#")]),t._v(" 管理合并请求")]),t._v(" "),s("p",[t._v("现在你有一个包含一些代码的项目，可能还有几个有推送权限的合作者，下面来看当你收到合并请求时该做什么。")]),t._v(" "),s("p",[t._v("合并请求可以来自仓库副本的一个分支，或者同一仓库的另一个分支。 唯一的区别是 fork 过来的通常是和你不能互相推送的人，而内部的推送通常都可以互相访问。")]),t._v(" "),s("p",[t._v("作为例子，假设你是 “tonychacon” ，你创建了一个名为 “fade” 的 Arduino 项目.")]),t._v(" "),s("h5",{attrs:{id:"邮件通知"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#邮件通知"}},[t._v("#")]),t._v(" 邮件通知")]),t._v(" "),s("p",[t._v("有人来修改了你的代码，给你发了一个合并请求。 你会收一封关于合并请求的提醒邮件，它看起来像 "),s("a",{attrs:{href:"ch00/_email_pr"}},[t._v("新的合并请求的邮件通知.")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/maint-01-email.png",alt:"合并请求的邮件通知"}})]),t._v(" "),s("p",[t._v("Figure 115. 新的合并请求的邮件通知.")]),t._v(" "),s("p",[t._v("关于这个邮件有几个要注意的地方。 它会给你一个小的变动统计结果 — 一个包含合并请求中改变的文件和改变了多少的列表。 它还给你一个 GitHub 上进行合并请求操作的链接。 还有几个可以在命令行使用的 URL。")]),t._v(" "),s("p",[t._v("如果你注意到 "),s("code",[t._v("git pull patch-1")]),t._v(" 这一行，这是一种合并远程分支的简单方式，无需必须添加一个远程分支。 我们很快会在 "),s("a",{attrs:{href:"ch00/_checking_out_remotes"}},[t._v("检出远程分支")]),t._v(" 讲到它。 如果你愿意，你可以创建并切换到一个主题分支，然后运行这个命令把合并请求合并进来。")]),t._v(" "),s("p",[t._v("还有一些有趣的 URL，像 "),s("code",[t._v(".diff")]),t._v(" 和 "),s("code",[t._v(".patch")]),t._v(" ，就像你猜的那样，它们提供 diff 和 patch 的标准版本。 你可以技术性地用下面的方法合并“合并请求”：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ curl https://github.com/tonychacon/fade/pull/1.patch | git am\n")])])]),s("h5",{attrs:{id:"在合并请求上进行合作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在合并请求上进行合作"}},[t._v("#")]),t._v(" 在合并请求上进行合作")]),t._v(" "),s("p",[t._v("就像我们在 "),s("a",{attrs:{href:"ch00/_github_flow"}},[t._v("GitHub 流程")]),t._v(" 中说过的，现在你可以跟开启合并请求的人进行会话。 你既可以对某些代码发表评论，也可以对整个提交或整个合并请求发表评论， 在任何地方都可以用 GitHub 风格的 Markdown。")]),t._v(" "),s("p",[t._v("每次有人在合并请求上发表了评论，你都会收到邮件，通知你哪里发生了改变。邮件里面包含一个链接，指向改变的位置，你可以直接在邮件中回复，相当于在合并请求上发表评论。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/maint-03-email-resp.png",alt:"邮件回复"}})]),t._v(" "),s("p",[t._v("Figure 116. 回复邮件会包含在帖子（thread）中。")]),t._v(" "),s("p",[t._v("一旦代码符合了你的要求，你想把它合并进来，你可以把代码拉取下来在本地进行合并，也可以用我们之前提到过的 "),s("code",[t._v("git pull")]),t._v(" 语法，或者把 fork 添加为一个 remote，然后进行抓取和合并。")]),t._v(" "),s("p",[t._v("对于很琐碎的合并，你也可以用 GitHub 网站上的 “Merge” 按钮。 它会做一个 “non-fast-forward” 合并，即使可以快进（fast-forward）合并也会产生一个合并提交记录。 就是说无论如何，只要你点击 merge 按钮，就会产生一个合并提交记录。 你可以在 "),s("a",{attrs:{href:"ch00/_merge_button"}},[t._v("合并按钮和手工合并一个合并请求的指令.")]),t._v(" 看到，如果你点击提示链接，GitHub 会给你所有的这些信息。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/maint-02-merge.png",alt:"合并按钮"}})]),t._v(" "),s("p",[t._v("Figure 117. 合并按钮和手工合并一个合并请求的指令.")]),t._v(" "),s("p",[t._v("如果你决定不合并它，你可以把合并请求关掉，开启合并请求的人会收到通知。")]),t._v(" "),s("h5",{attrs:{id:"合并请求引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并请求引用"}},[t._v("#")]),t._v(" 合并请求引用")]),t._v(" "),s("p",[t._v("如果你正在处理 "),s("strong",[t._v("许多")]),t._v(" 合并请求，不想添加一堆 remote 或者每次都要做一次拉取，这里有一个可以在 GitHub 上用的小技巧。 这是有点高级的技巧，但它相当有用，我们会在 "),s("a",{attrs:{href:"ch00/_refspec"}},[t._v("引用规范")]),t._v(" 有更多的细节说明。")]),t._v(" "),s("p",[t._v("实际上 GitHub 在服务器上把合并请求分支视为一种 “假分支”。 默认情况下你克隆时不会得到它们，但它们还是隐式地存在，你可以很容易地访问到它们。")]),t._v(" "),s("p",[t._v("为了展示这个，我们要用到一个叫做 "),s("code",[t._v("ls-remote")]),t._v(" 的低级命令（通常被叫做“plumbing”， 我们会在 "),s("a",{attrs:{href:"ch00/_plumbing_porcelain"}},[t._v("底层命令与上层命令")]),t._v(" 读到更多相关内容）。 这个命令在日常 Git 操作中基本不会用到，但在显示服务器上有哪些引用（reference）时很管用。")]),t._v(" "),s("p",[t._v("如果在我们之前用过的 “blink” 版本库上使用这个命令，我们会得到一个版本库里所有的分支，标签和其它引用（reference）的列表。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git ls-remote https://github.com/schacon/blink\n10d539600d86723087810ec636870a504f4fee4d\tHEAD\n10d539600d86723087810ec636870a504f4fee4d\trefs/heads/master\n6a83107c62950be9453aac297bb0193fd743cd6e\trefs/pull/1/head\nafe83c2d1a70674c9505cc1d8b7d380d5e076ed3\trefs/pull/1/merge\n3c8d735ee16296c242be7a9742ebfbc2665adec1\trefs/pull/2/head\n15c9f4f80973a2758462ab2066b6ad9fe8dcf03d\trefs/pull/2/merge\na5a7751a33b7e86c5e9bb07b26001bb17d775d1a\trefs/pull/4/head\n31a45fc257e8433c8d8804e3e848cf61c9d3166c\trefs/pull/4/merge\n")])])]),s("p",[t._v("当然，如果你在你自己的版本库或其它你想检查的远程版本库中使用 "),s("code",[t._v("git ls-remote origin")]),t._v(" ，它会显示相似的内容。")]),t._v(" "),s("p",[t._v("如果版本库在 GitHub 上并且有打开的合并请求，你会得到一些以 "),s("code",[t._v("refs/pull/")]),t._v(" 开头的引用。 它们实际上是分支，但因为它们不在 "),s("code",[t._v("refs/heads/")]),t._v(" 中，所以正常情况下你克隆时不会从服务器上得到它们 ——抓取过程正常情况下会忽略它们。")]),t._v(" "),s("p",[t._v("每个合并请求有两个引用——其中以 "),s("code",[t._v("/head")]),t._v(" 结尾的引用指向的提交记录与合并请求分支中的最后一个提交记录是同一个。 所以如果有人在我们的版本库中开启了一个合并请求，他们的分支叫做 "),s("code",[t._v("bug-fix")]),t._v("， 指向 "),s("code",[t._v("a5a775")]),t._v(" 这个提交记录，那么在 "),s("strong",[t._v("我们的")]),t._v(" 版本库中我们没有 "),s("code",[t._v("bug-fix")]),t._v(" 分支（因为那是在他们的 fork 中）， 但我们 "),s("strong",[t._v("可以")]),t._v(" 有一个 "),s("code",[t._v("pull//head")]),t._v(" 指向 "),s("code",[t._v("a5a775")]),t._v("。 这意味着我们可以很容易地拉取每一个合并请求分支而不用添加一堆远程仓库。")]),t._v(" "),s("p",[t._v("现在，你可以像直接抓取引用一样抓取那些分支或提交。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git fetch origin refs/pull/958/head\nFrom https://github.com/libgit2/libgit2\n * branch            refs/pull/958/head -> FETCH_HEAD\n")])])]),s("p",[t._v("这告诉 Git： “连接到 "),s("code",[t._v("origin")]),t._v(" 这个 remote，下载名字为 "),s("code",[t._v("refs/pull/958/head")]),t._v(" 的引用。” Git 高高兴兴去执行，下载构建那个引用需要的所有内容，然后把指针指向 "),s("code",[t._v(".git/FETCH_HEAD")]),t._v(" 下面你想要的提交记录。 然后你可以用 "),s("code",[t._v("git merge FETCH_HEAD")]),t._v(" 把它合并到你想进行测试的分支，但那个合并的提交信息看起来有点怪。 然而，如果你需要审查 "),s("strong",[t._v("一大批")]),t._v(" 合并请求，这样操作会很麻烦。")]),t._v(" "),s("p",[t._v("还有一种方法可以抓取 "),s("em",[t._v("所有的")]),t._v(" 合并请求，并且在你连接到远程仓库的时候保持更新。 用你最喜欢的编辑器打开 "),s("code",[t._v(".git/config")]),t._v(" ，查找 "),s("code",[t._v("origin")]),t._v(" 远程仓库。 看起来差不多像下面这样：")]),t._v(" "),s("div",{staticClass:"language-ini extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ini"}},[s("code",[s("span",{pre:!0,attrs:{class:"token section"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v('remote "origin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("url")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("https://github.com/libgit2/libgit2")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("fetch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("+refs/heads/*:refs/remotes/origin/*")]),t._v("\n")])])]),s("p",[t._v("以 "),s("code",[t._v("fetch =")]),t._v(" 开头的行是一个 “refspec.” 它是一种把 remote 的名称映射到你本地 "),s("code",[t._v(".git")]),t._v(" 目录的方法。 这一条（就是上面的这一条）告诉 Git，“remote 上 "),s("code",[t._v("refs/heads")]),t._v(" 下面的内容在我本地版本库中都放在 "),s("code",[t._v("refs/remotes/origin")]),t._v(" 。” 你可以把这一段修改一下，添加另一个 refspec：")]),t._v(" "),s("div",{staticClass:"language-ini extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ini"}},[s("code",[s("span",{pre:!0,attrs:{class:"token section"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v('remote "origin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("url")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("https://github.com/libgit2/libgit2.git")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("fetch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("+refs/heads/*:refs/remotes/origin/*")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("fetch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("+refs/pull/*/head:refs/remotes/origin/pr/*")]),t._v("\n")])])]),s("p",[t._v("最后一行告诉 Git： “所有看起来像 "),s("code",[t._v("refs/pull/123/head")]),t._v(" 的引用应该在本地版本库像 "),s("code",[t._v("refs/remotes/origin/pr/123")]),t._v(" 一样存储” 现在，如果你保存那个文件，执行 "),s("code",[t._v("git fetch")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git fetch\n# …\n * [new ref]         refs/pull/1/head -> origin/pr/1\n * [new ref]         refs/pull/2/head -> origin/pr/2\n * [new ref]         refs/pull/4/head -> origin/pr/4\n# …\n")])])]),s("p",[t._v("现在所有的合并请求在本地像分支一样展现，它们是只读的，当你执行抓取时它们也会更新。 这让在本地测试合并请求中的代码变得超级简单：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git checkout pr/2\nChecking out files: 100% (3769/3769)， done.\nBranch pr/2 set up to track remote branch pr/2 from origin.\nSwitched to a new branch 'pr/2'\n")])])]),s("p",[t._v("你的鹰眼系统会发现在 refspec 的 remote 部分的结尾有个 "),s("code",[t._v("head")]),t._v(" 。 在 GitHub 那边也有一个 "),s("code",[t._v("refs/pull/#/merge")]),t._v(" 引用，它代表的是如果你在网站上按了 “merge” 按钮对应的提交记录。 这甚至让你可以在按按钮之前就测试这个合并。")]),t._v(" "),s("h5",{attrs:{id:"合并请求之上的合并请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并请求之上的合并请求"}},[t._v("#")]),t._v(" 合并请求之上的合并请求")]),t._v(" "),s("p",[t._v("你不仅可以在主分支或者说 "),s("code",[t._v("master")]),t._v(" 分支上开启合并请求，实际上你可以在网络上的任何一个分支上开启合并请求。 其实，你甚至可以在另一个合并请求上开启一个合并请求。")]),t._v(" "),s("p",[t._v("如果你看到一个合并请求在向正确的方向发展，然后你想在这个合并请求上做一些修改或者你不太确定这是个好主意，或者你没有目标分支的推送权限，你可以直接在合并请求上开启一个合并请求。")]),t._v(" "),s("p",[t._v("当你开启一个合并请求时，在页面的顶端有一个框框显示你要合并到哪个分支和你从哪个分支合并过来的。 如果你点击那个框框右边的 “Edit” 按钮，你不仅可以改变分支，还可以选择哪个 fork。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/maint-04-target.png",alt:"合并目标"}})]),t._v(" "),s("p",[t._v("Figure 118. 手工修改合并请求的目标.")]),t._v(" "),s("p",[t._v("这里你可以很简单地指明合并你的分支到哪一个合并请求或 fork。")]),t._v(" "),s("h4",{attrs:{id:"提醒和通知"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提醒和通知"}},[t._v("#")]),t._v(" 提醒和通知")]),t._v(" "),s("p",[t._v("GitHub 内置了一个很好的通知系统，当你需要与别人或别的团队交流时用起来很方便。")]),t._v(" "),s("p",[t._v("在任何评论中你可以先输入一个 "),s("code",[t._v("@")]),t._v(" ，系统会自动补全项目中合作者或贡献者的名字和用户名。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/maint-05-mentions.png",alt:"提醒"}})]),t._v(" "),s("p",[t._v("Figure 119. 输入 @ 来提醒某人.")]),t._v(" "),s("p",[t._v("你也可以提醒不在列表中的用户，但是通常自动补全用起更快。")]),t._v(" "),s("p",[t._v("当你发布了一个带用户提醒的评论，那个用户会收到通知。 这意味着把人们拉进会话中要比让他们投票有效率得多。 对于 GitHub 上的合并请求，人们经常把他们团队或公司中的其它人拉来审查问题或合并请求。")]),t._v(" "),s("p",[t._v("如果有人收到了合并请求或问题的提醒，他们会“订阅”它，后面有新的活动发生他们都会持续收到提醒。 如果你是合并请求或者问题的发起方你也会被订阅上，比如你在关注一个版本库或者你评论了什么东西。 如果你不想再收到提醒，在页面上有个 “Unsubscribe” 按钮，点一下就不会再收到更新了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/maint-06-unsubscribe.png",alt:"取消订阅"}})]),t._v(" "),s("p",[t._v("Figure 120. 取消订阅一个问题或合并请求.")]),t._v(" "),s("h4",{attrs:{id:"通知页面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通知页面"}},[t._v("#")]),t._v(" 通知页面")]),t._v(" "),s("p",[t._v("当我们在这提到特指 GitHub 的 “notifications” ，指的是当 GitHub 上有事件发生时，它通知你的方式，这里有几种不同的方式来配置它们。 如果你打开配置页面的 “Notification center” 标签，你可以看到一些选项。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/maint-07-notifications.png",alt:"通知中心"}})]),t._v(" "),s("p",[t._v("Figure 121. 通知中心选项.")]),t._v(" "),s("p",[t._v("有两个选项，通过“邮件（Email）”和通过“网页（Web）”，你可以选用一个或者都不选或者都选。")]),t._v(" "),s("h4",{attrs:{id:"网页通知"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网页通知"}},[t._v("#")]),t._v(" 网页通知")]),t._v(" "),s("p",[t._v("网页通知只在 GitHub 上存在，你也只能在 GitHub 上查看。 如果你打开了这个选项并且有一个你的通知，你会在你屏幕上方的通知图标上看到一个小蓝点。参见 "),s("a",{attrs:{href:"ch00/_not_center"}},[t._v("通知中心.")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/maint-08-notifications-page.png",alt:"通知中心"}})]),t._v(" "),s("p",[t._v("Figure 122. 通知中心.")]),t._v(" "),s("p",[t._v("如果你点击那个玩意儿，你会看到你被通知到的所有条目，按照项目分好了组。 你可以点击左边栏的项目名字来过滤项目相关的通知。 你可以点击通知旁边的对号图标把通知标为已读，或者点击组上面的图标把项目中 "),s("strong",[t._v("所有的")]),t._v(" 通知标为已读。 在每个对号图标旁边都有一个静音按钮，你可以点一下，以后就不会收到它相关的通知。")]),t._v(" "),s("p",[t._v("所有这些工具对于处理大量通知非常有用。 很多 GitHub 资深用户都关闭邮件通知，在这个页面上处理他们所有的通知。")]),t._v(" "),s("h4",{attrs:{id:"邮件通知-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#邮件通知-2"}},[t._v("#")]),t._v(" 邮件通知")]),t._v(" "),s("p",[t._v("邮件通知是你处理 GitHub 通知的另一种方式。 如果你打开这个选项，每当有通知时，你会收到一封邮件。 我们在 "),s("a",{attrs:{href:"ch00/_email_notification"}},[t._v("通过电子邮件发送的评论提醒")]),t._v(" 和 "),s("a",{attrs:{href:"ch00/_email_pr"}},[t._v("新的合并请求的邮件通知.")]),t._v(" 看到了一些例子。 邮件也会被合适地按话题组织在一起，如果你使用一个具有会话功能的邮件客户端那会很方便。")]),t._v(" "),s("p",[t._v("GitHub 在发送给你的邮件头中附带了很多元数据，这对于设置过滤器和邮件规则非常有帮助。")]),t._v(" "),s("p",[t._v("举个例子，我们来看一看在 "),s("a",{attrs:{href:"ch00/_email_pr"}},[t._v("新的合并请求的邮件通知.")]),t._v(" 中发给 Tony 的一封真实邮件的头部，我们会看到下面这些：")]),t._v(" "),s("div",{staticClass:"language-mbox extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("To: tonychacon/fade \nMessage-ID: \nSubject: [fade] Wait longer to see the dimming effect better (#1)\nX-GitHub-Recipient: tonychacon\nList-ID: tonychacon/fade \nList-Archive: https://github.com/tonychacon/fade\nList-Post: \nList-Unsubscribe: ，...\nX-GitHub-Recipient-Address: tchacon@example.com\n")])])]),s("p",[t._v("这里有一些有趣的东西。如果你想高亮或者转发这个项目甚至这个合并请求相关的邮件， "),s("code",[t._v("Message-ID")]),t._v(" 中的信息会以`///` 的格式展现所有的数据。 例如，如果这是一个问题（issue），那么 字段就会是 “issues” 而不是 “pull” 。")]),t._v(" "),s("p",[s("code",[t._v("List-Post")]),t._v(" 和 "),s("code",[t._v("List-Unsubscribe")]),t._v(" 字段表示如果你的邮件客户端能够处理这些，那么你可以很容易地在列表中发贴或取消对这个相关帖子的订阅。 那会很有效率，就像在页面中点击静音按钮或在问题/合并请求页面点击 “Unsubscribe” 一样。")]),t._v(" "),s("p",[t._v("值得注意的是，如果你同时打开了邮件和网页通知，那么当你在邮件客户端允许加载图片的情况下阅读邮件通知时，对应的网页通知也将会同时被标记为已读。")]),t._v(" "),s("h4",{attrs:{id:"特殊文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊文件"}},[t._v("#")]),t._v(" 特殊文件")]),t._v(" "),s("p",[t._v("如果你的版本库中有一些特殊文件，GitHub 会提醒你。")]),t._v(" "),s("h4",{attrs:{id:"readme"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readme"}},[t._v("#")]),t._v(" README")]),t._v(" "),s("p",[t._v("第一个就是 "),s("code",[t._v("README")]),t._v(" 文件，可以是几乎任何 GitHub 可以识别的格式。 例如，它可以是 "),s("code",[t._v("README")]),t._v(" ，"),s("code",[t._v("README.md")]),t._v(" ， "),s("code",[t._v("README.asciidoc")]),t._v(" 。 如果 GitHub 在你的版本库中找到 README 文件，会把它在项目的首页渲染出来。")]),t._v(" "),s("p",[t._v("很多团队在这个文件里放版本库或项目新人需要了解的所有相关的信息。 它一般包含这些内容：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("该项目的作用")])]),t._v(" "),s("li",[s("p",[t._v("如何配置与安装")])]),t._v(" "),s("li",[s("p",[t._v("有关如何使用和运行的例子")])]),t._v(" "),s("li",[s("p",[t._v("项目的许可证")])]),t._v(" "),s("li",[s("p",[t._v("如何向项目贡献力量")])])]),t._v(" "),s("p",[t._v("因为 GitHub 会渲染这个文件，你可以在文件里植入图片或链接让它更容易理解。")]),t._v(" "),s("h4",{attrs:{id:"贡献-contributing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贡献-contributing"}},[t._v("#")]),t._v(" 贡献 CONTRIBUTING")]),t._v(" "),s("p",[t._v("另一个 GitHub 可以识别的特殊文件是 "),s("code",[t._v("CONTRIBUTING")]),t._v(" 。 如果你有一个任意扩展名的 "),s("code",[t._v("CONTRIBUTING")]),t._v(" 文件，当有人开启一个合并请求时 GitHub 会显示 "),s("a",{attrs:{href:"ch00/_contrib_file"}},[t._v("开启合并请求时有 CONTRIBUTING 文件存在.")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/maint-09-contrib.png",alt:"贡献注意事项"}})]),t._v(" "),s("p",[t._v("Figure 123. 开启合并请求时有 CONTRIBUTING 文件存在.")]),t._v(" "),s("p",[t._v("这个的作用就是你可以在这里指出对于你的项目开启的合并请求你想要的／不想要的各种事情。 这样别人在开启合并请求之前可以读到这些指导方针。")]),t._v(" "),s("h4",{attrs:{id:"项目管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目管理"}},[t._v("#")]),t._v(" 项目管理")]),t._v(" "),s("p",[t._v("对于一个单个项目其实没有很多管理事务要做，但也有几点有趣的。")]),t._v(" "),s("h5",{attrs:{id:"改变默认分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#改变默认分支"}},[t._v("#")]),t._v(" 改变默认分支")]),t._v(" "),s("p",[t._v('如果你想用 “master” 之外的分支作为你的默认分支，其他人将默认会在这个分支上开启合并请求或进行浏览，你可以在你版本库的设置页面的 "options" 标签下修改。')]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/maint-10-default-branch.png",alt:"默认分支"}})]),t._v(" "),s("p",[t._v("Figure 124. 改变项目的默认分支.")]),t._v(" "),s("p",[t._v("简单地改变默认分支下拉列表中的选项，它就会作为所有主要操作的默认分支，他人进行克隆时该分支也将被默认检出。")]),t._v(" "),s("h5",{attrs:{id:"移交项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#移交项目"}},[t._v("#")]),t._v(" 移交项目")]),t._v(" "),s("p",[t._v("如果你想把一个项目移交给 GitHub 中的另一个人或另一个组织，还是设置页面的这个 “options” 标签下有一个 “Transfer ownership” 选项可以用来干这个。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/maint-11-transfer.png",alt:"移交"}})]),t._v(" "),s("p",[t._v("Figure 125. 把项目移交给另一个 GitHub 用户或组织。")]),t._v(" "),s("p",[t._v("当你正准备放弃一个项目且正好有别人想要接手时，或者你的项目壮大了想把它移到一个组织里时，这就管用了。")]),t._v(" "),s("p",[t._v("这么做不仅会把版本库连带它所有的关注者和星标数都移到另一个地方，它还会将你的 URL 重定向到新的位置。 它也重定向了来自 Git 的克隆和抓取，而不仅仅是网页端请求。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/GitHub-%E5%AF%B9%E9%A1%B9%E7%9B%AE%E5%81%9A%E5%87%BA%E8%B4%A1%E7%8C%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),s("OutboundLink")],1),t._v(" | "),s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/GitHub-%E7%AE%A1%E7%90%86%E7%BB%84%E7%BB%87",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_6-4-github-管理组织"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-github-管理组织"}},[t._v("#")]),t._v(" 6.4 GitHub - 管理组织")]),t._v(" "),s("h3",{attrs:{id:"管理组织"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#管理组织"}},[t._v("#")]),t._v(" 管理组织")]),t._v(" "),s("p",[t._v("除了个人帐户之外，GitHub 还提供被称为组织（Organizations）的帐户。 组织账户和个人账户一样都有一个用于存放所拥有项目的命名空间，但是许多其他的东西都是不同的。 组织帐户代表了一组共同拥有多个项目的人，同时也提供一些工具用于对成员进行分组管理。 通常，这种账户被用于开源群组（例如：“perl”或者“rails”），或者公司（例如：“google”或者“twitter”）。")]),t._v(" "),s("h4",{attrs:{id:"组织的基本知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组织的基本知识"}},[t._v("#")]),t._v(" 组织的基本知识")]),t._v(" "),s("p",[t._v("我们可以很简单地创建一个组织，只需要点击任意 GitHub 页面右上角的“+”图标，在菜单中选择“New organization”即可。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/neworg.png",alt:"“New organization”菜单项"}})]),t._v(" "),s("p",[t._v("Figure 126. “New organization”菜单项")]),t._v(" "),s("p",[t._v("首先你必须提供组织的名称和组织的主要联系邮箱。 然后，如果你希望的话，也可以邀请其他用户作为共同拥有人。")]),t._v(" "),s("p",[t._v("完成以上步骤后，你就会拥有一个全新的组织。 类似于个人帐户，如果组织的所有内容都是开源的，那么你就可以免费使用这个组织。")]),t._v(" "),s("p",[t._v("作为一个组织的拥有者，当你在派生一个版本库的时候，你可以选择把它派生到你的组织的命名空间内。 当你新建版本库时，你可以把它存放到你的个人帐户或你拥有的组织内。 同时，你也会自动地“关注”所有这些组织内的新版本库。")]),t._v(" "),s("p",[t._v("就像"),s("a",{attrs:{href:"ch00/_personal_avatar"}},[t._v("头像")]),t._v("，你可以为你的组织上传头像，使它更个性化。 同时，也和个人帐户类似，组织会有一个着陆页（landing page），用于列出该组织所有的版本库，并且该页面可供所有人浏览。")]),t._v(" "),s("p",[t._v("下面我们来说一些组织和个人帐户不同的地方。")]),t._v(" "),s("h4",{attrs:{id:"团队"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#团队"}},[t._v("#")]),t._v(" 团队")]),t._v(" "),s("p",[t._v("组织使用团队（Teams）来管理成员，团队就是组织中的一组个人账户和版本库，以及团队成员对这些版本库的访问权限。")]),t._v(" "),s("p",[t._v("例如，假设你的公司有三个版本库："),s("code",[t._v("frontend")]),t._v("、"),s("code",[t._v("backend")]),t._v(" 和 "),s("code",[t._v("deployscripts")]),t._v("。 你会希望你的 HTML/CSS/Javascript 开发者有 "),s("code",[t._v("frontend")]),t._v(" 或者 "),s("code",[t._v("backend")]),t._v(" 的访问权限，操作人员有 "),s("code",[t._v("backend")]),t._v(" 和 "),s("code",[t._v("deployscripts")]),t._v(" 的访问权限。 团队让这个任务变得更简单，而不用为每个版本库管理它的协作者。")]),t._v(" "),s("p",[t._v("组织页面主要由一个面板（dashboard）构成，这个仪表盘包含了这个组织内的所有版本库，用户和团队。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/orgs-01-page.png",alt:"组织页面"}})]),t._v(" "),s("p",[t._v("Figure 127. 组织页面")]),t._v(" "),s("p",[t._v("你可以点击 "),s("a",{attrs:{href:"ch00/_org_page"}},[t._v("组织页面")]),t._v(" 右边的团队侧边栏（Teams）来管理你的团队。 点击之后，你会进入一个新页面，在这里你可以添加新成员和版本库到团队中，或者管理团队的访问权限和其它设置。 每个团队对于版本库可以有只读、读写和管理三种权限。 你可以通过点击在 "),s("a",{attrs:{href:"ch00/_team_page"}},[t._v("团队页面")]),t._v(" 内的 “Settings” 按钮更改相应权限等级。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/orgs-02-teams.png",alt:"团队页面"}})]),t._v(" "),s("p",[t._v("Figure 128. 团队页面")]),t._v(" "),s("p",[t._v("当你邀请一个用户加入团队，该用户会收到一封通知他被邀请的邮件。")]),t._v(" "),s("p",[t._v("除此之外，团队也类似于个人帐户，有 "),s("code",[t._v("@mentions")]),t._v("（例如："),s("code",[t._v("@acmecorp/frontend")]),t._v("）的功能，不同之处就在于被提及的团队内 "),s("strong",[t._v("所有")]),t._v(" 成员都会成为这个话题的订阅者。 当你希望得到团队中某个人的关注，又不知道具体应该问谁的时候，这个功能就显得很有帮助。")]),t._v(" "),s("p",[t._v("一个用户可以加入任意数量的团队，所以别把自己局限于拥有访问控制的团队。 对于某一类课题，像 "),s("code",[t._v("ux")]),t._v(", "),s("code",[t._v("css")]),t._v(" 或者 "),s("code",[t._v("refactoring")]),t._v(" 这样有着特殊关注点的团队就显得很有帮助，而像 "),s("code",[t._v("legal")]),t._v(" 和 "),s("code",[t._v("colorblind")]),t._v(" 这样的就完全是针对它们各自领域的。")]),t._v(" "),s("h4",{attrs:{id:"审计日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#审计日志"}},[t._v("#")]),t._v(" 审计日志")]),t._v(" "),s("p",[t._v("组织的拥有者还可以访问组织中发生的事情的所有信息。 在 'Audit Log' 标签页有整个组织的日志，你可以看到谁在世界上哪个地方做了什么事。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/orgs-03-audit.png",alt:"orgs 03 audit"}})]),t._v(" "),s("p",[t._v("Figure 129. 审计日志")]),t._v(" "),s("p",[t._v("你也可以通过选定某一类型的事件、某个地方、某个人对日志进行过滤。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/GitHub-%E7%BB%B4%E6%8A%A4%E9%A1%B9%E7%9B%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),s("OutboundLink")],1),t._v(" | "),s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/GitHub-%E8%84%9A%E6%9C%AC-GitHub",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_6-5-github-脚本-github"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-github-脚本-github"}},[t._v("#")]),t._v(" 6.5 GitHub - 脚本 GitHub")]),t._v(" "),s("h3",{attrs:{id:"脚本-github"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#脚本-github"}},[t._v("#")]),t._v(" 脚本 GitHub")]),t._v(" "),s("p",[t._v("所以现在我们已经介绍了 GitHub 的大部分功能与工作流程，但是任意一个小组或项目都会去自定义，因为他们想要创造或扩展想要整合的服务。")]),t._v(" "),s("p",[t._v("对我们来说很幸运的是，GitHub 在许多方面都真的很方便 Hack。 在本节中我们将会介绍如何使用 GitHub 钩子系统与 API 接口，使 GitHub 按照我们的设想来工作。")]),t._v(" "),s("h4",{attrs:{id:"服务与钩子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务与钩子"}},[t._v("#")]),t._v(" 服务与钩子")]),t._v(" "),s("p",[t._v("GitHub 仓库管理中的钩子与服务区块是 GitHub 与外部系统交互最简单的方式。")]),t._v(" "),s("h5",{attrs:{id:"服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务"}},[t._v("#")]),t._v(" 服务")]),t._v(" "),s("p",[t._v("首先我们来看一下服务。 钩子与服务整合都可以在仓库的设置区块中找到，就在我们之前添加协作者与改变项目的默认分支的地方。 在 “Webhooks and Services” 标签下你会看到与 "),s("a",{attrs:{href:"ch00/_services_hooks"}},[t._v("服务与钩子配置区域")]),t._v(" 类似的内容。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/scripting-01-services.png",alt:"服务与钩子"}})]),t._v(" "),s("p",[t._v("Figure 130. 服务与钩子配置区域")]),t._v(" "),s("p",[t._v("有许多可以选择的服务，大多数是整合到其他的商业与开源系统中。 它们中的大多数是为了整合持续集成服务、BUG 与问题追踪系统、聊天室系统与文档系统。 我们将会通过设置一个非常简单的例子来介绍。 如果从 “Add Service” 选择 “email”，会得到一个类似 "),s("a",{attrs:{href:"ch00/_service_config"}},[t._v("电子邮件服务配置")]),t._v(" 的配置屏幕。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/scripting-02-email-service.png",alt:"电子邮件服务"}})]),t._v(" "),s("p",[t._v("Figure 131. 电子邮件服务配置")]),t._v(" "),s("p",[t._v("在本例中，如果我们点击 “Add service” 按钮，每次有人推送内容到仓库时，指定的电子邮件地址都会收到一封邮件。 服务可以监听许多不同类型的事件，但是大多数只监听推送事件然后使用那些数据做一些事情。")]),t._v(" "),s("p",[t._v("如果有一个正在使用的系统想要整合到 GitHub，应当先检查这里看有没有已有的可用的服务整合。 例如，如果正使用 Jenkins 来测试你的代码库，当每次有人推送到你的仓库时你可以启用 Jenkins 内置的整合启动测试运行。")]),t._v(" "),s("h5",{attrs:{id:"钩子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#钩子"}},[t._v("#")]),t._v(" 钩子")]),t._v(" "),s("p",[t._v("如果需要做一些更具体的事，或者想要整合一个不在这个列表中的服务或站点，可以转而使用更通用的钩子系统。 GitHub 仓库钩子是非常简单的。 指定一个 URL 然后 GitHub 在任一期望的事件发生时就会发送一个 HTTP 请求到那个 URL 。")]),t._v(" "),s("p",[t._v("通常做这件事的方式是可以设置一个小的 web 服务来监听 GitHub 钩子请求然后使用收到的数据做一些事情。")]),t._v(" "),s("p",[t._v("为了启用一个钩子，点击 "),s("a",{attrs:{href:"ch00/_services_hooks"}},[t._v("服务与钩子配置区域")]),t._v(" 中的 “Add webhook” 按钮。 这会将你引导至一个类似 "),s("a",{attrs:{href:"ch00/_web_hook"}},[t._v("Web 钩子配置")]),t._v(" 的页面。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/scripting-03-webhook.png",alt:"Web 钩子配置"}})]),t._v(" "),s("p",[t._v("Figure 132. Web 钩子配置")]),t._v(" "),s("p",[t._v("Web 钩子的设置非常简单。 大多数情况下只需要输入一个 URL 与一个密钥然后点击 “Add webhook”。 有几个选项可以指定在哪个事件时想要 GitHub 发送请求—— 默认的行为是只有当某人推送新代码到仓库的任一分支时的 "),s("code",[t._v("push")]),t._v(" 事件获得一个请求。")]),t._v(" "),s("p",[t._v("让我们看一个设置处理 web 钩子的 web 服务的小例子。 我们将会使用 Ruby web 框架 Sinatra，因为它相当简洁，应该能够轻松地看到我们正在做什么。")]),t._v(" "),s("p",[t._v("假设我们想要在某个特定的人推送到我们的项目的特定分支并修改一个特定文件时得到一封邮件。 我们可以相当容易地使用类似下面的代码做到：")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sinatra'")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'json'")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mail'")])]),t._v("\n\npost "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/payload'")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# parse the JSON")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# gather the data we're looking for")]),t._v("\n  pusher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pusher"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ref"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get a list of all the files touched")]),t._v("\n  files "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commits"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("commit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n    commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'added'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'modified'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'removed'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n  files "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" files"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flatten"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uniq\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check for our criteria")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" pusher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'schacon'")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n     branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ref/heads/special-branch'")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n     files"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'special-file.txt'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    Mail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deliver "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n      from     "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tchacon@example.com'")])]),t._v("\n      to       "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tchacon@example.com'")])]),t._v("\n      subject  "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Scott Changed the File'")])]),t._v("\n      body     "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ALARM"')])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),s("p",[t._v("这里我们拿到一个 GitHub 传送给我们的 JSON 请求然后查找推送者，他们推送到了什么分支以及推送的所有提交都改动了哪些文件。 然后我们检查它是否与我们的条件区配，如果匹配则发送一封邮件。")]),t._v(" "),s("p",[t._v("为了开发与测试类似这样的东西，在设置钩子的地方有一个漂亮的开发者控制台。 可以看到 GitHub 为那个 webhook 的最后几次请求。 对每一个钩子，当它发送后都可以深入挖掘，检测它是否是成功的与请求及回应的消息头与消息体。 这使得测试与调试钩子非常容易。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/scripting-04-webhook-debug.png",alt:"Web 钩子调试信息"}})]),t._v(" "),s("p",[t._v("Figure 133. Web 钩子调试信息")]),t._v(" "),s("p",[t._v("开发者控制台的另一个很棒的功能是可以轻松地重新发送任何请求来测试你的服务。")]),t._v(" "),s("p",[t._v("关于如何编写 web 钩子与所有可监听的不同事件类型的更多信息，请访问在 "),s("a",{attrs:{href:"https://docs.github.com/cn/developers/webhooks-and-events/webhooks/about-webhooks",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.github.com/cn/developers/webhooks-and-events/webhooks/about-webhooks"),s("OutboundLink")],1),t._v(" 的 GitHub 开发者文档。")]),t._v(" "),s("h4",{attrs:{id:"github-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#github-api"}},[t._v("#")]),t._v(" GitHub API")]),t._v(" "),s("p",[t._v("服务与钩子给你提供了一种方式来接收关于在仓库中发生的事件的推送通知，但是如何获取相关事件的详情呢？ 如何自动化一些诸如添加协作者或给问题加标签的事情呢？")]),t._v(" "),s("p",[t._v("这是 GitHub API 派上用场的地方。 在自动化流行的趋势下，GitHub 提供了大量的 API 接口，可以进行几乎任何能在网站上进行的操作。 在本节中我们将会学习如何授权与连接到 API，如何通过 API 在一个问题上评论与如何修改一个 Pull Request 的状态。")]),t._v(" "),s("h4",{attrs:{id:"基本用途"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本用途"}},[t._v("#")]),t._v(" 基本用途")]),t._v(" "),s("p",[t._v("可以做的最基本的事情是向一个不需要授权的接口上发送一个简单的 GET 请求。 该接口可能是一个用户或开源项目的只读信息。 例如，如果我们想要知道更多关于名为 “schacon” 的用户信息，我们可以运行类似下面的东西：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("$ curl https"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("github"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("users"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("schacon\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"login"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"schacon"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"id"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("70")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"avatar_url"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://avatars.githubusercontent.com/u/70"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# …\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Scott Chacon"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"company"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GitHub"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"following"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"created_at"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2008-01-27T17:19:28Z"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"updated_at"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2014-06-10T02:37:23Z"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("有大量类似这样的接口来获得关于组织、项目、问题、提交的信息 — 差不多就是你能在 GitHub 上看到的所有东西。 甚至可以使用 API 来渲染任意 Markdown 或寻找一个 "),s("code",[t._v(".gitignore")]),t._v(" 模板。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("$ curl https"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("github"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("gitignore"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("templates"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Java\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Java"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"source"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(' "'),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class\n\n# Mobile Tools "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Java")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("J2ME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n\n# Package Files #\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("jar\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("war\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ear\n\n# virtual machine crash logs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" see https"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("en"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("download"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("help"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("error_hotspot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xml\nhs_err_pid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v('\n"\n'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"在一个问题上评论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在一个问题上评论"}},[t._v("#")]),t._v(" 在一个问题上评论")]),t._v(" "),s("p",[t._v("然而，如果想要在网站上进行一个操作，如在 Issue 或 Pull Request 上评论，或者想要查看私有内容或与其交互，你需要授权。")]),t._v(" "),s("p",[t._v("这里提供了几种授权方式。 你可以使用仅需用户名与密码的基本授权，但是通常更好的主意是使用一个个人访问令牌。 可以从设置页的 “Applications” 标签生成访问令牌。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/scripting-05-access-token.png",alt:"访问令牌"}})]),t._v(" "),s("p",[t._v("Figure 134. 从设置页的 “Applications” 标签生成访问令牌。")]),t._v(" "),s("p",[t._v("它会询问这个令牌的作用域与一个描述。 确保使用一个好的描述信息，这样当脚本或应用不再使用时你会很放心地移除。")]),t._v(" "),s("p",[t._v("GitHub 只会显示令牌一次，所以记得一定要拷贝它。 现在可以在脚本中使用它代替使用用户名写密码来授权。 这很漂亮，因为可以限制想要做的范围并且令牌是可废除的。")]),t._v(" "),s("p",[t._v("这也会有一个提高频率上限的附加优点。 如果没有授权的话，你会被限制在一小时最多发起 60 次请求。 如果授权则可以一小时最多发起 5000 次请求。")]),t._v(" "),s("p",[t._v("所以让我们利用它来对我们的其中一个问题进行评论。 想要对一个特定问题 Issue #6 留下一条评论。 必须使用刚刚生成的令牌作为 Authorization 头信息，发送一个到 "),s("code",[t._v("repos///issues//comments")]),t._v(" 的 HTTP POST 请求。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("$ curl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("H")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" \\\n       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("H")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Authorization: token TOKEN"')]),t._v(" \\\n       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("data "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"body":"A new comment, :+1:"}\'')]),t._v(" \\\n       "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("https")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("github"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("repos"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("schacon"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("blink"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("issues"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("comments\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"id"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("58322100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"html_url"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://github.com/schacon/blink/issues/6#issuecomment-58322100"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"user"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"login"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tonychacon"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"id"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7874698")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"avatar_url"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://avatars.githubusercontent.com/u/7874698?v=2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"User"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"created_at"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2014-10-08T07:48:19Z"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"updated_at"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2014-10-08T07:48:19Z"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"body"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A new comment, :+1:"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("现在如果进入到那个问题，可以看到我们刚刚发布的评论，像 "),s("a",{attrs:{href:"ch00/_api_comment"}},[t._v("从 GitHub API 发布的一条评论")]),t._v(" 一样。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/scripting-06-comment.png",alt:"API 评论"}})]),t._v(" "),s("p",[t._v("Figure 135. 从 GitHub API 发布的一条评论")]),t._v(" "),s("p",[t._v("可以使用 API 去做任何可以在网站上做的事情 — 创建与设置里程碑、指派人员到 Issues 与 Pull Requests，创建与修改标签、访问提交数据、创建新的提交与分支、打开关闭或合并 Pull Requests、创建与编辑团队、在 Pull Request 中评论某行代码、搜索网站等等。")]),t._v(" "),s("h4",{attrs:{id:"修改-pull-request-的状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改-pull-request-的状态"}},[t._v("#")]),t._v(" 修改 Pull Request 的状态")]),t._v(" "),s("p",[t._v("我们要看最后一个例子在使用拉取请求时非常有用。 每一个提交可以有一个或多个与它关联的状态，有 API 来添加与查询状态。")]),t._v(" "),s("p",[t._v("大多数持续集成与测试服务通过测试推送的代码后使用这个 API 来回应，然后报告提交是否通过了全部测试。 你也可以使用该接口来检查提交信息是否经过合适的格式化、提交者是否遵循了所有你的贡献准则、提交是否经过有效的签名 — 种种这类事情。")]),t._v(" "),s("p",[t._v("假设在仓库中设置了一个 web 钩子访问一个用来检查提交信息中的 "),s("code",[t._v("Signed-off-by")]),t._v(" 字符串的小的 web 服务。")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'httparty'")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sinatra'")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'json'")])]),t._v("\n\npost "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/payload'")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# parse the JSON")]),t._v("\n  repo_name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'repository'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'full_name'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# look through each commit message")]),t._v("\n  push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commits"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("each")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("commit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# look for a Signed-off-by string")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex-literal"}},[s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/Signed-off-by/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("match commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'success'")])]),t._v("\n      description "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Successfully signed off!'")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n      state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'failure'")])]),t._v("\n      description "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'No signoff found.'")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# post status to GitHub")]),t._v("\n    sha "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    status_url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://api.github.com/repos/')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("#{")]),s("span",{pre:!0,attrs:{class:"token content"}},[t._v("repo_name")]),s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("/statuses/")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("#{")]),s("span",{pre:!0,attrs:{class:"token content"}},[t._v("sha")]),s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),t._v("\n\n    status "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"state"')])]),t._v("       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"description"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" description"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target_url"')])]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://example.com/how-to-signoff"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"context"')])]),t._v("     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"validate/signoff"')])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    HTTParty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("post"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status_url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":body")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":headers")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")])]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/json'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'User-Agent'")])]),t._v("    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tonychacon/signoff'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Authorization'")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"token ')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("#{")]),s("span",{pre:!0,attrs:{class:"token content"}},[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENV")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'TOKEN'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),s("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),s("p",[t._v("希望这相当容易做。 在这个 web 钩子处理器中我们浏览刚刚推送上来的每一个提交，在提交信息中查找字符串 'Signed-off-by' 并且最终使用 HTTP 向 "),s("code",[t._v("/repos///statuses/")]),t._v(" API 接口发送一个带有状态的 POST 请求。")]),t._v(" "),s("p",[t._v("在本例中可以发送一个状态（'success', 'failure', 'error'）、一个发生了什么的描述信息、 一个用户可以了解更多信息的目标 URL 与一个 “context” 以防一个单独的提交有多个状态。 例如，一个测试服务可以提供一个状态与一个类似这样的验证服务也可能提供一个状态 — “context” 字段是用来区别它们的。")]),t._v(" "),s("p",[t._v("如果某人在 GitHub 中打开了一个新的拉取请求并且这个钩子已经设置，会看到类似 "),s("a",{attrs:{href:"ch00/_commit_status"}},[t._v("通过 API 的提交状态")]),t._v(" 的信息。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/scripting-07-status.png",alt:"提交状态"}})]),t._v(" "),s("p",[t._v("Figure 136. 通过 API 的提交状态")]),t._v(" "),s("p",[t._v("现在可以看到一个小的绿色对勾标记在提交信息中有 “Signed-off-by” 的提交旁边，红色的对勾标记在作者忘记签名的提交旁边。 也可以看到 Pull Request 显示在那个分支上的最后提交的状态，如果失败的话会警告你。 如果对测试结果使用这个 API 那么就不会不小心合并某些未通过测试的最新提交。")]),t._v(" "),s("h4",{attrs:{id:"octokit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#octokit"}},[t._v("#")]),t._v(" Octokit")]),t._v(" "),s("p",[t._v("尽管我们在这些例子中都是通过 "),s("code",[t._v("curl")]),t._v(" 与基本的 HTTP 请求来做几乎所有的事情，还有一些以更自然的方式利用 API 的开源库存在着。 在写这篇文章的时候，被支持的语言包括 Go、Objective-C、Ruby 与 .NET。 访问 "),s("a",{attrs:{href:"https://github.com/octokit",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/octokit"),s("OutboundLink")],1),t._v(" 了解更多相关信息，它们帮你处理了更多 HTTP 相关的内容。")]),t._v(" "),s("p",[t._v("希望这些工具能帮助你自定义与修改 GitHub 来更好地为特定的工作流程工作。 关于全部 API 的完整文档与常见任务的指南，请查阅 "),s("a",{attrs:{href:"https://docs.github.com/cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.github.com/cn"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/GitHub-%E7%AE%A1%E7%90%86%E7%BB%84%E7%BB%87",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),s("OutboundLink")],1),t._v(" | "),s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/GitHub-%E6%80%BB%E7%BB%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_6-6-github-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-github-总结"}},[t._v("#")]),t._v(" 6.6 GitHub - 总结")]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("现在你已经是一名 GitHub 用户了。 你知道了如何创建账户、管理组织、创建和推送版本库、向别人的项目提供贡献以及接受别人的贡献。 在下一章中，你将学习更多强有力的工具，以及处理复杂情况的知识，这些将使你成为真正的 Git 大师。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/GitHub-%E8%84%9A%E6%9C%AC-GitHub",target:"_blank",rel:"noopener noreferrer"}},[t._v("prev"),s("OutboundLink")],1),t._v(" | "),s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%80%89%E6%8B%A9%E4%BF%AE%E8%AE%A2%E7%89%88%E6%9C%AC",target:"_blank",rel:"noopener noreferrer"}},[t._v("next"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);