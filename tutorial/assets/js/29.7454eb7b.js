(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{364:function(n,e,a){"use strict";a.r(e);var c=a(15),i=Object(c.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"_7-git-工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-git-工具"}},[n._v("#")]),n._v(" 7 Git 工具")]),n._v(" "),e("h2",{attrs:{id:"_7-1-git-工具-选择修订版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-git-工具-选择修订版本"}},[n._v("#")]),n._v(" 7.1 Git 工具 - 选择修订版本")]),n._v(" "),e("p",[n._v("现在，你已经学习了管理或者维护 Git 仓库、实现代码控制所需的大多数日常命令和工作流程。 你已经尝试了跟踪和提交文件的基本操作，并且掌握了暂存区和轻量级地分支及合并的威力。")]),n._v(" "),e("p",[n._v("接下来你将学习一些 Git 的强大功能，这些功能你可能并不会在日常操作中使用，但在某些时候你可能会需要。")]),n._v(" "),e("h3",{attrs:{id:"选择修订版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择修订版本"}},[n._v("#")]),n._v(" 选择修订版本")]),n._v(" "),e("p",[n._v("Git 能够以多种方式来指定单个提交、一组提交、或者一定范围内的提交。 了解它们并不是必需的，但是了解一下总没坏处。")]),n._v(" "),e("h4",{attrs:{id:"单个修订版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单个修订版本"}},[n._v("#")]),n._v(" 单个修订版本")]),n._v(" "),e("p",[n._v("你可以通过任意一个提交的 40 个字符的完整 SHA-1 散列值来指定它， 不过还有很多更人性化的方式来做同样的事情。本节将会介绍获取单个提交的多种方法。")]),n._v(" "),e("h4",{attrs:{id:"简短的-sha-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简短的-sha-1"}},[n._v("#")]),n._v(" 简短的 SHA-1")]),n._v(" "),e("p",[n._v("Git 十分智能，你只需要提供 SHA-1 的前几个字符就可以获得对应的那次提交， 当然你提供的 SHA-1 字符数量不得少于 4 个，并且没有歧义——也就是说， 当前对象数据库中没有其它对象以这段 SHA-1 开头。")]),n._v(" "),e("p",[n._v("例如，要查看你知道其中添加了某个功能的提交，首先运行 "),e("code",[n._v("git log")]),n._v(" 命令来定位该提交：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git log\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nAuthor: Scott Chacon \nDate:   Fri Jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nMerge: 1c002dd... 35cfb2b...\nAuthor: Scott Chacon \nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'\n\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nAuthor: Scott Chacon \nDate:   Thu Dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n")])])]),e("p",[n._v("在本例中，假设你想要的提交其 SHA-1 以 "),e("code",[n._v("1c002dd…​.")]),n._v(" 开头， 那么你可以用如下几种 "),e("code",[n._v("git show")]),n._v(" 的变体来检视该提交（假设简短的版本没有歧义）：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b\n$ git show 1c002dd4b536e7479f\n$ git show 1c002d\n")])])]),e("p",[n._v("Git 可以为 SHA-1 值生成出简短且唯一的缩写。 如果你在 "),e("code",[n._v("git log")]),n._v(" 后加上 "),e("code",[n._v("--abbrev-commit")]),n._v(" 参数，输出结果里就会显示简短且唯一的值； 默认使用七个字符，不过有时为了避免 SHA-1 的歧义，会增加字符数：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git log --abbrev-commit --pretty=oneline\nca82a6d changed the version number\n085bb3b removed unnecessary test code\na11bef0 first commit\n")])])]),e("p",[n._v("通常 8 到 10 个字符就已经足够在一个项目中避免 SHA-1 的歧义。 例如，到 2019 年 2 月为止，Linux 内核这个相当大的 Git 项目， 其对象数据库中有超过 875,000 个提交，包含七百万个对象，也只需要前 12 个字符就能保证唯一性。")]),n._v(" "),e("p",[n._v("Note")]),n._v(" "),e("p",[n._v("关于 SHA-1 的简短说明")]),n._v(" "),e("p",[n._v("许多人觉得他们的仓库里有可能出现两个不同的对象其 SHA-1 值相同。 然后呢？")]),n._v(" "),e("p",[n._v("如果你真的向仓库里提交了一个对象，它跟之前的某个 "),e("strong",[n._v("不同")]),n._v(" 对象的 SHA-1 值相同， Git 会发现该对象的散列值已经存在于仓库里了，于是就会认为该对象被写入，然后直接使用它。 如果之后你想检出那个对象时，你将得到先前那个对象的数据。")]),n._v(" "),e("p",[n._v("但是这种情况发生的概率十分渺小。 SHA-1 摘要长度是 20 字节，也就是 160 位。 2^80 个随机哈希对象才有 50% 的概率出现一次冲突 （计算冲突机率的公式是 "),e("code",[n._v("p = (n(n-1)/2) * (1/2^160))")]),n._v(" ）。 2^80 是 1.2 x 10^24，也就是一亿亿亿，这是地球上沙粒总数的 1200 倍。")]),n._v(" "),e("p",[n._v("举例说一下怎样才能产生一次 SHA-1 冲突。 如果地球上 65 亿个人类都在编程，每人每秒都在产生等价于整个 Linux 内核历史（650 万个 Git 对象）的代码， 并将之提交到一个巨大的 Git 仓库里面，这样持续两年的时间才会产生足够的对象， 使其拥有 50% 的概率产生一次 SHA-1 对象冲突， 这比你编程团队的成员同一个晚上在互不相干的意外中被狼袭击并杀死的机率还要小。")]),n._v(" "),e("h4",{attrs:{id:"分支引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支引用"}},[n._v("#")]),n._v(" 分支引用")]),n._v(" "),e("p",[n._v("引用特定提交的一种直接方法是，若它是一个分支的顶端的提交， 那么可以在任何需要引用该提交的 Git 命令中直接使用该分支的名称。 例如，你想要查看一个分支的最后一次提交的对象，假设 "),e("code",[n._v("topic1")]),n._v(" 分支指向提交 "),e("code",[n._v("ca82a6d…​")]),n._v(" ， 那么以下的命令是等价的：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git show ca82a6dff817ec66f44342007202690a93763949\n$ git show topic1\n")])])]),e("p",[n._v("如果你想知道某个分支指向哪个特定的 SHA-1，或者想看任何一个例子中被简写的 SHA-1， 你可以使用一个叫做 "),e("code",[n._v("rev-parse")]),n._v(" 的 Git 探测工具。 你可以在 "),e("a",{attrs:{href:"ch00/ch10-git-internals"}},[n._v("Git 内部原理")]),n._v(" 中查看更多关于探测工具的信息。 简单来说，"),e("code",[n._v("rev-parse")]),n._v(" 是为了底层操作而不是日常操作设计的。 不过，有时你想看 Git 现在到底处于什么状态时，它可能会很有用。 你可以在你的分支上执行 "),e("code",[n._v("rev-parse")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git rev-parse topic1\nca82a6dff817ec66f44342007202690a93763949\n")])])]),e("h4",{attrs:{id:"引用日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用日志"}},[n._v("#")]),n._v(" 引用日志")]),n._v(" "),e("p",[n._v("当你在工作时， Git 会在后台保存一个引用日志（reflog）， 引用日志记录了最近几个月你的 HEAD 和分支引用所指向的历史。")]),n._v(" "),e("p",[n._v("你可以使用 "),e("code",[n._v("git reflog")]),n._v(" 来查看引用日志")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git reflog\n734713b HEAD@{0}: commit: fixed refs handling, added gc auto, updated\nd921970 HEAD@{1}: merge phedders/rdocs: Merge made by the 'recursive' strategy.\n1c002dd HEAD@{2}: commit: added some blame and merge stuff\n1c36188 HEAD@{3}: rebase -i (squash): updating HEAD\n95df984 HEAD@{4}: commit: # This is a combination of two commits.\n1c36188 HEAD@{5}: rebase -i (squash): updating HEAD\n7e05da5 HEAD@{6}: rebase -i (pick): updating HEAD\n")])])]),e("p",[n._v("每当你的 HEAD 所指向的位置发生了变化，Git 就会将这个信息存储到引用日志这个历史记录里。 你也可以通过 reflog 数据来获取之前的提交历史。 如果你想查看仓库中 HEAD 在五次前的所指向的提交，你可以使用 "),e("code",[n._v("@{n}")]),n._v(" 来引用 reflog 中输出的提交记录。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git show HEAD@{5}\n")])])]),e("p",[n._v("你同样可以使用这个语法来查看某个分支在一定时间前的位置。 例如，查看你的 "),e("code",[n._v("master")]),n._v(" 分支在昨天的时候指向了哪个提交，你可以输入")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git show master@{yesterday}\n")])])]),e("p",[n._v("就会显示昨天 "),e("code",[n._v("master")]),n._v(" 分支的顶端指向了哪个提交。 这个方法只对还在你引用日志里的数据有用，所以不能用来查好几个月之前的提交。")]),n._v(" "),e("p",[n._v("可以运行 "),e("code",[n._v("git log -g")]),n._v(" 来查看类似于 "),e("code",[n._v("git log")]),n._v(" 输出格式的引用日志信息：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git log -g master\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nReflog: master@{0} (Scott Chacon )\nReflog message: commit: fixed refs handling, added gc auto, updated\nAuthor: Scott Chacon \nDate:   Fri Jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nReflog: master@{1} (Scott Chacon )\nReflog message: merge phedders/rdocs: Merge made by recursive.\nAuthor: Scott Chacon \nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'\n")])])]),e("p",[n._v("值得注意的是，引用日志只存在于本地仓库，它只是一个记录你在 "),e("strong",[n._v("自己")]),n._v(" 的仓库里做过什么的日志。 其他人拷贝的仓库里的引用日志不会和你的相同，而你新克隆一个仓库的时候，引用日志是空的，因为你在仓库里还没有操作。 "),e("code",[n._v("git show HEAD@{2.months.ago}")]),n._v(" 这条命令只有在你克隆了一个项目至少两个月时才会显示匹配的提交—— 如果你刚刚克隆了仓库，那么它将不会有任何结果返回。")]),n._v(" "),e("p",[n._v("Tip")]),n._v(" "),e("p",[n._v("将引用日志想作 Git 版的 shell 历史记录")]),n._v(" "),e("p",[n._v("如果你有 UNIX 或者 Linux 的背景，不妨将引用日志想作 Git 版的 shell 历史记录， 重点在于仅与你和你的会话相关，而与他人无关。")]),n._v(" "),e("h4",{attrs:{id:"祖先引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#祖先引用"}},[n._v("#")]),n._v(" 祖先引用")]),n._v(" "),e("p",[n._v("祖先引用是另一种指明一个提交的方式。 如果你在引用的尾部加上一个 "),e("code",[n._v("^")]),n._v("（脱字符）， Git 会将其解析为该引用的上一个提交。 假设你的提交历史是：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git log --pretty=format:'%h %s' --graph\n* 734713b fixed refs handling, added gc auto, updated tests\n*   d921970 Merge commit 'phedders/rdocs'\n|\\\n| * 35cfb2b Some rdoc changes\n* | 1c002dd added some blame and merge stuff\n|/\n* 1c36188 ignore *.gem\n* 9b29157 add open3_detach to gemspec file list\n")])])]),e("p",[n._v("你可以使用 "),e("code",[n._v("HEAD^")]),n._v(" 来查看上一个提交，也就是 “HEAD 的父提交”：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git show HEAD^\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nMerge: 1c002dd... 35cfb2b...\nAuthor: Scott Chacon \nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'\n")])])]),e("p",[n._v("Note")]),n._v(" "),e("p",[n._v("在 Windows 上转义脱字符")]),n._v(" "),e("p",[n._v("在 Windows 的 "),e("code",[n._v("cmd.exe")]),n._v(" 中，"),e("code",[n._v("^")]),n._v(" 是一个特殊字符，因此需要区别对待。 你可以双写它或者将提交引用放在引号中：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('$ git show HEAD^     # 在 Windows 上无法工作\n$ git show HEAD^^    # 可以\n$ git show "HEAD^"   # 可以\n')])])]),e("p",[n._v("你也可以在 "),e("code",[n._v("^")]),n._v(" 后面添加一个数字来指明想要 "),e("strong",[n._v("哪一个")]),n._v(" 父提交——例如 "),e("code",[n._v("d921970^2")]),n._v(" 代表 “d921970 的第二父提交” 这个语法只适用于合并的提交，因为合并提交会有多个父提交。 合并提交的第一父提交是你合并时所在分支（通常为 "),e("code",[n._v("master")]),n._v("），而第二父提交是你所合并的分支（例如 "),e("code",[n._v("topic")]),n._v("）：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git show d921970^\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nAuthor: Scott Chacon \nDate:   Thu Dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n\n$ git show d921970^2\ncommit 35cfb2b795a55793d7cc56a6cc2060b4bb732548\nAuthor: Paul Hedderly \nDate:   Wed Dec 10 22:22:03 2008 +0000\n\n    Some rdoc changes\n")])])]),e("p",[n._v("另一种指明祖先提交的方法是 "),e("code",[n._v("~")]),n._v("（波浪号）。 同样是指向第一父提交，因此 "),e("code",[n._v("HEAD~")]),n._v(" 和 "),e("code",[n._v("HEAD^")]),n._v(" 是等价的。 而区别在于你在后面加数字的时候。 "),e("code",[n._v("HEAD~2")]),n._v(" 代表“第一父提交的第一父提交”，也就是“祖父提交”——Git 会根据你指定的次数获取对应的第一父提交。 例如，在之前的列出的提交历史中，"),e("code",[n._v("HEAD~3")]),n._v(" 就是")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git show HEAD~3\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nAuthor: Tom Preston-Werner \nDate:   Fri Nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n")])])]),e("p",[n._v("也可以写成 "),e("code",[n._v("HEAD~")]),n._v("，也是第一父提交的第一父提交的第一父提交：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git show HEAD~~~\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nAuthor: Tom Preston-Werner \nDate:   Fri Nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n")])])]),e("p",[n._v("你也可以组合使用这两个语法——你可以通过 "),e("code",[n._v("HEAD~3^2")]),n._v(" 来取得之前引用的第二父提交（假设它是一个合并提交）。")]),n._v(" "),e("h4",{attrs:{id:"提交区间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交区间"}},[n._v("#")]),n._v(" 提交区间")]),n._v(" "),e("p",[n._v("你已经学会如何指定单次的提交，现在来看看如何指明一定区间的提交。 当你有很多分支时，这对管理你的分支十分有用， 你可以用提交区间来解决“这个分支还有哪些提交尚未合并到主分支？”的问题")]),n._v(" "),e("h5",{attrs:{id:"双点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双点"}},[n._v("#")]),n._v(" 双点")]),n._v(" "),e("p",[n._v("最常用的指明提交区间语法是双点。 这种语法可以让 Git 选出在一个分支中而不在另一个分支中的提交。 例如，你有如下的提交历史 "),e("a",{attrs:{href:"ch00/double_dot"}},[n._v("Example history for range selection.")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://juejin.cn/post/book/en/v2/images/double-dot.png",alt:"区间选择的提交历史示例"}})]),n._v(" "),e("p",[n._v("Figure 137. Example history for range selection.")]),n._v(" "),e("p",[n._v("你想要查看 experiment 分支中还有哪些提交尚未被合并入 master 分支。 你可以使用 "),e("code",[n._v("master..experiment")]),n._v(" 来让 Git 显示这些提交。也就是“在 experiment 分支中而不在 master 分支中的提交”。 为了使例子简单明了，我使用了示意图中提交对象的字母来代替真实日志的输出，所以会显示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git log master..experiment\nD\nC\n")])])]),e("p",[n._v("反过来，如果你想查看在 "),e("code",[n._v("master")]),n._v(" 分支中而不在 "),e("code",[n._v("experiment")]),n._v(" 分支中的提交，你只要交换分支名即可。 "),e("code",[n._v("experiment..master")]),n._v(" 会显示在 "),e("code",[n._v("master")]),n._v(" 分支中而不在 "),e("code",[n._v("experiment")]),n._v(" 分支中的提交：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git log experiment..master\nF\nE\n")])])]),e("p",[n._v("这可以让你保持 "),e("code",[n._v("experiment")]),n._v(" 分支跟随最新的进度以及查看你即将合并的内容。 另一个常用的场景是查看你即将推送到远端的内容：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git log origin/master..HEAD\n")])])]),e("p",[n._v("这个命令会输出在你当前分支中而不在远程 "),e("code",[n._v("origin")]),n._v(" 中的提交。 如果你执行 "),e("code",[n._v("git push")]),n._v(" 并且你的当前分支正在跟踪 "),e("code",[n._v("origin/master")]),n._v("，由 "),e("code",[n._v("git log origin/master..HEAD")]),n._v(" 所输出的提交就是会被传输到远端服务器的提交。如果你留空了其中的一边， Git 会默认为 "),e("code",[n._v("HEAD")]),n._v("。 例如， "),e("code",[n._v("git log origin/master..")]),n._v(" 将会输出与之前例子相同的结果 —— Git 使用 HEAD 来代替留空的一边。")]),n._v(" "),e("h5",{attrs:{id:"多点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多点"}},[n._v("#")]),n._v(" 多点")]),n._v(" "),e("p",[n._v("双点语法很好用，但有时候你可能需要两个以上的分支才能确定你所需要的修订， 比如查看哪些提交是被包含在某些分支中的一个，但是不在你当前的分支上。 Git 允许你在任意引用前加上 "),e("code",[n._v("^")]),n._v(" 字符或者 "),e("code",[n._v("--not")]),n._v(" 来指明你不希望提交被包含其中的分支。 因此下列三个命令是等价的：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git log refA..refB\n$ git log ^refA refB\n$ git log refB --not refA\n")])])]),e("p",[n._v("这个语法很好用，因为你可以在查询中指定超过两个的引用，这是双点语法无法实现的。 比如，你想查看所有被 "),e("code",[n._v("refA")]),n._v(" 或 "),e("code",[n._v("refB")]),n._v(" 包含的但是不被 "),e("code",[n._v("refC")]),n._v(" 包含的提交，你可以使用以下任意一个命令：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git log refA refB ^refC\n$ git log refA refB --not refC\n")])])]),e("p",[n._v("这就构成了一个十分强大的修订查询系统，你可以通过它来查看你的分支里包含了哪些东西。")]),n._v(" "),e("h5",{attrs:{id:"三点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三点"}},[n._v("#")]),n._v(" 三点")]),n._v(" "),e("p",[n._v("最后一种主要的区间选择语法是三点，这个语法可以选择出被两个引用 "),e("strong",[n._v("之一")]),n._v(" 包含但又不被两者同时包含的提交。 再看看之前双点例子中的提交历史。 如果你想看 "),e("code",[n._v("master")]),n._v(" 或者 "),e("code",[n._v("experiment")]),n._v(" 中包含的但不是两者共有的提交，你可以执行：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git log master...experiment\nF\nE\nD\nC\n")])])]),e("p",[n._v("这和通常 "),e("code",[n._v("log")]),n._v(" 按日期排序的输出一样，仅仅给出了4个提交的信息。")]),n._v(" "),e("p",[n._v("这种情形下，"),e("code",[n._v("log")]),n._v(" 命令的一个常用参数是 "),e("code",[n._v("--left-right")]),n._v("，它会显示每个提交到底处于哪一侧的分支。 这会让输出数据更加清晰。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git log --left-right master...experiment\n< F\n< E\n> D\n> C\n")])])]),e("p",[n._v("有了这些工具，你就可以十分方便地查看你 Git 仓库中的提交。")]),n._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/book/zh/v2/GitHub-%E6%80%BB%E7%BB%93",target:"_blank",rel:"noopener noreferrer"}},[n._v("prev"),e("OutboundLink")],1),n._v(" | "),e("a",{attrs:{href:"https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98",target:"_blank",rel:"noopener noreferrer"}},[n._v("next"),e("OutboundLink")],1)]),n._v(" "),e("h2",{attrs:{id:"_7-2-git-工具-交互式暂存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-git-工具-交互式暂存"}},[n._v("#")]),n._v(" 7.2 Git 工具 - 交互式暂存")]),n._v(" "),e("h3",{attrs:{id:"交互式暂存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#交互式暂存"}},[n._v("#")]),n._v(" 交互式暂存")]),n._v(" "),e("p",[n._v("本节中的几个交互式 Git 命令可以帮助你将文件的特定部分组合成提交。 当你在修改了大量文件后，希望这些改动能拆分为若干提交而不是混杂在一起成为一个提交时，这几个工具会非常有用。 通过这种方式，可以确保提交是逻辑上独立的变更集，同时也会使其他开发者在与你工作时很容易地审核。 如果运行 "),e("code",[n._v("git add")]),n._v(" 时使用 "),e("code",[n._v("-i")]),n._v(" 或者 "),e("code",[n._v("--interactive")]),n._v(" 选项，Git 将会进入一个交互式终端模式，显示类似下面的东西：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git add -i\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now>\n")])])]),e("p",[n._v("可以看到这个命令以和平时非常不同的视图显示了暂存区——基本上与 "),e("code",[n._v("git status")]),n._v(" 是相同的信息，但是更简明扼要一些。 它将暂存的修改列在左侧，未暂存的修改列在右侧。")]),n._v(" "),e("p",[n._v("在这块区域后是“Commands”命令区域。 在这里你可以做一些工作，包括暂存文件、取消暂存文件、暂存文件的一部分、添加未被追踪的文件、显示暂存内容的区别。")]),n._v(" "),e("h4",{attrs:{id:"暂存与取消暂存文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#暂存与取消暂存文件"}},[n._v("#")]),n._v(" 暂存与取消暂存文件")]),n._v(" "),e("p",[n._v("如果在 "),e("code",[n._v("What now>")]),n._v(" 提示符后键入 "),e("code",[n._v("u")]),n._v(" 或 "),e("code",[n._v("2")]),n._v("（更新），它会问你想要暂存哪个文件：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("What now> u\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nUpdate>>\n")])])]),e("p",[n._v("要暂存 "),e("code",[n._v("TODO")]),n._v(" 和 "),e("code",[n._v("index.html")]),n._v(" 文件，可以输入数字：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Update>> 1,2\n           staged     unstaged path\n* 1:    unchanged        +0/-1 TODO\n* 2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nUpdate>>\n")])])]),e("p",[n._v("每个文件前面的 "),e("code",[n._v("*")]),n._v(" 意味着选中的文件将会被暂存。 如果在 "),e("code",[n._v("Update>>")]),n._v(" 提示符后不输入任何东西并直接按回车，Git 将会暂存之前选择的文件：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Update>>\nupdated 2 paths\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> s\n           staged     unstaged path\n  1:        +0/-1      nothing TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n")])])]),e("p",[n._v("现在可以看到 "),e("code",[n._v("TODO")]),n._v(" 与 "),e("code",[n._v("index.html")]),n._v(" 文件已经被暂存而 "),e("code",[n._v("simplegit.rb")]),n._v(" 文件还未被暂存。 如果这时想要取消暂存 TODO 文件，使用 "),e("code",[n._v("r")]),n._v(" 或 "),e("code",[n._v("3")]),n._v("（撤消）选项：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> r\n           staged     unstaged path\n  1:        +0/-1      nothing TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nRevert>> 1\n           staged     unstaged path\n* 1:        +0/-1      nothing TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nRevert>> [enter]\nreverted one path\n")])])]),e("p",[n._v("再次查看 Git 状态，可以看到已经取消暂存 "),e("code",[n._v("TODO")]),n._v(" 文件：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> s\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n")])])]),e("p",[n._v("如果想要查看已暂存内容的区别，可以使用 "),e("code",[n._v("d")]),n._v(" 或 "),e("code",[n._v("6")]),n._v("（区别）命令。 它会显示暂存文件的一个列表，可以从中选择想要查看的暂存区别。 这跟你在命令行指定 "),e("code",[n._v("git diff --cached")]),n._v(" 非常相似：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> d\n           staged     unstaged path\n  1:        +1/-1      nothing index.html\nReview diff>> 1\ndiff --git a/index.html b/index.html\nindex 4d07108..4335f49 100644\n--- a/index.html\n+++ b/index.html\n@@ -16,7 +16,7 @@ Date Finder\n\n ...\n\n-contact : support@github.com\n+contact : email.support@github.com\n\n </code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>通过这些基本命令，可以使用交互式添加模式来轻松地处理暂存区。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_暂存补丁">暂存补丁</h4>\n<div class="paragraph">\n<p>Git 也可以暂存文件的特定部分。\n例如，如果在 simplegit.rb 文件中做了两处修改，但只想要暂存其中的一个而不是另一个，Git 会帮你轻松地完成。\n在和上一节一样的交互式提示符中，输入 <code>p</code> 或 <code>5</code>（补丁）。\nGit 会询问你想要部分暂存哪些文件；然后，对已选择文件的每一个部分，它都会一个个地显示文件区别并询问你是否想要暂存它们：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">diff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex dd5ecc4..57399e0 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -22,7 +22,7 @@ class SimpleGit\n   end\n\n   def log(treeish = \'master\')\n-    command("git log -n 25 #{treeish}")\n+    command("git log -n 30 #{treeish}")\n   end\n\n   def blame(path)\nStage this hunk [y,n,a,d,/,j,J,g,e,?]?</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这时有很多选项。\n输入 <code>?</code> 显示所有可以使用的命令列表：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">Stage this hunk [y,n,a,d,/,j,J,g,e,?]? ?\ny - stage this hunk\nn - do not stage this hunk\na - stage this and all the remaining hunks in the file\nd - do not stage this hunk nor any of the remaining hunks in the file\ng - select a hunk to go to\n/ - search for a hunk matching the given regex\nj - leave this hunk undecided, see next undecided hunk\nJ - leave this hunk undecided, see next hunk\nk - leave this hunk undecided, see previous undecided hunk\nK - leave this hunk undecided, see previous hunk\ns - split the current hunk into smaller hunks\ne - manually edit the current hunk\n? - print help</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>通常情况下可以输入 <code>y</code> 或 <code>n</code> 来选择是否要暂存每一个区块，\n当然，暂存特定文件中的所有部分或为之后的选择跳过一个区块也是非常有用的。\n如果你只暂存文件的一部分，状态输出可能会像下面这样：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">What now> 1\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:        +1/-1      nothing index.html\n  3:        +1/-1        +4/-0 lib/simplegit.rb</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p><code>simplegit.rb</code> 文件的状态很有趣。\n它显示出若干行被暂存与若干行未被暂存。\n已经部分地暂存了这个文件。\n在这时，可以退出交互式添加脚本并且运行 <code>git commit</code> 来提交部分暂存的文件。</p>\n</div>\n<div class="paragraph">\n<p>也可以不必在交互式添加模式中做部分文件暂存——可以在命令行中使用 <code>git add -p</code> 或 <code>git add --patch</code> 来启动同样的脚本。</p>\n</div>\n<div class="paragraph">\n<p>更进一步地，可以使用 <code>git reset --patch</code> 命令的补丁模式来部分重置文件，\n通过 <code>git checkout --patch</code> 命令来部分检出文件与 <code>git stash save --patch</code> 命令来部分暂存文件。\n我们将会在接触这些命令的高级使用方法时了解更多详细信息。</p>\n</div>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%80%89%E6%8B%A9%E4%BF%AE%E8%AE%A2%E7%89%88%E6%9C%AC">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E8%B4%AE%E8%97%8F%E4%B8%8E%E6%B8%85%E7%90%86">next</a></div></div>\n\n\n    <h2>7.3 Git 工具 - 贮藏与清理</h2>\n  <div>\n<h3 id="_git_stashing">贮藏与清理</h3>\n<div class="paragraph">\n<p>有时，当你在项目的一部分上已经工作一段时间后，所有东西都进入了混乱的状态，\n而这时你想要切换到另一个分支做一点别的事情。\n问题是，你不想仅仅因为过会儿回到这一点而为做了一半的工作创建一次提交。\n针对这个问题的答案是 <code>git stash</code> 命令。</p>\n</div>\n<div class="paragraph">\n<p>贮藏（stash）会处理工作目录的脏的状态——即跟踪文件的修改与暂存的改动——然后将未完成的修改保存到一个栈上，\n而你可以在任何时候重新应用这些改动（甚至在不同的分支上）。</p>\n</div>\n<div class="admonitionblock note">\n<table>\n<tbody><tr>\n<td class="icon">\n<div class="title">Note</div>\n</td>\n<td class="content">\n<div class="title">迁移到 <code>git stash push</code>\n</div>\n<div class="paragraph">\n<p>截至 2017 年 10 月下旬，Git 邮件列表上进行了广泛讨论，该讨论中弃用了 <code>git stash save</code> 命令，\n代之以现有 <code>git stash push</code> 命令。主因是 <code>git stash push</code> 引入了贮藏选定的 <strong>路径规范</strong> 的选项，\n而有些东西 <code>git stash save</code> 不支持。</p>\n</div>\n<div class="paragraph">\n<p><code>git stash save</code> 不会很快就消失，所以不用担心它突然不见。\n不过你可能想要迁移到 <code>push</code> 来获取新功能。</p>\n</div>\n</td>\n</tr>\n</tbody></table>\n</div>\n<div class="sect3">\n<h4 id="_贮藏工作">贮藏工作</h4>\n<div class="paragraph">\n<p>为了演示贮藏，你需要进入项目并改动几个文件，然后可以暂存其中的一个改动。\n如果运行 <code>git status</code>，可以看到有改动的状态：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git status\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n\tmodified:   index.html\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n\tmodified:   lib/simplegit.rb</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在想要切换分支，但是还不想要提交之前的工作；所以贮藏修改。\n将新的贮藏推送到栈上，运行 <code>git stash</code> 或 <code>git stash push</code>：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git stash\nSaved working directory and index state \\\n  "WIP on master: 049d078 added the index file"\nHEAD is now at 049d078 added the index file\n(To restore them type "git stash apply")</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>可以看到工作目录是干净的了：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git status\n# On branch master\nnothing to commit, working directory clean</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>此时，你可以切换分支并在其他地方工作；你的修改被存储在栈上。\n要查看贮藏的东西，可以使用 <code>git stash list</code>：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git stash list\nstash@{0}: WIP on master: 049d078 added the index file\nstash@{1}: WIP on master: c264051 Revert "added file_size"\nstash@{2}: WIP on master: 21d80a5 added number to log</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>在本例中，有两个之前的贮藏，所以你接触到了三个不同的贮藏工作。\n可以通过原来 stash 命令的帮助提示中的命令将你刚刚贮藏的工作重新应用：<code>git stash apply</code>。\n如果想要应用其中一个更旧的贮藏，可以通过名字指定它，像这样：<code>git stash apply stash@{2}</code>。\n如果不指定一个贮藏，Git 认为指定的是最近的贮藏：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git stash apply\nOn branch master\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n\tmodified:   index.html\n\tmodified:   lib/simplegit.rb\n\nno changes added to commit (use "git add" and/or "git commit -a")</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>可以看到 Git 重新修改了当你保存贮藏时撤消的文件。\n在本例中，当尝试应用贮藏时有一个干净的工作目录，并且尝试将它应用在保存它时所在的分支。\n并不是必须要有一个干净的工作目录，或者要应用到同一分支才能成功应用贮藏。\n可以在一个分支上保存一个贮藏，切换到另一个分支，然后尝试重新应用这些修改。\n当应用贮藏时工作目录中也可以有修改与未提交的文件——如果有任何东西不能干净地应用，Git 会产生合并冲突。</p>\n</div>\n<div class="paragraph">\n<p>文件的改动被重新应用了，但是之前暂存的文件却没有重新暂存。\n想要那样的话，必须使用 <code>--index</code> 选项来运行 <code>git stash apply</code> 命令，来尝试重新应用暂存的修改。\n如果已经那样做了，那么你将回到原来的位置：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git stash apply --index\nOn branch master\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n\tmodified:   index.html\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n\tmodified:   lib/simplegit.rb</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>应用选项只会尝试应用贮藏的工作——在堆栈上还有它。\n可以运行 <code>git stash drop</code> 加上将要移除的贮藏的名字来移除它：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git stash list\nstash@{0}: WIP on master: 049d078 added the index file\nstash@{1}: WIP on master: c264051 Revert "added file_size"\nstash@{2}: WIP on master: 21d80a5 added number to log\n$ git stash drop stash@{0}\nDropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>也可以运行 <code>git stash pop</code> 来应用贮藏然后立即从栈上扔掉它。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_贮藏的创意性使用">贮藏的创意性使用</h4>\n<div class="paragraph">\n<p>有几个贮藏的变种可能也很有用。\n第一个非常流行的选项是 <code>git stash</code> 命令的 <code>--keep-index</code> 选项。\n它告诉 Git 不仅要贮藏所有已暂存的内容，同时还要将它们保留在索引中。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git status -s\nM  index.html\n M lib/simplegit.rb\n\n$ git stash --keep-index\nSaved working directory and index state WIP on master: 1b65b17 added the index file\nHEAD is now at 1b65b17 added the index file\n\n$ git status -s\nM  index.html</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>另一个经常使用贮藏来做的事情是像贮藏跟踪文件一样贮藏未跟踪文件。\n默认情况下，<code>git stash</code> 只会贮藏已修改和暂存的 <strong>已跟踪</strong> 文件。\n如果指定 <code>--include-untracked</code> 或 <code>-u</code> 选项，Git 也会贮藏任何未跟踪文件。\n然而，在贮藏中包含未跟踪的文件仍然不会包含明确 <strong>忽略</strong> 的文件。\n要额外包含忽略的文件，请使用 <code>--all</code> 或 <code>-a</code> 选项。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git status -s\nM  index.html\n M lib/simplegit.rb\n?? new-file.txt\n\n$ git stash -u\nSaved working directory and index state WIP on master: 1b65b17 added the index file\nHEAD is now at 1b65b17 added the index file\n\n$ git status -s\n$</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>最终，如果指定了 <code>--patch</code> 标记，Git 不会贮藏所有修改过的任何东西，\n但是会交互式地提示哪些改动想要贮藏、哪些改动需要保存在工作目录中。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git stash --patch\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex 66d332e..8bb5674 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -16,6 +16,10 @@ class SimpleGit\n         return `#{git_cmd} 2>&1`.chomp\n       end\n     end\n+\n+    def show(treeish = \'master\')\n+      command("git show #{treeish}")\n+    end\n\n end\n test\nStash this hunk [y,n,q,a,d,/,e,?]? y\n\nSaved working directory and index state WIP on master: 1b65b17 added the index file</code></pre>\n</div>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_从贮藏创建一个分支">从贮藏创建一个分支</h4>\n<div class="paragraph">\n<p>如果贮藏了一些工作，将它留在那儿了一会儿，然后继续在贮藏的分支上工作，在重新应用工作时可能会有问题。\n如果应用尝试修改刚刚修改的文件，你会得到一个合并冲突并不得不解决它。\n如果想要一个轻松的方式来再次测试贮藏的改动，可以运行 <code>git stash branch <new branchname></code>\n以你指定的分支名创建一个新分支，检出贮藏工作时所在的提交，重新在那应用工作，然后在应用成功后丢弃贮藏：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git stash branch testchanges\nM\tindex.html\nM\tlib/simplegit.rb\nSwitched to a new branch \'testchanges\'\nOn branch testchanges\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n\tmodified:   index.html\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n\tmodified:   lib/simplegit.rb\n\nDropped refs/stash@{0} (29d385a81d163dfd45a452a2ce816487a6b8b014)</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这是在新分支轻松恢复贮藏工作并继续工作的一个很不错的途径。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_git_clean">清理工作目录</h4>\n<div class="paragraph">\n<p>对于工作目录中一些工作或文件，你想做的也许不是贮藏而是移除。\n<code>git clean</code> 命令就是用来干这个的。</p>\n</div>\n<div class="paragraph">\n<p>清理工作目录有一些常见的原因，比如说为了移除由合并或外部工具生成的东西，\n或是为了运行一个干净的构建而移除之前构建的残留。</p>\n</div>\n<div class="paragraph">\n<p>你需要谨慎地使用这个命令，因为它被设计为从工作目录中移除未被追踪的文件。\n如果你改变主意了，你也不一定能找回来那些文件的内容。\n一个更安全的选项是运行 <code>git stash --all</code> 来移除每一样东西并存放在栈中。</p>\n</div>\n<div class="paragraph">\n<p>你可以使用 <code>git clean</code> 命令去除冗余文件或者清理工作目录。\n使用 <code>git clean -f -d</code> 命令来移除工作目录中所有未追踪的文件以及空的子目录。\n<code>-f</code> 意味着“强制（force）”或“确定要移除”，使用它需要 Git 配置变量 <code>clean.requireForce</code> 没有显式设置为 <code>false</code>。</p>\n</div>\n<div class="paragraph">\n<p>如果只是想要看看它会做什么，可以使用 <code>--dry-run</code> 或 <code>-n</code> 选项来运行命令，\n这意味着“做一次演习然后告诉你 <strong>将要</strong> 移除什么”。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git clean -d -n\nWould remove test.o\nWould remove tmp/</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>默认情况下，<code>git clean</code> 命令只会移除没有忽略的未跟踪文件。\n任何与 <code>.gitignore</code> 或其他忽略文件中的模式匹配的文件都不会被移除。\n如果你也想要移除那些文件，例如为了做一次完全干净的构建而移除所有由构建生成的 <code>.o</code> 文件，\n可以给 clean 命令增加一个 <code>-x</code> 选项。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git status -s\n M lib/simplegit.rb\n?? build.TMP\n?? tmp/\n\n$ git clean -n -d\nWould remove build.TMP\nWould remove tmp/\n\n$ git clean -n -d -x\nWould remove build.TMP\nWould remove test.o\nWould remove tmp/</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果不知道 <code>git clean</code> 命令将会做什么，在将 <code>-n</code> 改为 <code>-f</code> 来真正做之前总是先用 <code>-n</code> 来运行它做双重检查。\n另一个小心处理过程的方式是使用 <code>-i</code> 或 “interactive” 标记来运行它。</p>\n</div>\n<div class="paragraph">\n<p>这将会以交互模式运行 clean 命令。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git clean -x -i\nWould remove the following items:\n  build.TMP  test.o\n*** Commands ***\n    1: clean                2: filter by pattern    3: select by numbers    4: ask each             5: quit\n    6: help\nWhat now></code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这种方式下可以分别地检查每一个文件或者交互地指定删除的模式。</p>\n</div>\n<div class="admonitionblock note">\n<table>\n<tbody><tr>\n<td class="icon">\n<div class="title">Note</div>\n</td>\n<td class="content">\n<div class="paragraph">\n<p>在一种奇怪的情况下，可能需要格外用力才能让 Git 清理你的工作目录。\n如果你恰好在工作目录中复制或克隆了其他 Git 仓库（可能是子模块），那么即便是\n<code>git clean -fd</code> 都会拒绝删除这些目录。这种情况下，你需要加上第二个 <code>-f</code> 选项来强调。</p>\n</div>\n</td>\n</tr>\n</tbody></table>\n</div>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E7%AD%BE%E7%BD%B2%E5%B7%A5%E4%BD%9C">next</a></div></div>\n\n\n    <h2>7.4 Git 工具 - 签署工作</h2>\n  <div>\n<h3 id="_signing">签署工作</h3>\n<div class="paragraph">\n<p>Git 虽然是密码级安全的，但它不是万无一失的。\n如果你从因特网上的其他人那里拿取工作，并且想要验证提交是不是真正地来自于可信来源，\nGit 提供了几种通过 GPG 来签署和验证工作的方式。</p>\n</div>\n<div class="sect3">\n<h4 id="_gpg_介绍">GPG 介绍</h4>\n<div class="paragraph">\n<p>首先，在开始签名之前你需要先配置 GPG 并安装个人密钥。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ gpg --list-keys\n/Users/schacon/.gnupg/pubring.gpg\n---------------------------------\npub   2048R/0A46826A 2014-06-04\nuid                  Scott Chacon (Git signing key) <schacon@gmail.com>\nsub   2048R/874529A9 2014-06-04</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果你还没有安装一个密钥，可以使用 <code>gpg --gen-key</code> 生成一个。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ gpg --gen-key</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>一旦你有一个可以签署的私钥，可以通过设置 Git 的 <code>user.signingkey</code> 选项来签署。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git config --global user.signingkey 0A46826A</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在 Git 默认使用你的密钥来签署标签与提交。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_签署标签">签署标签</h4>\n<div class="paragraph">\n<p>如果已经设置好一个 GPG 私钥，可以使用它来签署新的标签。\n所有需要做的只是使用 <code>-s</code> 代替 <code>-a</code> 即可：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git tag -s v1.5 -m \'my signed 1.5 tag\'\n\nYou need a passphrase to unlock the secret key for\nuser: "Ben Straub <ben@straub.cc>"\n2048-bit RSA key, ID 800430EB, created 2014-05-04</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果在那个标签上运行 <code>git show</code>，会看到你的 GPG 签名附属在后面：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git show v1.5\ntag v1.5\nTagger: Ben Straub <ben@straub.cc>\nDate:   Sat May 3 20:29:41 2014 -0700\n\nmy signed 1.5 tag\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJTZbQlAAoJEF0+sviABDDrZbQH/09PfE51KPVPlanr6q1v4/Ut\nLQxfojUWiLQdg2ESJItkcuweYg+kc3HCyFejeDIBw9dpXt00rY26p05qrpnG+85b\nhM1/PswpPLuBSr+oCIDj5GMC2r2iEKsfv2fJbNW8iWAXVLoWZRF8B0MfqX/YTMbm\necorc4iXzQu7tupRihslbNkfvfciMnSDeSvzCpWAHl7h8Wj6hhqePmLm9lAYqnKp\n8S5B/1SSQuEAjRZgI4IexpZoeKGVDptPHxLLS38fozsyi0QyDyzEgJxcJQVMXxVi\nRUysgqjcpT8+iQM1PblGfHR4XAhuOqN5Fx06PSaFZhqvWFezJ28/CLyX5q+oIVk=\n=EFTF\n-----END PGP SIGNATURE-----\n\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n    changed the version number</code></pre>\n</div>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_验证标签">验证标签</h4>\n<div class="paragraph">\n<p>要验证一个签署的标签，可以运行 <code>git tag -v <tag-name></code>。\n这个命令使用 GPG 来验证签名。\n为了验证能正常工作，签署者的公钥需要在你的钥匙链中。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git tag -v v1.4.2.1\nobject 883653babd8ee7ea23e6a5c392bb739348b1eb61\ntype commit\ntag v1.4.2.1\ntagger Junio C Hamano <junkio@cox.net> 1158138501 -0700\n\nGIT 1.4.2.1\n\nMinor fixes since 1.4.2, including git-mv and git-http with alternates.\ngpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A\ngpg: Good signature from "Junio C Hamano <junkio@cox.net>"\ngpg:                 aka "[jpeg image of size 1513]"\nPrimary key fingerprint: 3565 2A26 2040 E066 C9A7  4A7D C0C6 D9A4 F311 9B9A</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果没有签署者的公钥，那么你将会得到类似下面的东西：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A\ngpg: Can\'t check signature: public key not found\nerror: could not verify the tag \'v1.4.2.1\'</code></pre>\n</div>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_signing_commits">签署提交</h4>\n<div class="paragraph">\n<p>在最新版本的 Git 中（v1.7.9 及以上），也可以签署个人提交。\n如果相对于标签而言你对直接签署到提交更感兴趣的话，所有要做的只是增加一个 <code>-S</code> 到 <code>git commit</code> 命令。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git commit -a -S -m \'signed commit\'\n\nYou need a passphrase to unlock the secret key for\nuser: "Scott Chacon (Git signing key) <schacon@gmail.com>"\n2048-bit RSA key, ID 0A46826A, created 2014-06-04\n\n[master 5c3386c] signed commit\n 4 files changed, 4 insertions(+), 24 deletions(-)\n rewrite Rakefile (100%)\n create mode 100644 lib/git.rb</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p><code>git log</code> 也有一个 <code>--show-signature</code> 选项来查看及验证这些签名。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --show-signature -1\ncommit 5c3386cf54bba0a33a32da706aa52bc0155503c2\ngpg: Signature made Wed Jun  4 19:49:17 2014 PDT using RSA key ID 0A46826A\ngpg: Good signature from "Scott Chacon (Git signing key) <schacon@gmail.com>"\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Wed Jun 4 19:49:17 2014 -0700\n\n    signed commit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>另外，也可以配置 <code>git log</code> 来验证任何找到的签名并将它们以 <code>%G?</code> 格式列在输出中。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --pretty="format:%h %G? %aN  %s"\n\n5c3386c G Scott Chacon  signed commit\nca82a6d N Scott Chacon  changed the version number\n085bb3b N Scott Chacon  removed unnecessary test code\na11bef0 N Scott Chacon  first commit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这里我们可以看到只有最后一次提交是签署并有效的，而之前的提交都不是。</p>\n</div>\n<div class="paragraph">\n<p>在 Git 1.8.3 及以后的版本中，<code>git merge</code> 与 <code>git pull</code> 可以使用\n<code>--verify-signatures</code> 选项来检查并拒绝没有携带可信 GPG 签名的提交。</p>\n</div>\n<div class="paragraph">\n<p>如果使用这个选项来合并一个包含未签名或有效的提交的分支时，合并不会生效。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git merge --verify-signatures non-verify\nfatal: Commit ab06180 does not have a GPG signature.</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果合并包含的只有有效的签名的提交，合并命令会提示所有的签名它已经检查过了然后会继续向前。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git merge --verify-signatures signed-branch\nCommit 13ad65e has a good GPG signature by Scott Chacon (Git signing key) <schacon@gmail.com>\nUpdating 5c3386c..13ad65e\nFast-forward\n README | 2 ++\n 1 file changed, 2 insertions(+)</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>也可以给 <code>git merge</code> 命令附加 <code>-S</code> 选项来签署自己生成的合并提交。\n下面的例子演示了验证将要合并的分支的每一个提交都是签名的并且签署最后生成的合并提交。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git merge --verify-signatures -S  signed-branch\nCommit 13ad65e has a good GPG signature by Scott Chacon (Git signing key) <schacon@gmail.com>\n\nYou need a passphrase to unlock the secret key for\nuser: "Scott Chacon (Git signing key) <schacon@gmail.com>"\n2048-bit RSA key, ID 0A46826A, created 2014-06-04\n\nMerge made by the \'recursive\' strategy.\n README | 2 ++\n 1 file changed, 2 insertions(+)</code></pre>\n</div>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_每个人必须签署">每个人必须签署</h4>\n<div class="paragraph">\n<p>签署标签与提交很棒，但是如果决定在正常的工作流程中使用它，你必须确保团队中的每一个人都理解如何这样做。\n如果没有，你将会花费大量时间帮助其他人找出并用签名的版本重写提交。\n在采用签署成为标准工作流程的一部分前，确保你完全理解 GPG 及签署带来的好处。</p>\n</div>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E8%B4%AE%E8%97%8F%E4%B8%8E%E6%B8%85%E7%90%86">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E6%90%9C%E7%B4%A2">next</a></div></div>\n\n\n    <h2>7.5 Git 工具 - 搜索</h2>\n  <div>\n<h3 id="_searching">搜索</h3>\n<div class="paragraph">\n<p>无论仓库里的代码量有多少，你经常需要查找一个函数是在哪里调用或者定义的，或者显示一个方法的变更历史。\nGit 提供了两个有用的工具来快速地从它的数据库中浏览代码和提交。\n我们来简单的看一下。</p>\n</div>\n<div class="sect3">\n<h4 id="_git_grep">Git Grep</h4>\n<div class="paragraph">\n<p>Git 提供了一个 <code>grep</code> 命令，你可以很方便地从提交历史、工作目录、甚至索引中查找一个字符串或者正则表达式。\n我们用 Git 本身源代码的查找作为例子。</p>\n</div>\n<div class="paragraph">\n<p>默认情况下 <code>git grep</code> 会查找你工作目录的文件。\n第一种变体是，你可以传递 <code>-n</code> 或 <code>--line-number</code> 选项数来输出 Git 找到的匹配行的行号。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git grep -n gmtime_r\ncompat/gmtime.c:3:#undef gmtime_r\ncompat/gmtime.c:8:      return git_gmtime_r(timep, &result);\ncompat/gmtime.c:11:struct tm *git_gmtime_r(const time_t *timep, struct tm *result)\ncompat/gmtime.c:16:     ret = gmtime_r(timep, result);\ncompat/mingw.c:826:struct tm *gmtime_r(const time_t *timep, struct tm *result)\ncompat/mingw.h:206:struct tm *gmtime_r(const time_t *timep, struct tm *result);\ndate.c:482:             if (gmtime_r(&now, &now_tm))\ndate.c:545:             if (gmtime_r(&time, tm)) {\ndate.c:758:             /* gmtime_r() in match_digit() may have clobbered it */\ngit-compat-util.h:1138:struct tm *git_gmtime_r(const time_t *, struct tm *);\ngit-compat-util.h:1140:#define gmtime_r git_gmtime_r</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>除了上面的基本搜索命令外，<code>git grep</code> 还支持大量其它有趣的选项。</p>\n</div>\n<div class="paragraph">\n<p>例如，若不想打印所有匹配的项，你可以使用 <code>-c</code> 或 <code>--count</code> 选项来让 <code>git grep</code> 输出概述的信息，\n其中仅包括那些包含匹配字符串的文件，以及每个文件中包含了多少个匹配。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git grep --count gmtime_r\ncompat/gmtime.c:4\ncompat/mingw.c:1\ncompat/mingw.h:1\ndate.c:3\ngit-compat-util.h:2</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果你还关心搜索字符串的 <strong>上下文</strong>，那么可以传入 <code>-p</code> 或 <code>--show-function</code>\n选项来显示每一个匹配的字符串所在的方法或函数：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git grep -p gmtime_r *.c\ndate.c=static int match_multi_number(timestamp_t num, char c, const char *date,\ndate.c:         if (gmtime_r(&now, &now_tm))\ndate.c=static int match_digit(const char *date, struct tm *tm, int *offset, int *tm_gmt)\ndate.c:         if (gmtime_r(&time, tm)) {\ndate.c=int parse_date_basic(const char *date, timestamp_t *timestamp, int *offset)\ndate.c:         /* gmtime_r() in match_digit() may have clobbered it */</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如你所见，date.c 文件中的 <code>match_multi_number</code> 和 <code>match_digit</code> 两个函数都调用了 <code>gmtime_r</code> 例程\n（第三个显示的匹配只是注释中的字符串）。</p>\n</div>\n<div class="paragraph">\n<p>你还可以使用 <code>--and</code> 标志来查看复杂的字符串组合，它确保了多个匹配出现在同一文本行中。\n比如，我们要查看在旧版本 1.8.0 的 Git 代码库中定义了常量名包含 “LINK” 或者 “BUF_MAX” 这两个字符串的行\n（这里也用到了 <code>--break</code> 和 <code>--heading</code> 选项来使输出更加容易阅读）。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git grep --break --heading \\\n    -n -e \'#define\' --and \\( -e LINK -e BUF_MAX \\) v1.8.0\nv1.8.0:builtin/index-pack.c\n62:#define FLAG_LINK (1u<<20)\n\nv1.8.0:cache.h\n73:#define S_IFGITLINK  0160000\n74:#define S_ISGITLINK(m)       (((m) & S_IFMT) == S_IFGITLINK)\n\nv1.8.0:environment.c\n54:#define OBJECT_CREATION_MODE OBJECT_CREATION_USES_HARDLINKS\n\nv1.8.0:strbuf.c\n326:#define STRBUF_MAXLINK (2*PATH_MAX)\n\nv1.8.0:symlinks.c\n53:#define FL_SYMLINK  (1 << 2)\n\nv1.8.0:zlib.c\n30:/* #define ZLIB_BUF_MAX ((uInt)-1) */\n31:#define ZLIB_BUF_MAX ((uInt) 1024 * 1024 * 1024) /* 1GB */</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>相比于一些常用的搜索命令比如 <code>grep</code> 和 <code>ack</code>，<code>git grep</code> 命令有一些的优点。\n第一就是速度非常快，第二是你不仅仅可以可以搜索工作目录，还可以搜索任意的 Git 树。\n在上一个例子中，我们在一个旧版本的 Git 源代码中查找，而不是当前检出的版本。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_git_日志搜索">Git 日志搜索</h4>\n<div class="paragraph">\n<p>或许你不想知道某一项在 <strong>哪里</strong> ，而是想知道是什么 <strong>时候</strong> 存在或者引入的。\n<code>git log</code> 命令有许多强大的工具可以通过提交信息甚至是 diff 的内容来找到某个特定的提交。</p>\n</div>\n<div class="paragraph">\n<p>例如，如果我们想找到 <code>ZLIB_BUF_MAX</code> 常量是什么时候引入的，我们可以使用 <code>-S</code> 选项\n（在 Git 中俗称“鹤嘴锄（pickaxe）”选项）来显示新增和删除该字符串的提交。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log -S ZLIB_BUF_MAX --oneline\ne01503b zlib: allow feeding more than 4GB in one go\nef49a7a zlib: zlib can only process 4GB at a time</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果我们查看这些提交的 diff，我们可以看到在 <code>ef49a7a</code> 这个提交引入了常量，并且在 <code>e01503b</code> 这个提交中被修改了。</p>\n</div>\n<div class="paragraph">\n<p>如果你希望得到更精确的结果，你可以使用 <code>-G</code> 选项来使用正则表达式搜索。</p>\n</div>\n<div class="sect4">\n<h5 id="_行日志搜索">行日志搜索</h5>\n<div class="paragraph">\n<p>行日志搜索是另一个相当高级并且有用的日志搜索功能。\n在 <code>git log</code> 后加上 <code>-L</code> 选项即可调用，它可以展示代码中一行或者一个函数的历史。</p>\n</div>\n<div class="paragraph">\n<p>例如，假设我们想查看 <code>zlib.c</code> 文件中 <code>git_deflate_bound</code> 函数的每一次变更，\n我们可以执行 <code>git log -L :git_deflate_bound:zlib.c</code>。\nGit 会尝试找出这个函数的范围，然后查找历史记录，并且显示从函数创建之后一系列变更对应的补丁。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log -L :git_deflate_bound:zlib.c\ncommit ef49a7a0126d64359c974b4b3b71d7ad42ee3bca\nAuthor: Junio C Hamano <gitster@pobox.com>\nDate:   Fri Jun 10 11:52:15 2011 -0700\n\n    zlib: zlib can only process 4GB at a time\n\ndiff --git a/zlib.c b/zlib.c\n--- a/zlib.c\n+++ b/zlib.c\n@@ -85,5 +130,5 @@\n-unsigned long git_deflate_bound(z_streamp strm, unsigned long size)\n+unsigned long git_deflate_bound(git_zstream *strm, unsigned long size)\n {\n-       return deflateBound(strm, size);\n+       return deflateBound(&strm->z, size);\n }\n\n\ncommit 225a6f1068f71723a910e8565db4e252b3ca21fa\nAuthor: Junio C Hamano <gitster@pobox.com>\nDate:   Fri Jun 10 11:18:17 2011 -0700\n\n    zlib: wrap deflateBound() too\n\ndiff --git a/zlib.c b/zlib.c\n--- a/zlib.c\n+++ b/zlib.c\n@@ -81,0 +85,5 @@\n+unsigned long git_deflate_bound(z_streamp strm, unsigned long size)\n+{\n+       return deflateBound(strm, size);\n+}\n+</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果 Git 无法计算出如何匹配你代码中的函数或者方法，你可以提供一个正则表达式。\n例如，这个命令和上面的是等同的：<code>git log -L \'/unsigned long git_deflate_bound/\',/^}/:zlib.c</code>。\n你也可以提供单行或者一个范围的行号来获得相同的输出。</p>\n</div>\n</div>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E7%AD%BE%E7%BD%B2%E5%B7%A5%E4%BD%9C">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2">next</a></div></div>\n\n\n    <h2>7.6 Git 工具 - 重写历史</h2>\n  <div>\n<h3 id="_rewriting_history">重写历史</h3>\n<div class="paragraph">\n<p>许多时候，在使用 Git 时，你可能想要修订提交历史。\nGit 很棒的一点是它允许你在最后时刻做决定。\n你可以在将暂存区内容提交前决定哪些文件进入提交，可以通过 <code>git stash</code> 来决定不与某些内容工作，\n也可以重写已经发生的提交就像它们以另一种方式发生的一样。\n这可能涉及改变提交的顺序，改变提交中的信息或修改文件，将提交压缩或是拆分，\n或完全地移除提交——在将你的工作成果与他人共享之前。</p>\n</div>\n<div class="paragraph">\n<p>在本节中，你可以学到如何完成这些工作，这样在与他人分享你的工作成果时你的提交历史将如你所愿地展示出来。</p>\n</div>\n<div class="admonitionblock note">\n<table>\n<tbody><tr>\n<td class="icon">\n<div class="title">Note</div>\n</td>\n<td class="content">\n<div class="title">在满意之前不要推送你的工作</div>\n<div class="paragraph">\n<p>Git 的基本原则之一是，由于克隆中有很多工作是本地的，因此你可以 <strong>在本地</strong> 随便重写历史记录。\n然而一旦推送了你的工作，那就完全是另一回事了，除非你有充分的理由进行更改，否则应该将推送的工作视为最终结果。\n简而言之，在对它感到满意并准备与他人分享之前，应当避免推送你的工作。</p>\n</div>\n</td>\n</tr>\n</tbody></table>\n</div>\n<div class="sect3">\n<h4 id="_git_amend">修改最后一次提交</h4>\n<div class="paragraph">\n<p>修改你最近一次提交可能是所有修改历史提交的操作中最常见的一个。\n对于你的最近一次提交，你往往想做两件事情：简单地修改提交信息，\n或者通过添加、移除或修改文件来更改提交实际的内容。</p>\n</div>\n<div class="paragraph">\n<p>如果，你只是想修改最近一次提交的提交信息，那么很简单：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git commit --amend</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>上面这条命令会将最后一次的提交信息载入到编辑器中供你修改。\n当保存并关闭编辑器后，编辑器会将更新后的提交信息写入新提交中，它会成为新的最后一次提交。</p>\n</div>\n<div class="paragraph">\n<p>另一方面，如果你想要修改最后一次提交的实际内容，那么流程很相似：首先作出你想要补上的修改，\n暂存它们，然后用 <code>git commit --amend</code> 以新的改进后的提交来 <strong>替换</strong> 掉旧有的最后一次提交，</p>\n</div>\n<div class="paragraph">\n<p>使用这个技巧的时候需要小心，因为修正会改变提交的 SHA-1 校验和。\n它类似于一个小的变基——如果已经推送了最后一次提交就不要修正它。</p>\n</div>\n<div class="admonitionblock tip">\n<table>\n<tbody><tr>\n<td class="icon">\n<div class="title">Tip</div>\n</td>\n<td class="content">\n<div class="title">修补后的提交可能需要修补提交信息</div>\n<div class="paragraph">\n<p>当你在修补一次提交时，可以同时修改提交信息和提交内容。\n如果你修补了提交的内容，那么几乎肯定要更新提交消息以反映修改后的内容。</p>\n</div>\n<div class="paragraph">\n<p>另一方面，如果你的修补是琐碎的（如修改了一个笔误或添加了一个忘记暂存的文件），\n那么之前的提交信息不必修改，你只需作出更改，暂存它们，然后通过以下命令避免不必要的编辑器环节即可：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git commit --amend --no-edit</code></pre>\n</div>\n</div>\n</td>\n</tr>\n</tbody></table>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_changing_multiple">修改多个提交信息</h4>\n<div class="paragraph">\n<p>为了修改在提交历史中较远的提交，必须使用更复杂的工具。\nGit 没有一个改变历史工具，但是可以使用变基工具来变基一系列提交，基于它们原来的 HEAD 而不是将其移动到另一个新的上面。\n通过交互式变基工具，可以在任何想要修改的提交后停止，然后修改信息、添加文件或做任何想做的事情。\n可以通过给 <code>git rebase</code> 增加 <code>-i</code> 选项来交互式地运行变基。\n必须指定想要重写多久远的历史，这可以通过告诉命令将要变基到的提交来做到。</p>\n</div>\n<div class="paragraph">\n<p>例如，如果想要修改最近三次提交信息，或者那组提交中的任意一个提交信息，\n将想要修改的最近一次提交的父提交作为参数传递给 <code>git rebase -i</code> 命令，即  <code>HEAD~2^</code> 或 <code>HEAD~3</code>。\n记住 <code>~3</code> 可能比较容易，因为你正尝试修改最后三次提交；但是注意实际上指定了以前的四次提交，即想要修改提交的父提交：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git rebase -i HEAD~3</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>再次记住这是一个变基命令——在 <code>HEAD~3..HEAD</code> 范围内的每一个修改了提交信息的提交及其 <strong>所有后裔</strong> 都会被重写。\n不要涉及任何已经推送到中央服务器的提交——这样做会产生一次变更的两个版本，因而使他人困惑。</p>\n</div>\n<div class="paragraph">\n<p>运行这个命令会在文本编辑器上给你一个提交的列表，看起来像下面这样：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">pick f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n\n# Rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like "squash", but discard this commit\'s log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with \'git rebase --continue\')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit\'s\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c <commit> to reword the commit message.\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>需要重点注意的是相对于正常使用的 <code>log</code> 命令，这些提交显示的顺序是相反的。\n运行一次 \'log\' 命令，会看到类似这样的东西：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --pretty=format:"%h %s" HEAD~3..HEAD\na5f4a0d added cat-file\n310154e updated README formatting and added blame\nf7f3f6d changed my name a bit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>注意其中的反序显示。\n交互式变基给你一个它将会运行的脚本。\n它将会从你在命令行中指定的提交（<code>HEAD~3</code>）开始，从上到下的依次重演每一个提交引入的修改。\n它将最旧的而不是最新的列在上面，因为那会是第一个将要重演的。</p>\n</div>\n<div class="paragraph">\n<p>你需要修改脚本来让它停留在你想修改的变更上。\n要达到这个目的，你只要将你想修改的每一次提交前面的 `pick\' 改为 `edit\'。\n例如，只想修改第三次提交信息，可以像下面这样修改文件：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">edit f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>当保存并退出编辑器时，Git 将你带回到列表中的最后一次提交，把你送回命令行并提示以下信息：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git rebase -i HEAD~3\nStopped at f7f3f6d... changed my name a bit\nYou can amend the commit now, with\n\n       git commit --amend\n\nOnce you\'re satisfied with your changes, run\n\n       git rebase --continue</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这些指令准确地告诉你该做什么。\n输入</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git commit --amend</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>修改提交信息，然后退出编辑器。\n然后，运行</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git rebase --continue</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这个命令将会自动地应用另外两个提交，然后就完成了。\n如果需要将不止一处的 pick 改为 edit，需要在每一个修改为 edit 的提交上重复这些步骤。\n每一次，Git 将会停止，让你修正提交，然后继续直到完成。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_重新排序提交">重新排序提交</h4>\n<div class="paragraph">\n<p>也可以使用交互式变基来重新排序或完全移除提交。\n如果想要移除 “added cat-file” 提交然后修改另外两个提交引入的顺序，可以将变基脚本从这样：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">pick f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>改为这样：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">pick 310154e updated README formatting and added blame\npick f7f3f6d changed my name a bit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>当保存并退出编辑器时，Git 将你的分支带回这些提交的父提交，应用 <code>310154e</code> 然后应用 <code>f7f3f6d</code>，最后停止。\n事实修改了那些提交的顺序并完全地移除了 “added cat-file” 提交。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_squashing">压缩提交</h4>\n<div class="paragraph">\n<p>通过交互式变基工具，也可以将一连串提交压缩成一个单独的提交。\n在变基信息中脚本给出了有用的指令：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like "squash", but discard this commit\'s log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with \'git rebase --continue\')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit\'s\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c <commit> to reword the commit message.\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果，指定 “squash” 而不是 “pick” 或 “edit”，Git 将应用两者的修改并合并提交信息在一起。\n所以，如果想要这三次提交变为一个提交，可以这样修改脚本：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">pick f7f3f6d changed my name a bit\nsquash 310154e updated README formatting and added blame\nsquash a5f4a0d added cat-file</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>当保存并退出编辑器时，Git 应用所有的三次修改然后将你放到编辑器中来合并三次提交信息：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console"># This is a combination of 3 commits.\n# The first commit\'s message is:\nchanged my name a bit\n\n# This is the 2nd commit message:\n\nupdated README formatting and added blame\n\n# This is the 3rd commit message:\n\nadded cat-file</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>当你保存之后，你就拥有了一个包含前三次提交的全部变更的提交。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_拆分提交">拆分提交</h4>\n<div class="paragraph">\n<p>拆分一个提交会撤消这个提交，然后多次地部分地暂存与提交直到完成你所需次数的提交。\n例如，假设想要拆分三次提交的中间那次提交。\n想要将它拆分为两次提交：第一个 “updated README formatting”，第二个 “added blame” 来代替原来的 “updated README formatting and added blame”。\n可以通过修改 <code>rebase -i</code> 的脚本来做到这点，将要拆分的提交的指令修改为 “edit”：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">pick f7f3f6d changed my name a bit\nedit 310154e updated README formatting and added blame\npick a5f4a0d added cat-file</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>然后，当脚本带你进入到命令行时，重置那个提交，拿到被重置的修改，从中创建几次提交。\n当保存并退出编辑器时，Git 带你到列表中第一个提交的父提交，应用第一个提交（<code>f7f3f6d</code>），\n应用第二个提交（<code>310154e</code>），然后让你进入命令行。\n那里，可以通过 <code>git reset HEAD^</code> 做一次针对那个提交的混合重置，实际上将会撤消那次提交并将修改的文件取消暂存。\n现在可以暂存并提交文件直到有几个提交，然后当完成时运行 <code>git rebase --continue</code>：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git reset HEAD^\n$ git add README\n$ git commit -m \'updated README formatting\'\n$ git add lib/simplegit.rb\n$ git commit -m \'added blame\'\n$ git rebase --continue</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>Git 在脚本中应用最后一次提交（<code>a5f4a0d</code>），历史记录看起来像这样：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log -4 --pretty=format:"%h %s"\n1c002dd added cat-file\n9b29157 added blame\n35cfb2b updated README formatting\nf3cc40e changed my name a bit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>再次强调，这些改动了所有在列表中的提交的 SHA-1 校验和，所以要确保列表中的提交还没有推送到共享仓库中。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_核武器级选项filter_branch">核武器级选项：filter-branch</h4>\n<div class="paragraph">\n<p>有另一个历史改写的选项，如果想要通过脚本的方式改写大量提交的话可以使用它——例如，全局修改你的邮箱地址或从每一个提交中移除一个文件。\n这个命令是 <code>filter-branch</code>，它可以改写历史中大量的提交，除非你的项目还没有公开并且其他人没有基于要改写的工作的提交做的工作，否则你不应当使用它。\n然而，它可以很有用。\n你将会学习到几个常用的用途，这样就得到了它适合使用地方的想法。</p>\n</div>\n<div class="admonitionblock caution">\n<table>\n<tbody><tr>\n<td class="icon">\n<div class="title">Caution</div>\n</td>\n<td class="content">\n<div class="paragraph">\n<p><code>git filter-branch</code> 有很多陷阱，不再推荐使用它来重写历史。\n请考虑使用 <code>git-filter-repo</code>，它是一个 Python 脚本，相比大多数使用 <code>filter-branch</code>\n的应用来说，它做得要更好。它的文档和源码可访问 <a href="https://github.com/newren/git-filter-repo" class="bare">https://github.com/newren/git-filter-repo</a> 获取。</p>\n</div>\n</td>\n</tr>\n</tbody></table>\n</div>\n<div class="sect4">\n<h5 id="_removing_file_every_commit">从每一个提交中移除一个文件</h5>\n<div class="paragraph">\n<p>这经常发生。\n有人粗心地通过 <code>git add .</code> 提交了一个巨大的二进制文件，你想要从所有地方删除。\n可能偶然地提交了一个包括一个密码的文件，然而你想要开源项目。\n<code>filter-branch</code> 是一个可能会用来擦洗整个提交历史的工具。\n为了从整个提交历史中移除一个叫做 <code>passwords.txt</code> 的文件，可以使用 <code>--tree-filter</code> 选项给 <code>filter-branch</code>：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git filter-branch --tree-filter \'rm -f passwords.txt\' HEAD\nRewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)\nRef \'refs/heads/master\' was rewritten</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p><code>--tree-filter</code> 选项在检出项目的每一个提交后运行指定的命令然后重新提交结果。\n在本例中，你从每一个快照中移除了一个叫作 <code>passwords.txt</code> 的文件，无论它是否存在。\n如果想要移除所有偶然提交的编辑器备份文件，可以运行类似 <code>git filter-branch --tree-filter \'rm -f *~\' HEAD</code> 的命令。</p>\n</div>\n<div class="paragraph">\n<p>最后将可以看到 Git 重写树与提交然后移动分支指针。\n通常一个好的想法是在一个测试分支中做这件事，然后当你决定最终结果是真正想要的，可以硬重置 <code>master</code> 分支。\n为了让 <code>filter-branch</code> 在所有分支上运行，可以给命令传递 <code>--all</code> 选项。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_使一个子目录做为新的根目录">使一个子目录做为新的根目录</h5>\n<div class="paragraph">\n<p>假设已经从另一个源代码控制系统中导入，并且有几个没意义的子目录（<code>trunk</code>、<code>tags</code> 等等）。\n如果想要让 <code>trunk</code> 子目录作为每一个提交的新的项目根目录，<code>filter-branch</code> 也可以帮助你那么做：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git filter-branch --subdirectory-filter trunk HEAD\nRewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)\nRef \'refs/heads/master\' was rewritten</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在新项目根目录是 <code>trunk</code> 子目录了。\nGit 会自动移除所有不影响子目录的提交。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_全局修改邮箱地址">全局修改邮箱地址</h5>\n<div class="paragraph">\n<p>另一个常见的情形是在你开始工作时忘记运行 <code>git config</code> 来设置你的名字与邮箱地址，\n或者你想要开源一个项目并且修改所有你的工作邮箱地址为你的个人邮箱地址。\n任何情形下，你也可以通过 <code>filter-branch</code> 来一次性修改多个提交中的邮箱地址。\n需要小心的是只修改你自己的邮箱地址，所以你使用 <code>--commit-filter</code>：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git filter-branch --commit-filter \'\n        if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];\n        then\n                GIT_AUTHOR_NAME="Scott Chacon";\n                GIT_AUTHOR_EMAIL="schacon@example.com";\n                git commit-tree "$@";\n        else\n                git commit-tree "$@";\n        fi\' HEAD</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这会遍历并重写每一个提交来包含你的新邮箱地址。\n因为提交包含了它们父提交的 SHA-1 校验和，这个命令会修改你的历史中的每一个提交的 SHA-1 校验和，\n而不仅仅只是那些匹配邮箱地址的提交。</p>\n</div>\n</div>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E6%90%9C%E7%B4%A2">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86">next</a></div></div>\n\n\n    <h2>7.7 Git 工具 - 重置揭密</h2>\n  <div>\n<h3 id="_git_reset">重置揭密</h3>\n<div class="paragraph">\n<p>在继续了解更专业的工具前，我们先探讨一下 Git 的 <code>reset</code> 和 <code>checkout</code> 命令。\n在初遇的 Git 命令中，这两个是最让人困惑的。\n它们能做很多事情，所以看起来我们很难真正地理解并恰当地运用它们。\n针对这一点，我们先来做一个简单的比喻。</p>\n</div>\n<div class="sect3">\n<h4 id="_三棵树">三棵树</h4>\n<div class="paragraph">\n<p>理解 <code>reset</code> 和 <code>checkout</code> 的最简方法，就是以 Git 的思维框架（将其作为内容管理器）来管理三棵不同的树。\n“树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。\n（在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。）</p>\n</div>\n<div class="paragraph">\n<p>Git 作为一个系统，是以它的一般操作来管理并操纵这三棵树的：</p>\n</div>\n<table class="tableblock frame-all grid-all stretch">\n<colgroup>\n<col style="width: 33.3333%;">\n<col style="width: 66.6667%;">\n</colgroup>\n<thead>\n<tr>\n<th class="tableblock halign-left valign-top">树</th>\n<th class="tableblock halign-left valign-top">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock">HEAD</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">上一次提交的快照，下一次提交的父结点</p></td>\n</tr>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock">Index</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">预期的下一次提交的快照</p></td>\n</tr>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock">Working Directory</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">沙盒</p></td>\n</tr>\n</tbody>\n</table>\n<div class="sect4">\n<h5 id="_head">HEAD</h5>\n<div class="paragraph">\n<p>HEAD 是当前分支引用的指针，它总是指向该分支上的最后一次提交。\n这表示 HEAD 将是下一次提交的父结点。\n通常，理解 HEAD 的最简方式，就是将它看做 <strong>该分支上的最后一次提交</strong> 的快照。</p>\n</div>\n<div class="paragraph">\n<p>其实，查看快照的样子很容易。\n下例就显示了 HEAD 快照实际的目录列表，以及其中每个文件的 SHA-1 校验和：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git cat-file -p HEAD\ntree cfda3bf379e4f8dba8717dee55aab78aef7f4daf\nauthor Scott Chacon  1301511835 -0700\ncommitter Scott Chacon  1301511835 -0700\n\ninitial commit\n\n$ git ls-tree -r HEAD\n100644 blob a906cb2a4a904a152...   README\n100644 blob 8f94139338f9404f2...   Rakefile\n040000 tree 99f1a6d12cb4b6f19...   lib</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>Git 的 <code>cat-file</code> 和 <code>ls-tree</code> 是底层命令，它们一般用于底层工作，在日常工作中并不使用。\n不过它们能帮助我们了解到底发生了什么。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_the_index">索引</h5>\n<div class="paragraph">\n<p>索引是你的 <strong>预期的下一次提交</strong>。\n我们也会将这个概念引用为 Git 的“暂存区”，这就是当你运行 <code>git commit</code> 时 Git 看起来的样子。</p>\n</div>\n<div class="paragraph">\n<p>Git 将上一次检出到工作目录中的所有文件填充到索引区，它们看起来就像最初被检出时的样子。\n之后你会将其中一些文件替换为新版本，接着通过 <code>git commit</code> 将它们转换为树来用作新的提交。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git ls-files -s\n100644 a906cb2a4a904a152e80877d4088654daad0c859 0\tREADME\n100644 8f94139338f9404f26296befa88755fc2598c289 0\tRakefile\n100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0\tlib/simplegit.rb</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>再说一次，我们在这里又用到了 <code>git ls-files</code> 这个幕后的命令，它会显示出索引当前的样子。</p>\n</div>\n<div class="paragraph">\n<p>确切来说，索引在技术上并非树结构，它其实是以扁平的清单实现的。不过对我们而言，把它当做树就够了。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_工作目录">工作目录</h5>\n<div class="paragraph">\n<p>最后，你就有了自己的 <strong>工作目录</strong>（通常也叫 <strong>工作区</strong>）。\n另外两棵树以一种高效但并不直观的方式，将它们的内容存储在 <code>.git</code> 文件夹中。\n工作目录会将它们解包为实际的文件以便编辑。\n你可以把工作目录当做 <strong>沙盒</strong>。在你将修改提交到暂存区并记录到历史之前，可以随意更改。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ tree\n.\n├── README\n├── Rakefile\n└── lib\n    └── simplegit.rb\n\n1 directory, 3 files</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_工作流程">工作流程</h4>\n<div class="paragraph">\n<p>经典的 Git 工作流程是通过操纵这三个区域来以更加连续的状态记录项目快照的。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-workflow.png" alt="reset workflow">\n</div>\n</div>\n<div class="paragraph">\n<p>让我们来可视化这个过程：假设我们进入到一个新目录，其中有一个文件。\n我们称其为该文件的 <strong>v1</strong> 版本，将它标记为蓝色。\n现在运行 <code>git init</code>，这会创建一个 Git 仓库，其中的 HEAD 引用指向未创建的 <code>master</code> 分支。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-ex1.png" alt="reset ex1">\n</div>\n</div>\n<div class="paragraph">\n<p>此时，只有工作目录有内容。</p>\n</div>\n<div class="paragraph">\n<p>现在我们想要提交这个文件，所以用 <code>git add</code> 来获取工作目录中的内容，并将其复制到索引中。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-ex2.png" alt="reset ex2">\n</div>\n</div>\n<div class="paragraph">\n<p>接着运行 <code>git commit</code>，它会取得索引中的内容并将它保存为一个永久的快照，\n然后创建一个指向该快照的提交对象，最后更新 <code>master</code> 来指向本次提交。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-ex3.png" alt="reset ex3">\n</div>\n</div>\n<div class="paragraph">\n<p>此时如果我们运行 <code>git status</code>，会发现没有任何改动，因为现在三棵树完全相同。</p>\n</div>\n<div class="paragraph">\n<p>现在我们想要对文件进行修改然后提交它。\n我们将会经历同样的过程；首先在工作目录中修改文件。\n我们称其为该文件的 <strong>v2</strong> 版本，并将它标记为红色。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-ex4.png" alt="reset ex4">\n</div>\n</div>\n<div class="paragraph">\n<p>如果现在运行 <code>git status</code>，我们会看到文件显示在 “Changes not staged for commit”\n下面并被标记为红色，因为该条目在索引与工作目录之间存在不同。\n接着我们运行 <code>git add</code> 来将它暂存到索引中。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-ex5.png" alt="reset ex5">\n</div>\n</div>\n<div class="paragraph">\n<p>此时，由于索引和 HEAD 不同，若运行 <code>git status</code> 的话就会看到 “Changes to be committed” 下的该文件变为绿色\n——也就是说，现在预期的下一次提交与上一次提交不同。\n最后，我们运行 <code>git commit</code> 来完成提交。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-ex6.png" alt="reset ex6">\n</div>\n</div>\n<div class="paragraph">\n<p>现在运行 <code>git status</code> 会没有输出，因为三棵树又变得相同了。</p>\n</div>\n<div class="paragraph">\n<p>切换分支或克隆的过程也类似。\n当检出一个分支时，它会修改 <strong>HEAD</strong> 指向新的分支引用，将 <strong>索引</strong> 填充为该次提交的快照，\n然后将 <strong>索引</strong> 的内容复制到 <strong>工作目录</strong> 中。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_重置的作用">重置的作用</h4>\n<div class="paragraph">\n<p>在以下情景中观察 <code>reset</code> 命令会更有意义。</p>\n</div>\n<div class="paragraph">\n<p>为了演示这些例子，假设我们再次修改了 <code>file.txt</code> 文件并第三次提交它。\n现在的历史看起来是这样的：</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-start.png" alt="reset start">\n</div>\n</div>\n<div class="paragraph">\n<p>让我们跟着 <code>reset</code> 看看它都做了什么。\n它以一种简单可预见的方式直接操纵这三棵树。\n它做了三个基本操作。</p>\n</div>\n<div class="sect4">\n<h5 id="_第_1_步移动_head">第 1 步：移动 HEAD</h5>\n<div class="paragraph">\n<p><code>reset</code> 做的第一件事是移动 HEAD 的指向。\n这与改变 HEAD 自身不同（<code>checkout</code> 所做的）；<code>reset</code> 移动 HEAD 指向的分支。\n这意味着如果 HEAD 设置为 <code>master</code> 分支（例如，你正在 <code>master</code> 分支上），\n运行 <code>git reset 9e5e6a4</code> 将会使 <code>master</code> 指向 <code>9e5e6a4</code>。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-soft.png" alt="reset soft">\n</div>\n</div>\n<div class="paragraph">\n<p>无论你调用了何种形式的带有一个提交的 <code>reset</code>，它首先都会尝试这样做。\n使用 <code>reset --soft</code>，它将仅仅停在那儿。</p>\n</div>\n<div class="paragraph">\n<p>现在看一眼上图，理解一下发生的事情：它本质上是撤销了上一次 <code>git commit</code> 命令。\n当你在运行 <code>git commit</code> 时，Git 会创建一个新的提交，并移动 HEAD 所指向的分支来使其指向该提交。\n当你将它 <code>reset</code> 回 <code>HEAD~</code>（HEAD 的父结点）时，其实就是把该分支移动回原来的位置，而不会改变索引和工作目录。\n现在你可以更新索引并再次运行 <code>git commit</code> 来完成 <code>git commit --amend</code> 所要做的事情了（见 <a href="ch00/_git_amend">修改最后一次提交</a>）。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_第_2_步更新索引_mixed">第 2 步：更新索引（--mixed）</h5>\n<div class="paragraph">\n<p>注意，如果你现在运行 <code>git status</code> 的话，就会看到新的 HEAD 和以绿色标出的它和索引之间的区别。</p>\n</div>\n<div class="paragraph">\n<p>接下来，<code>reset</code> 会用 HEAD 指向的当前快照的内容来更新索引。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-mixed.png" alt="reset mixed">\n</div>\n</div>\n<div class="paragraph">\n<p>如果指定 <code>--mixed</code> 选项，<code>reset</code> 将会在这时停止。\n这也是默认行为，所以如果没有指定任何选项（在本例中只是 <code>git reset HEAD~</code>），这就是命令将会停止的地方。</p>\n</div>\n<div class="paragraph">\n<p>现在再看一眼上图，理解一下发生的事情：它依然会撤销一上次 <code>提交</code>，但还会 <em>取消暂存</em> 所有的东西。\n于是，我们回滚到了所有 <code>git add</code> 和 <code>git commit</code> 的命令执行之前。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_第_3_步更新工作目录_hard">第 3 步：更新工作目录（--hard）</h5>\n<div class="paragraph">\n<p><code>reset</code> 要做的的第三件事情就是让工作目录看起来像索引。\n如果使用 <code>--hard</code> 选项，它将会继续这一步。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-hard.png" alt="reset hard">\n</div>\n</div>\n<div class="paragraph">\n<p>现在让我们回想一下刚才发生的事情。\n你撤销了最后的提交、<code>git add</code> 和 <code>git commit</code> 命令 <strong>以及</strong> 工作目录中的所有工作。</p>\n</div>\n<div class="paragraph">\n<p>必须注意，<code>--hard</code> 标记是 <code>reset</code> 命令唯一的危险用法，它也是 Git 会真正地销毁数据的仅有的几个操作之一。\n其他任何形式的 <code>reset</code> 调用都可以轻松撤消，但是 <code>--hard</code> 选项不能，因为它强制覆盖了工作目录中的文件。\n在这种特殊情况下，我们的 Git 数据库中的一个提交内还留有该文件的 <strong>v3</strong> 版本，\n我们可以通过 <code>reflog</code> 来找回它。但是若该文件还未提交，Git 仍会覆盖它从而导致无法恢复。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_回顾">回顾</h5>\n<div class="paragraph">\n<p><code>reset</code> 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：</p>\n</div>\n<div class="olist arabic">\n<ol class="arabic">\n<li>\n<p>移动 HEAD 分支的指向 <em>（若指定了 <code>--soft</code>，则到此停止）</em></p>\n</li>\n<li>\n<p>使索引看起来像 HEAD <em>（若未指定 <code>--hard</code>，则到此停止）</em></p>\n</li>\n<li>\n<p>使工作目录看起来像索引</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_通过路径来重置">通过路径来重置</h4>\n<div class="paragraph">\n<p>前面讲述了 <code>reset</code> 基本形式的行为，不过你还可以给它提供一个作用路径。\n若指定了一个路径，<code>reset</code> 将会跳过第 1 步，并且将它的作用范围限定为指定的文件或文件集合。\n这样做自然有它的道理，因为 HEAD 只是一个指针，你无法让它同时指向两个提交中各自的一部分。\n不过索引和工作目录 <em>可以部分更新</em>，所以重置会继续进行第 2、3 步。</p>\n</div>\n<div class="paragraph">\n<p>现在，假如我们运行 <code>git reset file.txt</code>\n（这其实是 <code>git reset --mixed HEAD file.txt</code> 的简写形式，因为你既没有指定一个提交的\nSHA-1 或分支，也没有指定 <code>--soft</code> 或 <code>--hard</code>），它会：</p>\n</div>\n<div class="olist arabic">\n<ol class="arabic">\n<li>\n<p>移动 HEAD 分支的指向 <em>（已跳过）</em></p>\n</li>\n<li>\n<p>让索引看起来像 HEAD <em>（到此处停止）</em></p>\n</li>\n</ol>\n</div>\n<div class="paragraph">\n<p>所以它本质上只是将 <code>file.txt</code> 从 HEAD 复制到索引中。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-path1.png" alt="reset path1">\n</div>\n</div>\n<div class="paragraph">\n<p>它还有 <em>取消暂存文件</em> 的实际效果。\n如果我们查看该命令的示意图，然后再想想 <code>git add</code> 所做的事，就会发现它们正好相反。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-path2.png" alt="reset path2">\n</div>\n</div>\n<div class="paragraph">\n<p>这就是为什么 <code>git status</code> 命令的输出会建议运行此命令来取消暂存一个文件。\n（查看 <a href="ch00/_unstaging">取消暂存的文件</a> 来了解更多。）</p>\n</div>\n<div class="paragraph">\n<p>我们可以不让 Git 从 HEAD 拉取数据，而是通过具体指定一个提交来拉取该文件的对应版本。\n我们只需运行类似于 <code>git reset eb43bf file.txt</code> 的命令即可。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-path3.png" alt="reset path3">\n</div>\n</div>\n<div class="paragraph">\n<p>它其实做了同样的事情，也就是把工作目录中的文件恢复到 <strong>v1</strong> 版本，运行 <code>git add</code> 添加它，\n然后再将它恢复到 <strong>v3</strong> 版本（只是不用真的过一遍这些步骤）。\n如果我们现在运行 <code>git commit</code>，它就会记录一条“将该文件恢复到 <strong>v1</strong> 版本”的更改，\n尽管我们并未在工作目录中真正地再次拥有它。</p>\n</div>\n<div class="paragraph">\n<p>还有一点同 <code>git add</code> 一样，就是 <code>reset</code> 命令也可以接受一个 <code>--patch</code> 选项来一块一块地取消暂存的内容。\n这样你就可以根据选择来取消暂存或恢复内容了。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_压缩">压缩</h4>\n<div class="paragraph">\n<p>我们来看看如何利用这种新的功能来做一些有趣的事情——压缩提交。</p>\n</div>\n<div class="paragraph">\n<p>假设你的一系列提交信息中有 “oops.”“WIP” 和 “forgot this file”，\n聪明的你就能使用 <code>reset</code> 来轻松快速地将它们压缩成单个提交，也显出你的聪明。\n（<a href="ch00/_squashing">压缩提交</a> 展示了另一种方式，不过在本例中用 <code>reset</code> 更简单。）</p>\n</div>\n<div class="paragraph">\n<p>假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。\n由于第二次提交是一个未完成的工作，因此你想要压缩它。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-squash-r1.png" alt="reset squash r1">\n</div>\n</div>\n<div class="paragraph">\n<p>那么可以运行 <code>git reset --soft HEAD~2</code> 来将 HEAD 分支移动到一个旧一点的提交上（即你想要保留的最近的提交）：</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-squash-r2.png" alt="reset squash r2">\n</div>\n</div>\n<div class="paragraph">\n<p>然后只需再次运行 <code>git commit</code>：</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-squash-r3.png" alt="reset squash r3">\n</div>\n</div>\n<div class="paragraph">\n<p>现在你可以查看可到达的历史，即将会推送的历史，现在看起来有个 v1 版 <code>file-a.txt</code> 的提交，\n接着第二个提交将 <code>file-a.txt</code> 修改成了 v3 版并增加了 <code>file-b.txt</code>。\n包含 v2 版本的文件已经不在历史中了。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_检出">检出</h4>\n<div class="paragraph">\n<p>最后，你大概还想知道 <code>checkout</code> 和 <code>reset</code> 之间的区别。\n和 <code>reset</code> 一样，<code>checkout</code> 也操纵三棵树，不过它有一点不同，这取决于你是否传给该命令一个文件路径。</p>\n</div>\n<div class="sect4">\n<h5 id="_不带路径">不带路径</h5>\n<div class="paragraph">\n<p>运行 <code>git checkout [branch]</code> 与运行 <code>git reset --hard [branch]</code> 非常相似，它会更新所有三棵树使其看起来像 <code>[branch]</code>，不过有两点重要的区别。</p>\n</div>\n<div class="paragraph">\n<p>首先不同于 <code>reset --hard</code>，<code>checkout</code> 对工作目录是安全的，它会通过检查来确保不会将已更改的文件弄丢。\n其实它还更聪明一些。它会在工作目录中先试着简单合并一下，这样所有 <em>还未修改过的</em> 文件都会被更新。\n而 <code>reset --hard</code> 则会不做检查就全面地替换所有东西。</p>\n</div>\n<div class="paragraph">\n<p>第二个重要的区别是 <code>checkout</code> 如何更新 HEAD。\n<code>reset</code> 会移动 HEAD 分支的指向，而 <code>checkout</code> 只会移动 HEAD 自身来指向另一个分支。</p>\n</div>\n<div class="paragraph">\n<p>例如，假设我们有 <code>master</code> 和 <code>develop</code> 分支，它们分别指向不同的提交；我们现在在 <code>develop</code> 上（所以 HEAD 指向它）。\n如果我们运行 <code>git reset master</code>，那么 <code>develop</code> 自身现在会和 <code>master</code> 指向同一个提交。\n而如果我们运行 <code>git checkout master</code> 的话，<code>develop</code> 不会移动，HEAD 自身会移动。\n现在 HEAD 将会指向 <code>master</code>。</p>\n</div>\n<div class="paragraph">\n<p>所以，虽然在这两种情况下我们都移动 HEAD 使其指向了提交 A，但 <em>做法</em> 是非常不同的。\n<code>reset</code> 会移动 HEAD 分支的指向，而 <code>checkout</code> 则移动 HEAD 自身。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/reset-checkout.png" alt="reset checkout">\n</div>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_带路径">带路径</h5>\n<div class="paragraph">\n<p>运行 <code>checkout</code> 的另一种方式就是指定一个文件路径，这会像 <code>reset</code> 一样不会移动 HEAD。\n它就像 <code>git reset [branch] file</code> 那样用该次提交中的那个文件来更新索引，但是它也会覆盖工作目录中对应的文件。\n它就像是 <code>git reset --hard [branch] file</code>（如果 <code>reset</code> 允许你这样运行的话），\n这样对工作目录并不安全，它也不会移动 HEAD。</p>\n</div>\n<div class="paragraph">\n<p>此外，同 <code>git reset</code> 和 <code>git add</code> 一样，<code>checkout</code> 也接受一个 <code>--patch</code> 选项，允许你根据选择一块一块地恢复文件内容。</p>\n</div>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_总结_8">总结</h4>\n<div class="paragraph">\n<p>希望你现在熟悉并理解了 <code>reset</code> 命令，不过关于它和 <code>checkout</code> 之间的区别，你可能还是会有点困惑，毕竟不太可能记住不同调用的所有规则。</p>\n</div>\n<div class="paragraph">\n<p>下面的速查表列出了命令对树的影响。\n“HEAD” 一列中的 “REF” 表示该命令移动了 HEAD 指向的分支引用，而 “HEAD” 则表示只移动了 HEAD 自身。\n特别注意 \'WD Safe?\' 一列——如果它标记为 <strong>NO</strong>，那么运行该命令之前请考虑一下。</p>\n</div>\n<table class="tableblock frame-all grid-all stretch">\n<colgroup>\n<col style="width: 42.8571%;">\n<col style="width: 14.2857%;">\n<col style="width: 14.2857%;">\n<col style="width: 14.2857%;">\n<col style="width: 14.2858%;">\n</colgroup>\n<thead>\n<tr>\n<th class="tableblock halign-left valign-top"></th>\n<th class="tableblock halign-left valign-top">HEAD</th>\n<th class="tableblock halign-left valign-top">Index</th>\n<th class="tableblock halign-left valign-top">Workdir</th>\n<th class="tableblock halign-left valign-top">WD Safe?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Commit Level</strong></p></td>\n<td class="tableblock halign-left valign-top"></td>\n<td class="tableblock halign-left valign-top"></td>\n<td class="tableblock halign-left valign-top"></td>\n<td class="tableblock halign-left valign-top"></td>\n</tr>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><code>reset --soft [commit]</code></p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">REF</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">NO</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">NO</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">YES</p></td>\n</tr>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><code>reset [commit]</code></p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">REF</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">YES</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">NO</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">YES</p></td>\n</tr>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><code>reset --hard [commit]</code></p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">REF</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">YES</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">YES</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>NO</strong></p></td>\n</tr>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><code>checkout <commit></code></p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">HEAD</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">YES</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">YES</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">YES</p></td>\n</tr>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>File Level</strong></p></td>\n<td class="tableblock halign-left valign-top"></td>\n<td class="tableblock halign-left valign-top"></td>\n<td class="tableblock halign-left valign-top"></td>\n<td class="tableblock halign-left valign-top"></td>\n</tr>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><code>reset [commit] <paths></code></p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">NO</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">YES</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">NO</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">YES</p></td>\n</tr>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><code>checkout [commit] <paths></code></p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">NO</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">YES</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">YES</p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>NO</strong></p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%AB%98%E7%BA%A7%E5%90%88%E5%B9%B6">next</a></div></div>\n\n\n    <h2>7.8 Git 工具 - 高级合并</h2>\n  <div>\n<h3 id="_advanced_merging">高级合并</h3>\n<div class="paragraph">\n<p>在 Git 中合并是相当容易的。\n因为 Git 使多次合并另一个分支变得很容易，这意味着你可以有一个始终保持最新的长期分支，\n经常解决小的冲突，比在一系列提交后解决一个巨大的冲突要好。</p>\n</div>\n<div class="paragraph">\n<p>然而，有时也会有棘手的冲突。\n不像其他的版本控制系统，Git 并不会尝试过于聪明的合并冲突解决方案。\nGit 的哲学是聪明地决定无歧义的合并方案，但是如果有冲突，它不会尝试智能地自动解决它。\n因此，如果很久之后才合并两个分叉的分支，你可能会撞上一些问题。</p>\n</div>\n<div class="paragraph">\n<p>在本节中，我们将会仔细查看那些问题是什么以及 Git 给了我们什么工具来帮助我们处理这些更难办的情形。\n我们也会了解你可以做的不同的、非标准类型的合并，也会看到如何后退到合并之前。</p>\n</div>\n<div class="sect3">\n<h4 id="_合并冲突">合并冲突</h4>\n<div class="paragraph">\n<p>我们在 <a href="ch00/_basic_merge_conflicts">遇到冲突时的分支合并</a> 介绍了解决合并冲突的一些基础知识，\n对于更复杂的冲突，Git 提供了几个工具来帮助你指出将会发生什么以及如何更好地处理冲突。</p>\n</div>\n<div class="paragraph">\n<p>首先，在做一次可能有冲突的合并前尽可能保证工作目录是干净的。\n如果你有正在做的工作，要么提交到一个临时分支要么储藏它。\n这使你可以撤消在这里尝试做的 <strong>任何事情</strong> 。\n如果在你尝试一次合并时工作目录中有未保存的改动，下面的这些技巧可能会使你丢失那些工作。</p>\n</div>\n<div class="paragraph">\n<p>让我们通过一个非常简单的例子来了解一下。\n我们有一个超级简单的打印 \'hello world\' 的 Ruby 文件。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-ruby" data-lang="ruby">#! /usr/bin/env ruby\n\ndef hello\n  puts \'hello world\'\nend\n\nhello()</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>在我们的仓库中，创建一个名为 <code>whitespace</code> 的新分支并将所有 Unix 换行符修改为 DOS 换行符，\n实质上虽然改变了文件的每一行，但改变的都只是空白字符。\n然后我们修改行 “hello world” 为 “hello mundo”。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git checkout -b whitespace\nSwitched to a new branch \'whitespace\'\n\n$ unix2dos hello.rb\nunix2dos: converting file hello.rb to DOS format ...\n$ git commit -am \'converted hello.rb to DOS\'\n[whitespace 3270f76] converted hello.rb to DOS\n 1 file changed, 7 insertions(+), 7 deletions(-)\n\n$ vim hello.rb\n$ git diff -b\ndiff --git a/hello.rb b/hello.rb\nindex ac51efd..e85207e 100755\n--- a/hello.rb\n+++ b/hello.rb\n@@ -1,7 +1,7 @@\n #! /usr/bin/env ruby\n\n def hello\n-  puts \'hello world\'\n+  puts \'hello mundo\'^M\n end\n\n hello()\n\n$ git commit -am \'hello mundo change\'\n[whitespace 6d338d2] hello mundo change\n 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在我们切换回我们的 <code>master</code> 分支并为函数增加一些注释。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git checkout master\nSwitched to branch \'master\'\n\n$ vim hello.rb\n$ git diff\ndiff --git a/hello.rb b/hello.rb\nindex ac51efd..36c06c8 100755\n--- a/hello.rb\n+++ b/hello.rb\n@@ -1,5 +1,6 @@\n #! /usr/bin/env ruby\n\n+# prints out a greeting\n def hello\n   puts \'hello world\'\n end\n\n$ git commit -am \'document the function\'\n[master bec6336] document the function\n 1 file changed, 1 insertion(+)</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在我们尝试合并入我们的 <code>whitespace</code> 分支，因为修改了空白字符，所以合并会出现冲突。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git merge whitespace\nAuto-merging hello.rb\nCONFLICT (content): Merge conflict in hello.rb\nAutomatic merge failed; fix conflicts and then commit the result.</code></pre>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_abort_merge">中断一次合并</h5>\n<div class="paragraph">\n<p>我们现在有几个选项。\n首先，让我们介绍如何摆脱这个情况。\n你可能不想处理冲突这种情况，完全可以通过 <code>git merge --abort</code> 来简单地退出合并。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git status -sb\n## master\nUU hello.rb\n\n$ git merge --abort\n\n$ git status -sb\n## master</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p><code>git merge --abort</code> 选项会尝试恢复到你运行合并前的状态。\n但当运行命令前，在工作目录中有未储藏、未提交的修改时它不能完美处理，除此之外它都工作地很好。</p>\n</div>\n<div class="paragraph">\n<p>如果出于某些原因你想要重来一次，也可以运行 <code>git reset --hard HEAD</code> 回到上一次提交的状态。\n请牢记此时任何未提交的工作都会丢失，所以请确认你不需要保留任何改动。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_忽略空白">忽略空白</h5>\n<div class="paragraph">\n<p>在这个特定的例子中，冲突与空白有关。\n我们知道这点是因为这个例子很简单，但是在实际的例子中发现这样的冲突也很容易，\n因为每一行都被移除而在另一边每一行又被加回来了。\n默认情况下，Git 认为所有这些行都改动了，所以它不会合并文件。</p>\n</div>\n<div class="paragraph">\n<p>默认合并策略可以带有参数，其中的几个正好是关于忽略空白改动的。\n如果你看到在一次合并中有大量关于空白的问题，你可以直接中止它并重做一次，\n这次使用 <code>-Xignore-all-space</code> 或 <code>-Xignore-space-change</code> 选项。\n第一个选项在比较行时 <strong>完全忽略</strong> 空白修改，第二个选项将一个空白符与多个连续的空白字符视作等价的。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git merge -Xignore-space-change whitespace\nAuto-merging hello.rb\nMerge made by the \'recursive\' strategy.\n hello.rb | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>因为在本例中，实际上文件修改并没有冲突，一旦我们忽略空白修改，每一行都能被很好地合并。</p>\n</div>\n<div class="paragraph">\n<p>如果你的团队中的某个人可能不小心重新格式化空格为制表符或者相反的操作，这会是一个救命稻草。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_manual_remerge">手动文件再合并</h5>\n<div class="paragraph">\n<p>虽然 Git 对空白的预处理做得很好，还有很多其他类型的修改，Git 也许无法自动处理，但是脚本可以处理它们。\n例如，假设 Git 无法处理空白修改因此我们需要手动处理。</p>\n</div>\n<div class="paragraph">\n<p>我们真正想要做的是对将要合并入的文件在真正合并前运行 <code>dos2unix</code> 程序。\n所以如果那样的话，我们该如何做？</p>\n</div>\n<div class="paragraph">\n<p>首先，我们进入到了合并冲突状态。\n然后我们想要我的版本的文件，他们的版本的文件（从我们将要合并入的分支）和共同的版本的文件（从分支叉开时的位置）的拷贝。\n然后我们想要修复任何一边的文件，并且为这个单独的文件重试一次合并。</p>\n</div>\n<div class="paragraph">\n<p>获得这三个文件版本实际上相当容易。\nGit 在索引中存储了所有这些版本，在 “stages” 下每一个都有一个数字与它们关联。\nStage 1 是它们共同的祖先版本，stage 2 是你的版本，stage 3 来自于 <code>MERGE_HEAD</code>，即你将要合并入的版本（“theirs”）。</p>\n</div>\n<div class="paragraph">\n<p>通过 <code>git show</code> 命令与一个特别的语法，你可以将冲突文件的这些版本释放出一份拷贝。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git show :1:hello.rb > hello.common.rb\n$ git show :2:hello.rb > hello.ours.rb\n$ git show :3:hello.rb > hello.theirs.rb</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果你想要更专业一点，也可以使用 <code>ls-files -u</code> 底层命令来得到这些文件的 Git blob 对象的实际 SHA-1 值。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git ls-files -u\n100755 ac51efdc3df4f4fd328d1a02ad05331d8e2c9111 1\thello.rb\n100755 36c06c8752c78d2aff89571132f3bf7841a7b5c3 2\thello.rb\n100755 e85207e04dfdd5eb0a1e9febbc67fd837c44a1cd 3\thello.rb</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p><code>:1:hello.rb</code> 只是查找那个 blob 对象 SHA-1 值的简写。</p>\n</div>\n<div class="paragraph">\n<p>既然在我们的工作目录中已经有这所有三个阶段的内容，我们可以手工修复它们来修复空白问题，然后使用鲜为人知的 <code>git merge-file</code> 命令来重新合并那个文件。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ dos2unix hello.theirs.rb\ndos2unix: converting file hello.theirs.rb to Unix format ...\n\n$ git merge-file -p \\\n    hello.ours.rb hello.common.rb hello.theirs.rb > hello.rb\n\n$ git diff -b\ndiff --cc hello.rb\nindex 36c06c8,e85207e..0000000\n--- a/hello.rb\n+++ b/hello.rb\n@@@ -1,8 -1,7 +1,8 @@@\n  #! /usr/bin/env ruby\n\n +# prints out a greeting\n  def hello\n-   puts \'hello world\'\n+   puts \'hello mundo\'\n  end\n\n  hello()</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>在这时我们已经漂亮地合并了那个文件。\n实际上，这比使用 <code>ignore-space-change</code> 选项要更好，因为在合并前真正地修复了空白修改而不是简单地忽略它们。\n在使用 <code>ignore-space-change</code> 进行合并操作后，我们最终得到了有几行是 DOS 行尾的文件，从而使提交内容混乱了。</p>\n</div>\n<div class="paragraph">\n<p>如果你想要在最终提交前看一下我们这边与另一边之间实际的修改，\n你可以使用 <code>git diff</code> 来比较将要提交作为合并结果的工作目录与其中任意一个阶段的文件差异。\n让我们看看它们。</p>\n</div>\n<div class="paragraph">\n<p>要在合并前比较结果与在你的分支上的内容，换一句话说，看看合并引入了什么，可以运行 <code>git diff --ours</code></p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git diff --ours\n* Unmerged path hello.rb\ndiff --git a/hello.rb b/hello.rb\nindex 36c06c8..44d0a25 100755\n--- a/hello.rb\n+++ b/hello.rb\n@@ -2,7 +2,7 @@\n\n # prints out a greeting\n def hello\n-  puts \'hello world\'\n+  puts \'hello mundo\'\n end\n\n hello()</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这里我们可以很容易地看到在我们的分支上发生了什么，在这次合并中我们实际引入到这个文件的改动，是修改了其中一行。</p>\n</div>\n<div class="paragraph">\n<p>如果我们想要查看合并的结果与他们那边有什么不同，可以运行 <code>git diff --theirs</code>。\n在本例及后续的例子中，我们会使用 <code>-b</code> 来去除空白，因为我们将它与 Git 中的，\n而不是我们清理过的 <code>hello.theirs.rb</code> 文件比较。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git diff --theirs -b\n* Unmerged path hello.rb\ndiff --git a/hello.rb b/hello.rb\nindex e85207e..44d0a25 100755\n--- a/hello.rb\n+++ b/hello.rb\n@@ -1,5 +1,6 @@\n #! /usr/bin/env ruby\n\n+# prints out a greeting\n def hello\n   puts \'hello mundo\'\n end</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>最终，你可以通过 <code>git diff --base</code> 来查看文件在两边是如何改动的。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git diff --base -b\n* Unmerged path hello.rb\ndiff --git a/hello.rb b/hello.rb\nindex ac51efd..44d0a25 100755\n--- a/hello.rb\n+++ b/hello.rb\n@@ -1,7 +1,8 @@\n #! /usr/bin/env ruby\n\n+# prints out a greeting\n def hello\n-  puts \'hello world\'\n+  puts \'hello mundo\'\n end\n\n hello()</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>在这时我们可以使用 <code>git clean</code> 命令来清理我们为手动合并而创建但不再有用的额外文件。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git clean -f\nRemoving hello.common.rb\nRemoving hello.ours.rb\nRemoving hello.theirs.rb</code></pre>\n</div>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_checking_out_conflicts">检出冲突</h5>\n<div class="paragraph">\n<p>也许有时我们并不满意这样的解决方案，或许有时还要手动编辑一边或者两边的冲突，但还是依旧无法正常工作，这时我们需要更多的上下文关联来解决这些冲突。</p>\n</div>\n<div class="paragraph">\n<p>让我们来稍微改动下例子。\n对于本例，我们有两个长期分支，每一个分支都有几个提交，但是在合并时却创建了一个合理的冲突。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --graph --oneline --decorate --all\n* f1270f7 (HEAD, master) update README\n* 9af9d3b add a README\n* 694971d update phrase to hola world\n| * e3eb223 (mundo) add more tests\n| * 7cff591 add testing script\n| * c3ffff1 changed text to hello mundo\n|/\n* b7dcc89 initial hello world code</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在有只在 <code>master</code> 分支上的三次单独提交，还有其他三次提交在 <code>mundo</code> 分支上。\n如果我们尝试将 <code>mundo</code> 分支合并入 <code>master</code> 分支，我们得到一个冲突。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git merge mundo\nAuto-merging hello.rb\nCONFLICT (content): Merge conflict in hello.rb\nAutomatic merge failed; fix conflicts and then commit the result.</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>我们想要看一下合并冲突是什么。\n如果我们打开这个文件，我们将会看到类似下面的内容：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-ruby" data-lang="ruby">#! /usr/bin/env ruby\n\ndef hello\n<<<<<<< HEAD\n  puts \'hola world\'\n=======\n  puts \'hello mundo\'\n>>>>>>> mundo\nend\n\nhello()</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>合并的两边都向这个文件增加了内容，但是导致冲突的原因是其中一些提交修改了文件的同一个地方。</p>\n</div>\n<div class="paragraph">\n<p>让我们探索一下现在你手边可用来查明这个冲突是如何产生的工具。\n应该如何修复这个冲突看起来或许并不明显。\n这时你需要更多上下文。</p>\n</div>\n<div class="paragraph">\n<p>一个很有用的工具是带 <code>--conflict</code> 选项的 <code>git checkout</code>。\n这会重新检出文件并替换合并冲突标记。\n如果想要重置标记并尝试再次解决它们的话这会很有用。</p>\n</div>\n<div class="paragraph">\n<p>可以传递给 <code>--conflict</code> 参数 <code>diff3</code> 或 <code>merge</code>（默认选项）。\n如果传给它 <code>diff3</code>，Git 会使用一个略微不同版本的冲突标记：\n不仅仅只给你 “ours” 和 “theirs” 版本，同时也会有 “base” 版本在中间来给你更多的上下文。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git checkout --conflict=diff3 hello.rb</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>一旦我们运行它，文件看起来会像下面这样：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-ruby" data-lang="ruby">#! /usr/bin/env ruby\n\ndef hello\n<<<<<<< ours\n  puts \'hola world\'\n||||||| base\n  puts \'hello world\'\n=======\n  puts \'hello mundo\'\n>>>>>>> theirs\nend\n\nhello()</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果你喜欢这种格式，可以通过设置 <code>merge.conflictstyle</code> 选项为 <code>diff3</code> 来做为以后合并冲突的默认选项。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git config --global merge.conflictstyle diff3</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p><code>git checkout</code> 命令也可以使用 <code>--ours</code> 和 <code>--theirs</code> 选项，这是一种无需合并的快速方式，你可以选择留下一边的修改而丢弃掉另一边修改。</p>\n</div>\n<div class="paragraph">\n<p>当有二进制文件冲突时这可能会特别有用，因为可以简单地选择一边，或者可以只合并另一个分支的特定文件——可以做一次合并然后在提交前检出一边或另一边的特定文件。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_merge_log">合并日志</h5>\n<div class="paragraph">\n<p>另一个解决合并冲突有用的工具是 <code>git log</code>。\n这可以帮助你得到那些对冲突有影响的上下文。\n回顾一点历史来记起为什么两条线上的开发会触碰同一片代码有时会很有用。</p>\n</div>\n<div class="paragraph">\n<p>为了得到此次合并中包含的每一个分支的所有独立提交的列表，\n我们可以使用之前在 <a href="ch00/_triple_dot">三点</a> 学习的“三点”语法。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --oneline --left-right HEAD...MERGE_HEAD\n< f1270f7 update README\n< 9af9d3b add a README\n< 694971d update phrase to hola world\n> e3eb223 add more tests\n> 7cff591 add testing script\n> c3ffff1 changed text to hello mundo</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这个漂亮的列表包含 6 个提交和每一个提交所在的不同开发路径。</p>\n</div>\n<div class="paragraph">\n<p>我们可以通过更加特定的上下文来进一步简化这个列表。\n如果我们添加 <code>--merge</code> 选项到 <code>git log</code> 中，它会只显示任何一边接触了合并冲突文件的提交。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --oneline --left-right --merge\n< 694971d update phrase to hola world\n> c3ffff1 changed text to hello mundo</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果你运行命令时用 <code>-p</code> 选项代替，你会得到所有冲突文件的区别。\n快速获得你需要帮助理解为什么发生冲突的上下文，以及如何聪明地解决它，这会 <strong>非常</strong> 有用。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_组合式差异格式">组合式差异格式</h5>\n<div class="paragraph">\n<p>因为 Git 暂存合并成功的结果，当你在合并冲突状态下运行 <code>git diff</code> 时，只会得到现在还在冲突状态的区别。\n当需要查看你还需要解决哪些冲突时这很有用。</p>\n</div>\n<div class="paragraph">\n<p>在合并冲突后直接运行的 <code>git diff</code> 会给你一个相当独特的输出格式。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git diff\ndiff --cc hello.rb\nindex 0399cd5,59727f0..0000000\n--- a/hello.rb\n+++ b/hello.rb\n@@@ -1,7 -1,7 +1,11 @@@\n  #! /usr/bin/env ruby\n\n  def hello\n++<<<<<<< HEAD\n +  puts \'hola world\'\n++=======\n+   puts \'hello mundo\'\n++>>>>>>> mundo\n  end\n\n  hello()</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这种叫作“组合式差异”的格式会在每一行给你两列数据。\n第一列为你显示 “ours” 分支与工作目录的文件区别（添加或删除），\n第二列显示 “theirs” 分支与工作目录的拷贝区别。</p>\n</div>\n<div class="paragraph">\n<p>所以在上面的例子中可以看到 <code><<<<<<<</code> 与 <code>>>>>>>></code> 行在工作拷贝中但是并不在合并的任意一边中。\n这很有意义，合并工具因为我们的上下文被困住了，它期望我们去移除它们。</p>\n</div>\n<div class="paragraph">\n<p>如果我们解决冲突再次运行 <code>git diff</code>，我们将会看到同样的事情，但是它有一点帮助。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ vim hello.rb\n$ git diff\ndiff --cc hello.rb\nindex 0399cd5,59727f0..0000000\n--- a/hello.rb\n+++ b/hello.rb\n@@@ -1,7 -1,7 +1,7 @@@\n  #! /usr/bin/env ruby\n\n  def hello\n-   puts \'hola world\'\n -  puts \'hello mundo\'\n++  puts \'hola mundo\'\n  end\n\n  hello()</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这里显示出 “hola world” 在我们这边但不在工作拷贝中，那个 “hello mundo” 在他们那边但不在工作拷贝中，\n最终 “hola mundo” 不在任何一边但是现在在工作拷贝中。在提交解决方案前这对审核很有用。</p>\n</div>\n<div class="paragraph">\n<p>也可以在合并后通过 <code>git log</code> 来获取相同信息，查看冲突是如何解决的。\n如果你对一个合并提交运行 <code>git show</code> 命令 Git 将会输出这种格式，\n或者你也可以在 <code>git log -p</code>（默认情况下该命令只会展示还没有合并的补丁）命令之后加上 <code>--cc</code> 选项。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --cc -p -1\ncommit 14f41939956d80b9e17bb8721354c33f8d5b5a79\nMerge: f1270f7 e3eb223\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri Sep 19 18:14:49 2014 +0200\n\n    Merge branch \'mundo\'\n\n    Conflicts:\n        hello.rb\n\ndiff --cc hello.rb\nindex 0399cd5,59727f0..e1d0799\n--- a/hello.rb\n+++ b/hello.rb\n@@@ -1,7 -1,7 +1,7 @@@\n  #! /usr/bin/env ruby\n\n  def hello\n-   puts \'hola world\'\n -  puts \'hello mundo\'\n++  puts \'hola mundo\'\n  end\n\n  hello()</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_undoing_merges">撤消合并</h4>\n<div class="paragraph">\n<p>虽然你已经知道如何创建一个合并提交，但有时出错是在所难免的。\n使用 Git 最棒的一件事情是犯错是可以的，因为有可能（大多数情况下都很容易）修复它们。</p>\n</div>\n<div class="paragraph">\n<p>合并提交并无不同。\n假设现在在一个主题分支上工作，不小心将其合并到 <code>master</code> 中，现在提交历史看起来是这样：</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/undomerge-start.png" alt="意外的合并提交">\n</div>\n<div class="title">Figure 138. 意外的合并提交</div>\n</div>\n<div class="paragraph">\n<p>有两种方法来解决这个问题，这取决于你想要的结果是什么。</p>\n</div>\n<div class="sect4">\n<h5 id="_修复引用">修复引用</h5>\n<div class="paragraph">\n<p>如果这个不想要的合并提交只存在于你的本地仓库中，最简单且最好的解决方案是移动分支到你想要它指向的地方。\n大多数情况下，如果你在错误的 <code>git merge</code> 后运行 <code>git reset --hard HEAD~</code>，这会重置分支指向所以它们看起来像这样：</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/undomerge-reset.png" alt="在 `git reset --hard HEAD~` 之后的历史">\n</div>\n<div class="title">Figure 139. 在 <code>git reset --hard HEAD~</code> 之后的历史</div>\n</div>\n<div class="paragraph">\n<p>我们之前在 <a href="ch00/_git_reset">重置揭密</a> 已经介绍了 <code>reset</code>，所以现在指出这里发生了什么并不是很困难。\n让我们快速复习下：<code>reset --hard</code> 通常会经历三步：</p>\n</div>\n<div class="olist arabic">\n<ol class="arabic">\n<li>\n<p>移动 HEAD 指向的分支。\n在本例中，我们想要移动 <code>master</code> 到合并提交（<code>C6</code>）之前所在的位置。</p>\n</li>\n<li>\n<p>使索引看起来像 HEAD。</p>\n</li>\n<li>\n<p>使工作目录看起来像索引。</p>\n</li>\n</ol>\n</div>\n<div class="paragraph">\n<p>这个方法的缺点是它会重写历史，在一个共享的仓库中这会造成问题的。\n查阅 <a href="ch00/_rebase_peril">变基的风险</a> 来了解更多可能发生的事情；\n用简单的话说就是如果其他人已经有你将要重写的提交，你应当避免使用 <code>reset</code>。\n如果有任何其他提交在合并之后创建了，那么这个方法也会无效；移动引用实际上会丢失那些改动。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_reverse_commit">还原提交</h5>\n<div class="paragraph">\n<p>如果移动分支指针并不适合你，Git 给你一个生成一个新提交的选项，提交将会撤消一个已存在提交的所有修改。\nGit 称这个操作为“还原”，在这个特定的场景下，你可以像这样调用它：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git revert -m 1 HEAD\n[master b1d8379] Revert "Merge branch \'topic\'"</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p><code>-m 1</code> 标记指出 “mainline” 需要被保留下来的父结点。\n当你引入一个合并到 <code>HEAD</code>（<code>git merge topic</code>），新提交有两个父结点：第一个是 <code>HEAD</code>（<code>C6</code>），第二个是将要合并入分支的最新提交（<code>C4</code>）。\n在本例中，我们想要撤消所有由父结点 #2（<code>C4</code>）合并引入的修改，同时保留从父结点 #1（<code>C6</code>）开始的所有内容。</p>\n</div>\n<div class="paragraph">\n<p>有还原提交的历史看起来像这样：</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/undomerge-revert.png" alt="在 `git revert -m 1` 后的历史">\n</div>\n<div class="title">Figure 140. 在 <code>git revert -m 1</code> 后的历史</div>\n</div>\n<div class="paragraph">\n<p>新的提交 <code>^M</code> 与 <code>C6</code> 有完全一样的内容，所以从这儿开始就像合并从未发生过，除了“现在还没合并”的提交依然在 <code>HEAD</code> 的历史中。\n如果你尝试再次合并 <code>topic</code> 到 <code>master</code> Git 会感到困惑：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git merge topic\nAlready up-to-date.</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p><code>topic</code> 中并没有东西不能从 <code>master</code> 中追踪到达。\n更糟的是，如果你在 <code>topic</code> 中增加工作然后再次合并，Git 只会引入被还原的合并 <em>之后</em> 的修改。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/undomerge-revert2.png" alt="含有坏掉合并的历史">\n</div>\n<div class="title">Figure 141. 含有坏掉合并的历史</div>\n</div>\n<div class="paragraph">\n<p>解决这个最好的方式是撤消还原原始的合并，因为现在你想要引入被还原出去的修改，<strong>然后</strong> 创建一个新的合并提交：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git revert ^M\n[master 09f0126] Revert "Revert "Merge branch \'topic\'""\n$ git merge topic</code></pre>\n</div>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/undomerge-revert3.png" alt="在重新合并一个还原合并后的历史">\n</div>\n<div class="title">Figure 142. 在重新合并一个还原合并后的历史</div>\n</div>\n<div class="paragraph">\n<p>在本例中，<code>M</code> 与 <code>^M</code> 抵消了。\n<code>^^M</code> 事实上合并入了 <code>C3</code> 与 <code>C4</code> 的修改，<code>C8</code> 合并了 <code>C7</code> 的修改，所以现在 <code>topic</code> 已经完全被合并了。</p>\n</div>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_其他类型的合并">其他类型的合并</h4>\n<div class="paragraph">\n<p>到目前为止我们介绍的都是通过一个叫作 “recursive” 的合并策略来正常处理的两个分支的正常合并。\n然而还有其他方式来合并两个分支到一起。\n让我们来快速介绍其中的几个。</p>\n</div>\n<div class="sect4">\n<h5 id="_我们的或他们的偏好">我们的或他们的偏好</h5>\n<div class="paragraph">\n<p>首先，有另一种我们可以通过 “recursive” 合并模式做的有用工作。\n我们之前已经看到传递给 <code>-X</code> 的 <code>ignore-all-space</code> 与 <code>ignore-space-change</code> 选项，\n但是我们也可以告诉 Git 当它看见一个冲突时直接选择一边。</p>\n</div>\n<div class="paragraph">\n<p>默认情况下，当 Git 看到两个分支合并中的冲突时，它会将合并冲突标记添加到你的代码中并标记文件为冲突状态来让你解决。\n如果你希望 Git 简单地选择特定的一边并忽略另外一边而不是让你手动解决冲突，你可以传递给 <code>merge</code> 命令一个 <code>-Xours</code> 或 <code>-Xtheirs</code> 参数。</p>\n</div>\n<div class="paragraph">\n<p>如果 Git 看到这个，它并不会增加冲突标记。\n任何可以合并的区别，它会直接合并。\n任何有冲突的区别，它会简单地选择你全局指定的一边，包括二进制文件。</p>\n</div>\n<div class="paragraph">\n<p>如果我们回到之前我们使用的 “hello world” 例子中，我们可以看到合并入我们的分支时引发了冲突。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git merge mundo\nAuto-merging hello.rb\nCONFLICT (content): Merge conflict in hello.rb\nResolved \'hello.rb\' using previous resolution.\nAutomatic merge failed; fix conflicts and then commit the result.</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>然而如果我们运行时增加 <code>-Xours</code> 或 <code>-Xtheirs</code> 参数就不会有冲突。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git merge -Xours mundo\nAuto-merging hello.rb\nMerge made by the \'recursive\' strategy.\n hello.rb | 2 +-\n test.sh  | 2 ++\n 2 files changed, 3 insertions(+), 1 deletion(-)\n create mode 100644 test.sh</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>在上例中，它并不会为 “hello mundo” 与 “hola world” 标记合并冲突，它只会简单地选取 “hola world”。\n然而，在那个分支上所有其他非冲突的改动都可以被成功地合并入。</p>\n</div>\n<div class="paragraph">\n<p>这个选项也可以传递给我们之前看到的 <code>git merge-file</code> 命令，\n通过运行类似 <code>git merge-file --ours</code> 的命令来合并单个文件。</p>\n</div>\n<div class="paragraph">\n<p>如果想要做类似的事情但是甚至并不想让 Git 尝试合并另外一边的修改，\n有一个更严格的选项，它是 “ours” 合并 <em>策略</em>。\n这与 “ours” recursive 合并 <em>选项</em> 不同。</p>\n</div>\n<div class="paragraph">\n<p>这本质上会做一次假的合并。\n它会记录一个以两边分支作为父结点的新合并提交，但是它甚至根本不关注你正合并入的分支。\n它只会简单地把当前分支的代码当作合并结果记录下来。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git merge -s ours mundo\nMerge made by the \'ours\' strategy.\n$ git diff HEAD HEAD~\n$</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>你可以看到合并后与合并前我们的分支并没有任何区别。</p>\n</div>\n<div class="paragraph">\n<p>当再次合并时从本质上欺骗 Git 认为那个分支已经合并过经常是很有用的。\n例如，假设你有一个分叉的 <code>release</code> 分支并且在上面做了一些你想要在未来某个时候合并回 <code>master</code> 的工作。\n与此同时 <code>master</code> 分支上的某些 bugfix 需要向后移植回 <code>release</code> 分支。\n你可以合并 bugfix 分支进入 <code>release</code> 分支同时也 <code>merge -s ours</code> 合并进入你的 <code>master</code> 分支\n（即使那个修复已经在那儿了）这样当你之后再次合并 <code>release</code> 分支时，就不会有来自 bugfix 的冲突。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_subtree_merge">子树合并</h5>\n<div class="paragraph">\n<p>子树合并的思想是你有两个项目，并且其中一个映射到另一个项目的一个子目录，或者反过来也行。\n当你执行一个子树合并时，Git 通常可以自动计算出其中一个是另外一个的子树从而实现正确的合并。</p>\n</div>\n<div class="paragraph">\n<p>我们来看一个例子如何将一个项目加入到一个已存在的项目中，然后将第二个项目的代码合并到第一个项目的子目录中。</p>\n</div>\n<div class="paragraph">\n<p>首先，我们将 Rack 应用添加到你的项目里。\n我们把 Rack 项目作为一个远程的引用添加到我们的项目里，然后检出到它自己的分支。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git remote add rack_remote https://github.com/rack/rack\n$ git fetch rack_remote --no-tags\nwarning: no common commits\nremote: Counting objects: 3184, done.\nremote: Compressing objects: 100% (1465/1465), done.\nremote: Total 3184 (delta 1952), reused 2770 (delta 1675)\nReceiving objects: 100% (3184/3184), 677.42 KiB | 4 KiB/s, done.\nResolving deltas: 100% (1952/1952), done.\nFrom https://github.com/rack/rack\n * [new branch]      build      -> rack_remote/build\n * [new branch]      master     -> rack_remote/master\n * [new branch]      rack-0.4   -> rack_remote/rack-0.4\n * [new branch]      rack-0.9   -> rack_remote/rack-0.9\n$ git checkout -b rack_branch rack_remote/master\nBranch rack_branch set up to track remote branch refs/remotes/rack_remote/master.\nSwitched to a new branch "rack_branch"</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在在我们的 <code>rack_branch</code> 分支里就有 Rack 项目的根目录，而我们的项目则在 <code>master</code> 分支里。\n如果你从一个分支切换到另一个分支，你可以看到它们的项目根目录是不同的：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ ls\nAUTHORS         KNOWN-ISSUES   Rakefile      contrib         lib\nCOPYING         README         bin           example         test\n$ git checkout master\nSwitched to branch "master"\n$ ls\nREADME</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这个是一个比较奇怪的概念。\n并不是仓库中的所有分支都是必须属于同一个项目的分支.\n这并不常见，因为没啥用，但是却是在不同分支里包含两条完全不同提交历史的最简单的方法。</p>\n</div>\n<div class="paragraph">\n<p>在这个例子中，我们希望将 Rack 项目拉到 <code>master</code> 项目中作为一个子目录。\n我们可以在 Git 中执行 <code>git read-tree</code> 来实现。\n你可以在 <a href="ch00/ch10-git-internals">Git 内部原理</a> 中查看更多 <code>read-tree</code> 的相关信息，现在你只需要知道它会读取一个分支的根目录树到当前的暂存区和工作目录里。\n先切回你的 <code>master</code> 分支，将 <code>rack_back</code> 分支拉取到我们项目的 <code>master</code> 分支中的 <code>rack</code> 子目录。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git read-tree --prefix=rack/ -u rack_branch</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>当我们提交时，那个子目录中拥有所有 Rack 项目的文件 —— 就像我们直接从压缩包里复制出来的一样。\n有趣的是你可以很容易地将一个分支的变更合并到另一个分支里。\n所以，当 Rack 项目有更新时，我们可以切换到那个分支来拉取上游的变更。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git checkout rack_branch\n$ git pull</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>接着，我们可以将这些变更合并回我们的 <code>master</code> 分支。\n使用 <code>--squash</code> 选项和使用 <code>-Xsubtree</code> 选项（它采用递归合并策略），\n都可以用来可以拉取变更并且预填充提交信息。\n（递归策略在这里是默认的，提到它是为了让读者有个清晰的概念。）</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git checkout master\n$ git merge --squash -s recursive -Xsubtree=rack rack_branch\nSquash commit -- not updating HEAD\nAutomatic merge went well; stopped before committing as requested</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>Rack 项目中所有的改动都被合并了，等待被提交到本地。\n你也可以用相反的方法——在 <code>master</code> 分支上的 <code>rack</code> 子目录中做改动然后将它们合并入你的\n<code>rack_branch</code> 分支中，之后你可能将其提交给项目维护着或者将它们推送到上游。</p>\n</div>\n<div class="paragraph">\n<p>这给我们提供了一种类似子模块工作流的工作方式，但是它并不需要用到子模块\n（有关子模块的内容我们会在 <a href="ch00/_git_submodules">子模块</a> 中介绍）。\n我们可以在自己的仓库中保持一些和其他项目相关的分支，偶尔使用子树合并将它们合并到我们的项目中。\n某些时候这种方式很有用，例如当所有的代码都提交到一个地方的时候。\n然而，它同时也有缺点，它更加复杂且更容易让人犯错，例如重复合并改动或者不小心将分支提交到一个无关的仓库上去。</p>\n</div>\n<div class="paragraph">\n<p>另外一个有点奇怪的地方是，当你想查看 <code>rack</code> 子目录和 <code>rack_branch</code> 分支的差异——\n来确定你是否需要合并它们——你不能使用普通的 <code>diff</code> 命令。\n取而代之的是，你必须使用 <code>git diff-tree</code> 来和你的目标分支做比较：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git diff-tree -p rack_branch</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>或者，将你的 <code>rack</code> 子目录和最近一次从服务器上抓取的 <code>master</code> 分支进行比较，你可以运行：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git diff-tree -p rack_remote/master</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-Rerere">next</a></div></div>\n\n\n    <h2>7.9 Git 工具 - Rerere</h2>\n  <div>\n<h3 id="ef_rerere">Rerere</h3>\n<div class="paragraph">\n<p><code>git rerere</code> 功能是一个隐藏的功能。\n正如它的名字“重用记录的解决方案（reuse recorded resolution）”所示，它允许你让 Git 记住解决一个块冲突的方法，\n这样在下一次看到相同冲突时，Git 可以为你自动地解决它。</p>\n</div>\n<div class="paragraph">\n<p>有几种情形下这个功能会非常有用。\n在文档中提到的一个例子是想要保证一个长期分支会干净地合并，但是又不想要一串中间的合并提交弄乱你的提交历史。\n将 <code>rerere</code> 功能开启后，你可以试着偶尔合并，解决冲突，然后退出合并。\n如果你持续这样做，那么最终的合并会很容易，因为 <code>rerere</code> 可以为你自动做所有的事情。</p>\n</div>\n<div class="paragraph">\n<p>可以将同样的策略用在维持一个变基的分支时，这样就不用每次解决同样的变基冲突了。\n或者你将一个分支合并并修复了一堆冲突后想要用变基来替代合并——你可能并不想要再次解决相同的冲突。</p>\n</div>\n<div class="paragraph">\n<p>另一个 <code>rerere</code> 的应用场景是当你偶尔将一堆正在改进的主题分支合并到一个可测试的头时，就像 Git 项目自身经常做的。\n如果测试失败，你可以倒回合并之前然后在去除导致测试失败的那个主题分支后重做合并，而不用再次重新解决所有的冲突。</p>\n</div>\n<div class="paragraph">\n<p>要启用 <code>rerere</code> 功能，只需运行以下配置选项即可：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git config --global rerere.enabled true</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>你也可以通过在特定的仓库中创建 <code>.git/rr-cache</code> 目录来开启它，但是设置选项更干净并且可以应用到全局。</p>\n</div>\n<div class="paragraph">\n<p>现在我们看一个简单的例子，类似之前的那个。\n假设有一个名为 <code>hello.rb</code> 的文件如下：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-ruby" data-lang="ruby">#! /usr/bin/env ruby\n\ndef hello\n  puts \'hello world\'\nend</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>在一个分支中修改单词 “hello” 为 “hola”，然后在另一个分支中修改 “world” 为 “mundo”，就像之前一样。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/rerere1.png" alt="rerere1">\n</div>\n</div>\n<div class="paragraph">\n<p>当合并两个分支到一起时，我们将会得到一个合并冲突：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git merge i18n-world\nAuto-merging hello.rb\nCONFLICT (content): Merge conflict in hello.rb\nRecorded preimage for \'hello.rb\'\nAutomatic merge failed; fix conflicts and then commit the result.</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>你会注意到那个新行 <code>Recorded preimage for FILE</code>。\n除此之外它应该看起来就像一个普通的合并冲突。\n在这个时候，<code>rerere</code> 可以告诉我们几件事。\n和往常一样，在这个时候你可以运行 <code>git status</code> 来查看所有冲突的内容：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git status\n# On branch master\n# Unmerged paths:\n#   (use "git reset HEAD <file>..." to unstage)\n#   (use "git add <file>..." to mark resolution)\n#\n#\tboth modified:      hello.rb\n#</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>然而，<code>git rerere</code> 也会通过 <code>git rerere status</code> 告诉你它记录的合并前状态。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git rerere status\nhello.rb</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>并且 <code>git rerere diff</code> 将会显示解决方案的当前状态——开始解决前与解决后的样子。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git rerere diff\n--- a/hello.rb\n+++ b/hello.rb\n@@ -1,11 +1,11 @@\n #! /usr/bin/env ruby\n\n def hello\n-<<<<<<<\n-  puts \'hello mundo\'\n-=======\n+<<<<<<< HEAD\n   puts \'hola world\'\n->>>>>>>\n+=======\n+  puts \'hello mundo\'\n+>>>>>>> i18n-world\n end</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>同样（这并不是真的与 <code>rerere</code> 有关系），可以使用 <code>git ls-files -u</code> 来查看冲突文件的之前、左边与右边版本：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git ls-files -u\n100644 39804c942a9c1f2c03dc7c5ebcd7f3e3a6b97519 1\thello.rb\n100644 a440db6e8d1fd76ad438a49025a9ad9ce746f581 2\thello.rb\n100644 54336ba847c3758ab604876419607e9443848474 3\thello.rb</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在可以通过改为 <code>puts \'hola mundo\'</code> 来解决它，可以再次运行 <code>git rerere diff</code> 命令来查看 rerere 将会记住的内容：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git rerere diff\n--- a/hello.rb\n+++ b/hello.rb\n@@ -1,11 +1,7 @@\n #! /usr/bin/env ruby\n\n def hello\n-<<<<<<<\n-  puts \'hello mundo\'\n-=======\n-  puts \'hola world\'\n->>>>>>>\n+  puts \'hola mundo\'\n end</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>所以从本质上说，当 Git 看到一个 <code>hello.rb</code> 文件的一个块冲突中有 “hello mundo” 在一边与 “hola world” 在另一边，它会将其解决为 “hola mundo”。</p>\n</div>\n<div class="paragraph">\n<p>现在我们可以将它标记为已解决并提交它：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git add hello.rb\n$ git commit\nRecorded resolution for \'hello.rb\'.\n[master 68e16e5] Merge branch \'i18n\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>可以看到它 "Recorded resolution for FILE"。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/rerere2.png" alt="rerere2">\n</div>\n</div>\n<div class="paragraph">\n<p>现在，让我们撤消那个合并然后将它变基到 <code>master</code> 分支顶部来替代它。\n可以通过使用之前在 <a href="ch00/_git_reset">重置揭密</a> 看到的 <code>git reset</code> 来回滚分支。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git reset --hard HEAD^\nHEAD is now at ad63f15 i18n the hello</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>我们的合并被撤消了。\n现在让我们变基主题分支。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git checkout i18n-world\nSwitched to branch \'i18n-world\'\n\n$ git rebase master\nFirst, rewinding head to replay your work on top of it...\nApplying: i18n one word\nUsing index info to reconstruct a base tree...\nFalling back to patching base and 3-way merge...\nAuto-merging hello.rb\nCONFLICT (content): Merge conflict in hello.rb\nResolved \'hello.rb\' using previous resolution.\nFailed to merge in the changes.\nPatch failed at 0001 i18n one word</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在，正像我们期望的一样，得到了相同的合并冲突，但是看一下 <code>Resolved FILE using previous resolution</code> 这行。\n如果我们看这个文件，会发现它已经被解决了，而且在它里面没有合并冲突标记。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-ruby" data-lang="ruby">#! /usr/bin/env ruby\n\ndef hello\n  puts \'hola mundo\'\nend</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>同样，<code>git diff</code> 将会显示出它是如何自动地重新解决的：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git diff\ndiff --cc hello.rb\nindex a440db6,54336ba..0000000\n--- a/hello.rb\n+++ b/hello.rb\n@@@ -1,7 -1,7 +1,7 @@@\n  #! /usr/bin/env ruby\n\n  def hello\n-   puts \'hola world\'\n -  puts \'hello mundo\'\n++  puts \'hola mundo\'\n  end</code></pre>\n</div>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/rerere3.png" alt="rerere3">\n</div>\n</div>\n<div class="paragraph">\n<p>也可以通过 <code>git checkout</code> 命令重新恢复到冲突时候的文件状态：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git checkout --conflict=merge hello.rb\n$ cat hello.rb\n#! /usr/bin/env ruby\n\ndef hello\n<<<<<<< ours\n  puts \'hola world\'\n=======\n  puts \'hello mundo\'\n>>>>>>> theirs\nend</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>我们将会在 <a href="ch00/_advanced_merging">高级合并</a> 中看到这个的一个例子。\n然而现在，让我们通过运行 <code>git rerere</code> 来重新解决它：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git rerere\nResolved \'hello.rb\' using previous resolution.\n$ cat hello.rb\n#! /usr/bin/env ruby\n\ndef hello\n  puts \'hola mundo\'\nend</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>我们通过 <code>rerere</code> 缓存的解决方案来自动重新解决了文件冲突。\n现在可以添加并继续变基来完成它。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git add hello.rb\n$ git rebase --continue\nApplying: i18n one word</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>所以，如果做了很多次重新合并，或者想要一个主题分支始终与你的 <code>master</code> 分支保持最新但却不想要一大堆合并，\n或者经常变基，打开 <code>rerere</code> 功能可以帮助你的生活变得更美好。</p>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%AB%98%E7%BA%A7%E5%90%88%E5%B9%B6">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E4%BD%BF%E7%94%A8-Git-%E8%B0%83%E8%AF%95">next</a></div></div>\n\n\n    <h2>7.10 Git 工具 - 使用 Git 调试</h2>\n  <div>\n<h3 id="_使用_git_调试">使用 Git 调试</h3>\n<div class="paragraph">\n<p>除了主要作为版本控制工具外，Git 也提供了几个命令来辅助你调试你的项目源码中的问题。\n由于 Git 被设计成适用于几乎所有类型的内容，这些工具也相当通用，但它们往往可以在出现问题时帮助你找到 bug 或者原因。</p>\n</div>\n<div class="sect3">\n<h4 id="_file_annotation">文件标注</h4>\n<div class="paragraph">\n<p>如果你在追踪代码中的一个 bug，并且想知道是什么时候以及为何会引入，文件标注通常是最好用的工具。\n它能显示任何文件中每行最后一次修改的提交记录。\n所以，如果你在代码中看到一个有 bug 的方法，你可以使用 <code>git blame</code> 标注这个文件，查看哪一次提交引入了这行。</p>\n</div>\n<div class="paragraph">\n<p>以下示例用 <code>git blame</code> 确定了 Linux 内核源码顶层的 <code>Makefile</code> 中每一行分别来自哪个提交和提交者，\n此外用 <code>-L</code> 选项还可以将标注的输出限制为该文件中的第 69 行到第 82 行。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git blame -L 69,82 Makefile\nb8b0618cf6fab (Cheng Renquan  2009-05-26 16:03:07 +0800 69) ifeq ("$(origin V)", "command line")\nb8b0618cf6fab (Cheng Renquan  2009-05-26 16:03:07 +0800 70)   KBUILD_VERBOSE = $(V)\n^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 71) endif\n^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 72) ifndef KBUILD_VERBOSE\n^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 73)   KBUILD_VERBOSE = 0\n^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 74) endif\n^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 75)\n066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 76) ifeq ($(KBUILD_VERBOSE),1)\n066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 77)   quiet =\n066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 78)   Q =\n066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 79) else\n066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 80)   quiet=quiet_\n066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 81)   Q = @\n066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 82) endif</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>请注意，第一个字段是最后一次修改该行的提交的部分 SHA-1 值。\n接下来两个字段的值是从提交中提取出来的——作者的名字以及提交的时间——所以你就可以很轻易地知道是谁在什么时候修改了那一行。\n接下来就是行号和文件内容。\n注意一下 <code>^1da177e4c3f4</code> 这个提交的几行，其中的前缀 <code>^</code> 指出了该文件自第一次提交后从未修改的那些行。\n这会带来小小的困惑，因为目前你至少已经看到三种 Git 使用 <code>^</code> 来修饰一个提交的 SHA-1 值的不同含义，但这里确实就是这个意思。</p>\n</div>\n<div class="paragraph">\n<p>另一件比较酷的事情是 Git 不会显式地记录文件的重命名。\n它会记录快照，然后在事后尝试计算出重命名的动作。\n这其中有一个很有意思的特性就是你可以让 Git 找出所有的代码移动。\n如果你在 <code>git blame</code> 后面加上一个 <code>-C</code>，Git 会分析你正在标注的文件，\n并且尝试找出文件中从别的地方复制过来的代码片段的原始出处。\n比如，你将 <code>GITServerHandler.m</code> 这个文件拆分为数个文件，其中一个文件是 <code>GITPackUpload.m</code>。\n对 <code>GITPackUpload.m</code> 执行带 <code>-C</code> 参数的 blame 命令，你就可以看到代码块的原始出处：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git blame -C -L 141,153 GITPackUpload.m\nf344f58d GITServerHandler.m (Scott 2009-01-04 141)\nf344f58d GITServerHandler.m (Scott 2009-01-04 142) - (void) gatherObjectShasFromC\nf344f58d GITServerHandler.m (Scott 2009-01-04 143) {\n70befddd GITServerHandler.m (Scott 2009-03-22 144)         //NSLog(@"GATHER COMMI\nad11ac80 GITPackUpload.m    (Scott 2009-03-24 145)\nad11ac80 GITPackUpload.m    (Scott 2009-03-24 146)         NSString *parentSha;\nad11ac80 GITPackUpload.m    (Scott 2009-03-24 147)         GITCommit *commit = [g\nad11ac80 GITPackUpload.m    (Scott 2009-03-24 148)\nad11ac80 GITPackUpload.m    (Scott 2009-03-24 149)         //NSLog(@"GATHER COMMI\nad11ac80 GITPackUpload.m    (Scott 2009-03-24 150)\n56ef2caf GITServerHandler.m (Scott 2009-01-05 151)         if(commit) {\n56ef2caf GITServerHandler.m (Scott 2009-01-05 152)                 [refDict setOb\n56ef2caf GITServerHandler.m (Scott 2009-01-05 153)</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这个功能很有用。\n通常来说，你会认为复制代码过来的那个提交是最原始的提交，因为那是你第一次在这个文件中修改了这几行。\n但 Git 会告诉你，你第一次写这几行代码的那个提交才是原始提交，即使这是在另外一个文件里写的。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_binary_search">二分查找</h4>\n<div class="paragraph">\n<p>当你知道问题是在哪里引入的情况下文件标注可以帮助你查找问题。\n如果你不知道哪里出了问题，并且自从上次可以正常运行到现在已经有数十个或者上百个提交，\n这个时候你可以使用 <code>git bisect</code> 来帮助查找。\n<code>bisect</code> 命令会对你的提交历史进行二分查找来帮助你尽快找到是哪一个提交引入了问题。</p>\n</div>\n<div class="paragraph">\n<p>假设你刚刚在线上环境部署了你的代码，接着收到一些 bug 反馈，\n但这些 bug 在你之前的开发环境里没有出现过，这让你百思不得其解。\n你重新查看了你的代码，发现这个问题是可以被重现的，但是你不知道哪里出了问题。\n你可以用 <strong>二分法</strong> 来找到这个问题。\n首先执行 <code>git bisect start</code> 来启动，接着执行 <code>git bisect bad</code> 来告诉系统当前你所在的提交是有问题的。\n然后你必须使用 <code>git bisect good <good_commit></code>，告诉 bisect 已知的最后一次正常状态是哪次提交：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git bisect start\n$ git bisect bad\n$ git bisect good v1.0\nBisecting: 6 revisions left to test after this\n[ecb6e1bc347ccecc5f9350d878ce677feb13d3b2] error handling on repo</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>Git 发现在你标记为正常的提交（v1.0）和当前的错误版本之间有大约12次提交，于是 Git 检出中间的那个提交。\n现在你可以执行测试，看看在这个提交下问题是不是还是存在。\n如果还存在，说明问题是在这个提交之前引入的；如果问题不存在，说明问题是在这个提交之后引入的。\n假设测试结果是没有问题的，你可以通过 <code>git bisect good</code> 来告诉 Git，然后继续寻找。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git bisect good\nBisecting: 3 revisions left to test after this\n[b047b02ea83310a70fd603dc8cd7a6cd13d15c04] secure this thing</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在你在另一个提交上了，这个提交是刚刚那个测试通过的提交和有问题的提交的中点。\n你再一次执行测试，发现这个提交下是有问题的，因此你可以通过 <code>git bisect bad</code> 告诉 Git：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git bisect bad\nBisecting: 1 revisions left to test after this\n[f71ce38690acf49c1f3c9bea38e09d82a5ce6014] drop exceptions table</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这个提交是正常的，现在 Git 拥有的信息已经可以确定引入问题的位置在哪里。\n它会告诉你第一个错误提交的 SHA-1 值并显示一些提交说明，以及哪些文件在那次提交里被修改过，这样你可以找出引入 bug 的根源：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git bisect good\nb047b02ea83310a70fd603dc8cd7a6cd13d15c04 is first bad commit\ncommit b047b02ea83310a70fd603dc8cd7a6cd13d15c04\nAuthor: PJ Hyett <pjhyett@example.com>\nDate:   Tue Jan 27 14:48:32 2009 -0800\n\n    secure this thing\n\n:040000 040000 40ee3e7821b895e52c1695092db9bdc4c61d1730\nf24d3c6ebcfc639b1a3814550e62d60b8e68a8e4 M  config</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>当你完成这些操作之后，你应该执行 <code>git bisect reset</code> 重置你的 HEAD 指针到最开始的位置，\n否则你会停留在一个奇怪的状态：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git bisect reset</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这是一个可以帮助你在几分钟内从数百个提交中找到 bug 的强大工具。\n事实上，如果你有一个脚本在项目是正常的情况下返回 0，在不正常的情况下返回非 0，你可以使 <code>git bisect</code> 自动化这些操作。\n首先，你设定好项目正常以及不正常所在提交的二分查找范围。\n你可以通过 <code>bisect start</code> 命令的参数来设定这两个提交，第一个参数是项目不正常的提交，第二个参数是项目正常的提交：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git bisect start HEAD v1.0\n$ git bisect run test-error.sh</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>Git 会自动在每个被检出的提交里执行 <code>test-error.sh</code>，直到找到项目第一个不正常的提交。\n你也可以执行 <code>make</code> 或者 <code>make tests</code> 或者其他东西来进行自动化测试。</p>\n</div>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-Rerere">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">next</a></div></div>\n\n\n    <h2>7.11 Git 工具 - 子模块</h2>\n  <div>\n<h3 id="_git_submodules">子模块</h3>\n<div class="paragraph">\n<p>有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。\n也许是第三方库，或者你独立开发的，用于多个父项目的库。\n现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。</p>\n</div>\n<div class="paragraph">\n<p>我们举一个例子。\n假设你正在开发一个网站然后创建了 Atom 订阅。\n你决定使用一个库，而不是写自己的 Atom 生成代码。\n你可能不得不通过 CPAN 安装或 Ruby gem 来包含共享库中的代码，或者将源代码直接拷贝到自己的项目中。\n如果将这个库包含进来，那么无论用何种方式都很难定制它，部署则更加困难，因为你必须确保每一个客户端都包含该库。\n如果将代码复制到自己的项目中，那么你做的任何自定义修改都会使合并上游的改动变得困难。</p>\n</div>\n<div class="paragraph">\n<p>Git 通过子模块来解决这个问题。\n子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。\n它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p>\n</div>\n<div class="sect3">\n<h4 id="_starting_submodules">开始使用子模块</h4>\n<div class="paragraph">\n<p>我们将要演示如何在一个被分成一个主项目与几个子项目的项目上开发。</p>\n</div>\n<div class="paragraph">\n<p>我们首先将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。\n你可以通过在 <code>git submodule add</code> 命令后面加上想要跟踪的项目的相对或绝对 URL 来添加新的子模块。\n在本例中，我们将会添加一个名为 “DbConnector” 的库。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git submodule add https://github.com/chaconinc/DbConnector\nCloning into \'DbConnector\'...\nremote: Counting objects: 11, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 11 (delta 0), reused 11 (delta 0)\nUnpacking objects: 100% (11/11), done.\nChecking connectivity... done.</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>默认情况下，子模块会将子项目放到一个与仓库同名的目录中，本例中是 “DbConnector”。\n如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。</p>\n</div>\n<div class="paragraph">\n<p>如果这时运行 <code>git status</code>，你会注意到几件事。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\n\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n\tnew file:   .gitmodules\n\tnew file:   DbConnector</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>首先应当注意到新的 <code>.gitmodules</code> 文件。\n该配置文件保存了项目 URL 与已经拉取的本地目录之间的映射：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-ini" data-lang="ini">[submodule "DbConnector"]\n\tpath = DbConnector\n\turl = https://github.com/chaconinc/DbConnector</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果有多个子模块，该文件中就会有多条记录。\n要重点注意的是，该文件也像 <code>.gitignore</code> 文件一样受到（通过）版本控制。\n它会和该项目的其他部分一同被拉取推送。\n这就是克隆该项目的人知道去哪获得子模块的原因。</p>\n</div>\n<div class="admonitionblock note">\n<table>\n<tbody><tr>\n<td class="icon">\n<div class="title">Note</div>\n</td>\n<td class="content">\n<div class="paragraph">\n<p>由于 .gitmodules 文件中的 URL 是人们首先尝试克隆/拉取的地方，因此请尽可能确保你使用的 URL 大家都能访问。\n例如，若你要使用的推送 URL 与他人的拉取 URL 不同，那么请使用他人能访问到的 URL。\n你也可以根据自己的需要，通过在本地执行 <code>git config submodule.DbConnector.url <私有URL></code> 来覆盖这个选项的值。\n如果可行的话，一个相对路径会很有帮助。</p>\n</div>\n</td>\n</tr>\n</tbody></table>\n</div>\n<div class="paragraph">\n<p>在 <code>git status</code> 输出中列出的另一个是项目文件夹记录。\n如果你运行 <code>git diff</code>，会看到类似下面的信息：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git diff --cached DbConnector\ndiff --git a/DbConnector b/DbConnector\nnew file mode 160000\nindex 0000000..c3f01dc\n--- /dev/null\n+++ b/DbConnector\n@@ -0,0 +1 @@\n+Subproject commit c3f01dc8862123d317dd46284b05b6892c7b29bc</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>虽然 <code>DbConnector</code> 是工作目录中的一个子目录，但 Git 还是会将它视作一个子模块。当你不在那个目录中时，Git 并不会跟踪它的内容，\n而是将它看作子模块仓库中的某个具体的提交。</p>\n</div>\n<div class="paragraph">\n<p>如果你想看到更漂亮的差异输出，可以给 <code>git diff</code> 传递 <code>--submodule</code> 选项。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git diff --cached --submodule\ndiff --git a/.gitmodules b/.gitmodules\nnew file mode 100644\nindex 0000000..71fc376\n--- /dev/null\n+++ b/.gitmodules\n@@ -0,0 +1,3 @@\n+[submodule "DbConnector"]\n+       path = DbConnector\n+       url = https://github.com/chaconinc/DbConnector\nSubmodule DbConnector 0000000...c3f01dc (new submodule)</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>当你提交时，会看到类似下面的信息：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git commit -am \'added DbConnector module\'\n[master fb9093c] added DbConnector module\n 2 files changed, 4 insertions(+)\n create mode 100644 .gitmodules\n create mode 160000 DbConnector</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>注意 <code>DbConnector</code> 记录的 <code>160000</code> 模式。\n这是 Git 中的一种特殊模式，它本质上意味着你是将一次提交记作一项目录记录的，而非将它记录成一个子目录或者一个文件。</p>\n</div>\n<div class="paragraph">\n<p>最后，推送这些更改：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git push origin master</code></pre>\n</div>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_cloning_submodules">克隆含有子模块的项目</h4>\n<div class="paragraph">\n<p>接下来我们将会克隆一个含有子模块的项目。\n当你在克隆这样的项目时，默认会包含该子模块目录，但其中还没有任何文件：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git clone https://github.com/chaconinc/MainProject\nCloning into \'MainProject\'...\nremote: Counting objects: 14, done.\nremote: Compressing objects: 100% (13/13), done.\nremote: Total 14 (delta 1), reused 13 (delta 0)\nUnpacking objects: 100% (14/14), done.\nChecking connectivity... done.\n$ cd MainProject\n$ ls -la\ntotal 16\ndrwxr-xr-x   9 schacon  staff  306 Sep 17 15:21 .\ndrwxr-xr-x   7 schacon  staff  238 Sep 17 15:21 ..\ndrwxr-xr-x  13 schacon  staff  442 Sep 17 15:21 .git\n-rw-r--r--   1 schacon  staff   92 Sep 17 15:21 .gitmodules\ndrwxr-xr-x   2 schacon  staff   68 Sep 17 15:21 DbConnector\n-rw-r--r--   1 schacon  staff  756 Sep 17 15:21 Makefile\ndrwxr-xr-x   3 schacon  staff  102 Sep 17 15:21 includes\ndrwxr-xr-x   4 schacon  staff  136 Sep 17 15:21 scripts\ndrwxr-xr-x   4 schacon  staff  136 Sep 17 15:21 src\n$ cd DbConnector/\n$ ls\n$</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>其中有 <code>DbConnector</code> 目录，不过是空的。\n你必须运行两个命令：<code>git submodule init</code> 用来初始化本地配置文件，而 <code>git submodule update</code> 则从该项目中抓取所有数据并检出父项目中列出的合适的提交。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git submodule init\nSubmodule \'DbConnector\' (https://github.com/chaconinc/DbConnector) registered for path \'DbConnector\'\n$ git submodule update\nCloning into \'DbConnector\'...\nremote: Counting objects: 11, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 11 (delta 0), reused 11 (delta 0)\nUnpacking objects: 100% (11/11), done.\nChecking connectivity... done.\nSubmodule path \'DbConnector\': checked out \'c3f01dc8862123d317dd46284b05b6892c7b29bc\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在 <code>DbConnector</code> 子目录是处在和之前提交时相同的状态了。</p>\n</div>\n<div class="paragraph">\n<p>不过还有更简单一点的方式。\n如果给 <code>git clone</code> 命令传递 <code>--recurse-submodules</code> 选项，它就会自动初始化并更新仓库中的每一个子模块，\n包括可能存在的嵌套子模块。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git clone --recurse-submodules https://github.com/chaconinc/MainProject\nCloning into \'MainProject\'...\nremote: Counting objects: 14, done.\nremote: Compressing objects: 100% (13/13), done.\nremote: Total 14 (delta 1), reused 13 (delta 0)\nUnpacking objects: 100% (14/14), done.\nChecking connectivity... done.\nSubmodule \'DbConnector\' (https://github.com/chaconinc/DbConnector) registered for path \'DbConnector\'\nCloning into \'DbConnector\'...\nremote: Counting objects: 11, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 11 (delta 0), reused 11 (delta 0)\nUnpacking objects: 100% (11/11), done.\nChecking connectivity... done.\nSubmodule path \'DbConnector\': checked out \'c3f01dc8862123d317dd46284b05b6892c7b29bc\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果你已经克隆了项目但忘记了 <code>--recurse-submodules</code>，那么可以运行 <code>git submodule update --init</code>\n将 <code>git submodule init</code> 和 <code>git submodule update</code> 合并成一步。如果还要初始化、抓取并检出任何嵌套的子模块，\n请使用简明的 <code>git submodule update --init --recursive</code>。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_在包含子模块的项目上工作">在包含子模块的项目上工作</h4>\n<div class="paragraph">\n<p>现在我们有一份包含子模块的项目副本，我们将会同时在主项目和子模块项目上与队员协作。</p>\n</div>\n<div class="sect4">\n<h5 id="_从子模块的远端拉取上游修改">从子模块的远端拉取上游修改</h5>\n<div class="paragraph">\n<p>在项目中使用子模块的最简模型，就是只使用子项目并不时地获取更新，而并不在你的检出中进行任何更改。\n我们来看一个简单的例子。</p>\n</div>\n<div class="paragraph">\n<p>如果想要在子模块中查看新工作，可以进入到目录中运行 <code>git fetch</code> 与 <code>git merge</code>，合并上游分支来更新本地代码。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git fetch\nFrom https://github.com/chaconinc/DbConnector\n   c3f01dc..d0354fc  master     -> origin/master\n$ git merge origin/master\nUpdating c3f01dc..d0354fc\nFast-forward\n scripts/connect.sh | 1 +\n src/db.c           | 1 +\n 2 files changed, 2 insertions(+)</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果你现在返回到主项目并运行 <code>git diff --submodule</code>，就会看到子模块被更新的同时获得了一个包含新添加提交的列表。\n如果你不想每次运行 <code>git diff</code> 时都输入 <code>--submodule</code>，那么可以将 <code>diff.submodule</code> 设置为 “log” 来将其作为默认行为。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git config --global diff.submodule log\n$ git diff\nSubmodule DbConnector c3f01dc..d0354fc:\n  > more efficient db routine\n  > better connection routine</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果在此时提交，那么你会将子模块锁定为其他人更新时的新代码。</p>\n</div>\n<div class="paragraph">\n<p>如果你不想在子目录中手动抓取与合并，那么还有种更容易的方式。\n运行 <code>git submodule update --remote</code>，Git 将会进入子模块然后抓取并更新。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git submodule update --remote DbConnector\nremote: Counting objects: 4, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 4 (delta 2), reused 4 (delta 2)\nUnpacking objects: 100% (4/4), done.\nFrom https://github.com/chaconinc/DbConnector\n   3f19983..d0354fc  master     -> origin/master\nSubmodule path \'DbConnector\': checked out \'d0354fc054692d3906c85c3af05ddce39a1c0644\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>此命令默认会假定你想要更新并检出子模块仓库的 <code>master</code> 分支。\n不过你也可以设置为想要的其他分支。\n例如，你想要 DbConnector 子模块跟踪仓库的 “stable” 分支，那么既可以在 <code>.gitmodules</code> 文件中设置\n（这样其他人也可以跟踪它），也可以只在本地的 <code>.git/config</code> 文件中设置。\n让我们在 <code>.gitmodules</code> 文件中设置它：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git config -f .gitmodules submodule.DbConnector.branch stable\n\n$ git submodule update --remote\nremote: Counting objects: 4, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 4 (delta 2), reused 4 (delta 2)\nUnpacking objects: 100% (4/4), done.\nFrom https://github.com/chaconinc/DbConnector\n   27cf5d3..c87d55d  stable -> origin/stable\nSubmodule path \'DbConnector\': checked out \'c87d55d4c6d4b05ee34fbc8cb6f7bf4585ae6687\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果不用 <code>-f .gitmodules</code> 选项，那么它只会为你做修改。但是在仓库中保留跟踪信息更有意义一些，因为其他人也可以得到同样的效果。</p>\n</div>\n<div class="paragraph">\n<p>这时我们运行 <code>git status</code>，Git 会显示子模块中有“新提交”。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n  modified:   .gitmodules\n  modified:   DbConnector (new commits)\n\nno changes added to commit (use "git add" and/or "git commit -a")</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果你设置了配置选项 <code>status.submodulesummary</code>，Git 也会显示你的子模块的更改摘要：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git config status.submodulesummary 1\n\n$ git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n\tmodified:   .gitmodules\n\tmodified:   DbConnector (new commits)\n\nSubmodules changed but not updated:\n\n* DbConnector c3f01dc...c87d55d (4):\n  > catch non-null terminated lines</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这时如果运行 <code>git diff</code>，可以看到我们修改了 .gitmodules 文件，同时还有几个已拉取的提交需要提交到我们自己的子模块项目中。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git diff\ndiff --git a/.gitmodules b/.gitmodules\nindex 6fc0b3d..fd1cc29 100644\n--- a/.gitmodules\n+++ b/.gitmodules\n@@ -1,3 +1,4 @@\n [submodule "DbConnector"]\n        path = DbConnector\n        url = https://github.com/chaconinc/DbConnector\n+       branch = stable\n Submodule DbConnector c3f01dc..c87d55d:\n  > catch non-null terminated lines\n  > more robust error handling\n  > more efficient db routine\n  > better connection routine</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这非常有趣，因为我们可以直接看到将要提交到子模块中的提交日志。\n提交之后，你也可以运行 <code>git log -p</code> 查看这个信息。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log -p --submodule\ncommit 0a24cfc121a8a3c118e0105ae4ae4c00281cf7ae\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Wed Sep 17 16:37:02 2014 +0200\n\n    updating DbConnector for bug fixes\n\ndiff --git a/.gitmodules b/.gitmodules\nindex 6fc0b3d..fd1cc29 100644\n--- a/.gitmodules\n+++ b/.gitmodules\n@@ -1,3 +1,4 @@\n [submodule "DbConnector"]\n        path = DbConnector\n        url = https://github.com/chaconinc/DbConnector\n+       branch = stable\nSubmodule DbConnector c3f01dc..c87d55d:\n  > catch non-null terminated lines\n  > more robust error handling\n  > more efficient db routine\n  > better connection routine</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>当运行 <code>git submodule update --remote</code> 时，Git 默认会尝试更新 <strong>所有</strong> 子模块，\n所以如果有很多子模块的话，你可以传递想要更新的子模块的名字。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_从项目远端拉取上游更改">从项目远端拉取上游更改</h5>\n<div class="paragraph">\n<p>现在，让我们站在协作者的视角，他有自己的 <code>MainProject</code> 仓库的本地克隆，\n只是执行 <code>git pull</code> 获取你新提交的更改还不够：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git pull\nFrom https://github.com/chaconinc/MainProject\n   fb9093c..0a24cfc  master     -> origin/master\nFetching submodule DbConnector\nFrom https://github.com/chaconinc/DbConnector\n   c3f01dc..c87d55d  stable     -> origin/stable\nUpdating fb9093c..0a24cfc\nFast-forward\n .gitmodules         | 2 +-\n DbConnector         | 2 +-\n 2 files changed, 2 insertions(+), 2 deletions(-)\n\n$ git status\n On branch master\nYour branch is up-to-date with \'origin/master\'.\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n\tmodified:   DbConnector (new commits)\n\nSubmodules changed but not updated:\n\n* DbConnector c87d55d...c3f01dc (4):\n  < catch non-null terminated lines\n  < more robust error handling\n  < more efficient db routine\n  < better connection routine\n\nno changes added to commit (use "git add" and/or "git commit -a")</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>默认情况下，<code>git pull</code> 命令会递归地抓取子模块的更改，如上面第一个命令的输出所示。\n然而，它不会 <strong>更新</strong> 子模块。这点可通过 <code>git status</code> 命令看到，它会显示子模块“已修改”，且“有新的提交”。\n此外，左边的尖括号（<）指出了新的提交，表示这些提交已在 MainProject 中记录，但尚未在本地的 <code>DbConnector</code> 中检出。\n为了完成更新，你需要运行 <code>git submodule update</code>：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git submodule update --init --recursive\nSubmodule path \'vendor/plugins/demo\': checked out \'48679c6302815f6c76f1fe30625d795d9e55fc56\'\n\n$ git status\n On branch master\nYour branch is up-to-date with \'origin/master\'.\nnothing to commit, working tree clean</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>请注意，为安全起见，如果 MainProject 提交了你刚拉取的新子模块，那么应该在\n<code>git submodule update</code> 后面添加 <code>--init</code> 选项，如果子模块有嵌套的子模块，则应使用 <code>--recursive</code> 选项。</p>\n</div>\n<div class="paragraph">\n<p>如果你想自动化此过程，那么可以为 <code>git pull</code> 命令添加&nbsp;<code>--recurse-submodules</code> 选项（从 Git 2.14 开始）。\n这会让 Git 在拉取后运行 <code>git submodule update</code>，将子模块置为正确的状态。\n此外，如果你想让 Git 总是以 <code>--recurse-submodules</code> 拉取，可以将配置选项 <code>submodule.recurse</code> 设置为 <code>true</code>\n（从 Git 2.15 开始可用于 <code>git pull</code>）。此选项会让 Git 为所有支持 <code>--recurse-submodules</code> 的命令使用该选项（除 <code>clone</code> 以外）。</p>\n</div>\n<div class="paragraph">\n<p>在为父级项目拉取更新时，还会出现一种特殊的情况：在你拉取的提交中，\n可能 <code>.gitmodules</code> 文件中记录的子模块的 URL 发生了改变。\n比如，若子模块项目改变了它的托管平台，就会发生这种情况。\n此时，若父级项目引用的子模块提交不在仓库中本地配置的子模块远端上，那么执行\n<code>git pull --recurse-submodules</code> 或 <code>git submodule update</code> 就会失败。\n为了补救，需要借助 <code>git submodule sync</code> 命令：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console"># 将新的 URL 复制到本地配置中\n$ git submodule sync --recursive\n# 从新 URL 更新子模块\n$ git submodule update --init --recursive</code></pre>\n</div>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_在子模块上工作">在子模块上工作</h5>\n<div class="paragraph">\n<p>你很有可能正在使用子模块，因为你确实想在子模块中编写代码的同时，还想在主项目上编写代码（或者跨子模块工作）。\n否则你大概只能用简单的依赖管理系统（如 Maven 或 Rubygems）来替代了。</p>\n</div>\n<div class="paragraph">\n<p>现在我们将通过一个例子来演示如何在子模块与主项目中同时做修改，以及如何同时提交与发布那些修改。</p>\n</div>\n<div class="paragraph">\n<p>到目前为止，当我们运行 <code>git submodule update</code> 从子模块仓库中抓取修改时，\nGit 将会获得这些改动并更新子目录中的文件，但是会将子仓库留在一个称作“游离的 HEAD”的状态。\n这意味着没有本地工作分支（例如 “master” ）跟踪改动。\n如果没有工作分支跟踪更改，也就意味着即便你将更改提交到了子模块，这些更改也很可能会在下次运行\n<code>git submodule update</code> 时丢失。如果你想要在子模块中跟踪这些修改，还需要一些额外的步骤。</p>\n</div>\n<div class="paragraph">\n<p>为了将子模块设置得更容易进入并修改，你需要做两件事。\n首先，进入每个子模块并检出其相应的工作分支。\n接着，若你做了更改就需要告诉 Git 它该做什么，然后运行 <code>git submodule update --remote</code> 来从上游拉取新工作。\n你可以选择将它们合并到你的本地工作中，也可以尝试将你的工作变基到新的更改上。</p>\n</div>\n<div class="paragraph">\n<p>首先，让我们进入子模块目录然后检出一个分支。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ cd DbConnector/\n$ git checkout stable\nSwitched to branch \'stable\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>然后尝试用 “merge” 选项来更新子模块。\n为了手动指定它，我们只需给 <code>update</code> 添加 <code>--merge</code> 选项即可。\n这时我们将会看到服务器上的这个子模块有一个改动并且它被合并了进来。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ cd ..\n$ git submodule update --remote --merge\nremote: Counting objects: 4, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 4 (delta 2), reused 4 (delta 2)\nUnpacking objects: 100% (4/4), done.\nFrom https://github.com/chaconinc/DbConnector\n   c87d55d..92c7337  stable     -> origin/stable\nUpdating c87d55d..92c7337\nFast-forward\n src/main.c | 1 +\n 1 file changed, 1 insertion(+)\nSubmodule path \'DbConnector\': merged in \'92c7337b30ef9e0893e758dac2459d07362ab5ea\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果我们进入 DbConnector 目录，可以发现新的改动已经合并入本地 <code>stable</code> 分支。\n现在让我们看看当我们对库做一些本地的改动而同时其他人推送另外一个修改到上游时会发生什么。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ cd DbConnector/\n$ vim src/db.c\n$ git commit -am \'unicode support\'\n[stable f906e16] unicode support\n 1 file changed, 1 insertion(+)</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果我们现在更新子模块，就会看到当我们在本地做了更改时上游也有一个改动，我们需要将它并入本地。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ cd ..\n$ git submodule update --remote --rebase\nFirst, rewinding head to replay your work on top of it...\nApplying: unicode support\nSubmodule path \'DbConnector\': rebased into \'5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果你忘记 <code>--rebase</code> 或 <code>--merge</code>，Git 会将子模块更新为服务器上的状态。并且会将项目重置为一个游离的 HEAD 状态。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git submodule update --remote\nSubmodule path \'DbConnector\': checked out \'5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>即便这真的发生了也不要紧，你只需回到目录中再次检出你的分支（即还包含着你的工作的分支）然后手动地合并或变基 <code>origin/stable</code>（或任何一个你想要的远程分支）就行了。</p>\n</div>\n<div class="paragraph">\n<p>如果你没有提交子模块的改动，那么运行一个子模块更新也不会出现问题，此时 Git 会只抓取更改而并不会覆盖子模块目录中未保存的工作。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git submodule update --remote\nremote: Counting objects: 4, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 4 (delta 0), reused 4 (delta 0)\nUnpacking objects: 100% (4/4), done.\nFrom https://github.com/chaconinc/DbConnector\n   5d60ef9..c75e92a  stable     -> origin/stable\nerror: Your local changes to the following files would be overwritten by checkout:\n\tscripts/setup.sh\nPlease, commit your changes or stash them before you can switch branches.\nAborting\nUnable to checkout \'c75e92a2b3855c9e5b66f915308390d9db204aca\' in submodule path \'DbConnector\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果你做了一些与上游改动冲突的改动，当运行更新时 Git 会让你知道。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git submodule update --remote --merge\nAuto-merging scripts/setup.sh\nCONFLICT (content): Merge conflict in scripts/setup.sh\nRecorded preimage for \'scripts/setup.sh\'\nAutomatic merge failed; fix conflicts and then commit the result.\nUnable to merge \'c75e92a2b3855c9e5b66f915308390d9db204aca\' in submodule path \'DbConnector\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>你可以进入子模块目录中然后就像平时那样修复冲突。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_publishing_submodules">发布子模块改动</h5>\n<div class="paragraph">\n<p>现在我们的子模块目录中有一些改动。\n其中有一些是我们通过更新从上游引入的，而另一些是本地生成的，由于我们还没有推送它们，所以对任何其他人都不可用。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git diff\nSubmodule DbConnector c87d55d..82d2ad3:\n  > Merge from origin/stable\n  > updated setup script\n  > unicode support\n  > remove unnecessary method\n  > add new option for conn pooling</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果我们在主项目中提交并推送但并不推送子模块上的改动，其他尝试检出我们修改的人会遇到麻烦，\n因为他们无法得到依赖的子模块改动。那些改动只存在于我们本地的拷贝中。</p>\n</div>\n<div class="paragraph">\n<p>为了确保这不会发生，你可以让 Git 在推送到主项目前检查所有子模块是否已推送。\n<code>git push</code> 命令接受可以设置为 “check” 或 “on-demand” 的 <code>--recurse-submodules</code> 参数。\n如果任何提交的子模块改动没有推送那么 “check” 选项会直接使 <code>push</code> 操作失败。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git push --recurse-submodules=check\nThe following submodule paths contain changes that can\nnot be found on any remote:\n  DbConnector\n\nPlease try\n\n\tgit push --recurse-submodules=on-demand\n\nor cd to the path and use\n\n\tgit push\n\nto push them to a remote.</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如你所见，它也给我们了一些有用的建议，指导接下来该如何做。\n最简单的选项是进入每一个子模块中然后手动推送到远程仓库，确保它们能被外部访问到，之后再次尝试这次推送。\n如果你想要对所有推送都执行检查，那么可以通过设置 <code>git config push.recurseSubmodules check</code> 让它成为默认行为。</p>\n</div>\n<div class="paragraph">\n<p>另一个选项是使用 “on-demand” 值，它会尝试为你这样做。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git push --recurse-submodules=on-demand\nPushing submodule \'DbConnector\'\nCounting objects: 9, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (8/8), done.\nWriting objects: 100% (9/9), 917 bytes | 0 bytes/s, done.\nTotal 9 (delta 3), reused 0 (delta 0)\nTo https://github.com/chaconinc/DbConnector\n   c75e92a..82d2ad3  stable -> stable\nCounting objects: 2, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (2/2), 266 bytes | 0 bytes/s, done.\nTotal 2 (delta 1), reused 0 (delta 0)\nTo https://github.com/chaconinc/MainProject\n   3d6d338..9a377d1  master -> master</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如你所见，Git 进入到 DbConnector 模块中然后在推送主项目前推送了它。\n如果那个子模块因为某些原因推送失败，主项目也会推送失败。\n你也可以通过设置 <code>git config push.recurseSubmodules on-demand</code> 让它成为默认行为。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_合并子模块改动">合并子模块改动</h5>\n<div class="paragraph">\n<p>如果你和其他人同时改动了一个子模块引用，那么可能会遇到一些问题。\n也就是说，如果子模块的历史已经分叉并且在父项目中分别提交到了分叉的分支上，那么你需要做一些工作来修复它。</p>\n</div>\n<div class="paragraph">\n<p>如果一个提交是另一个的直接祖先（一个快进式合并），那么 Git 会简单地选择之后的提交来合并，这样没什么问题。</p>\n</div>\n<div class="paragraph">\n<p>不过，Git 甚至不会尝试去进行一次简单的合并。\n如果子模块提交已经分叉且需要合并，那你会得到类似下面的信息：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git pull\nremote: Counting objects: 2, done.\nremote: Compressing objects: 100% (1/1), done.\nremote: Total 2 (delta 1), reused 2 (delta 1)\nUnpacking objects: 100% (2/2), done.\nFrom https://github.com/chaconinc/MainProject\n   9a377d1..eb974f8  master     -> origin/master\nFetching submodule DbConnector\nwarning: Failed to merge submodule DbConnector (merge following commits not found)\nAuto-merging DbConnector\nCONFLICT (submodule): Merge conflict in DbConnector\nAutomatic merge failed; fix conflicts and then commit the result.</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>所以本质上 Git 在这里指出了子模块历史中的两个分支记录点已经分叉并且需要合并。\n它将其解释为 “merge following commits not found” （未找到接下来需要合并的提交），虽然这有点令人困惑，不过之后我们会解释为什么是这样。</p>\n</div>\n<div class="paragraph">\n<p>为了解决这个问题，你需要弄清楚子模块应该处于哪种状态。\n奇怪的是，Git 并不会给你多少能帮你摆脱困境的信息，甚至连两边提交历史中的 SHA-1 值都没有。\n幸运的是，这很容易解决。\n如果你运行 <code>git diff</code>，就会得到试图合并的两个分支中记录的提交的 SHA-1 值。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git diff\ndiff --cc DbConnector\nindex eb41d76,c771610..0000000\n--- a/DbConnector\n+++ b/DbConnector</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>所以，在本例中，<code>eb41d76</code> 是我们的子模块中<strong>大家共有</strong>的提交，而 <code>c771610</code> 是上游拥有的提交。\n如果我们进入子模块目录中，它应该已经在 <code>eb41d76</code> 上了，因为合并没有动过它。\n如果不是的话，无论什么原因，你都可以简单地创建并检出一个指向它的分支。</p>\n</div>\n<div class="paragraph">\n<p>来自另一边的提交的 SHA-1 值比较重要。\n它是需要你来合并解决的。\n你可以尝试直接通过 SHA-1 合并，也可以为它创建一个分支然后尝试合并。\n我们建议后者，哪怕只是为了一个更漂亮的合并提交信息。</p>\n</div>\n<div class="paragraph">\n<p>所以，我们将会进入子模块目录，基于 <code>git diff</code> 的第二个 SHA-1 创建一个分支然后手动合并。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ cd DbConnector\n\n$ git rev-parse HEAD\neb41d764bccf88be77aced643c13a7fa86714135\n\n$ git branch try-merge c771610\n(DbConnector) $ git merge try-merge\nAuto-merging src/main.c\nCONFLICT (content): Merge conflict in src/main.c\nRecorded preimage for \'src/main.c\'\nAutomatic merge failed; fix conflicts and then commit the result.</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>我们在这儿得到了一个真正的合并冲突，所以如果想要解决并提交它，那么只需简单地通过结果来更新主项目。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ vim src/main.c <b class="conum">(1)</b>\n$ git add src/main.c\n$ git commit -am \'merged our changes\'\nRecorded resolution for \'src/main.c\'.\n[master 9fd905e] merged our changes\n\n$ cd .. <b class="conum">(2)</b>\n$ git diff <b class="conum">(3)</b>\ndiff --cc DbConnector\nindex eb41d76,c771610..0000000\n--- a/DbConnector\n+++ b/DbConnector\n@@@ -1,1 -1,1 +1,1 @@@\n- Subproject commit eb41d764bccf88be77aced643c13a7fa86714135\n -Subproject commit c77161012afbbe1f58b5053316ead08f4b7e6d1d\n++Subproject commit 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a\n$ git add DbConnector <b class="conum">(4)</b>\n\n$ git commit -m "Merge Tom\'s Changes" <b class="conum">(5)</b>\n[master 10d2c60] Merge Tom\'s Changes</code></pre>\n</div>\n</div>\n<div class="colist arabic">\n<ol>\n<li>\n<p>首先解决冲突</p>\n</li>\n<li>\n<p>然后返回到主项目目录中</p>\n</li>\n<li>\n<p>再次检查 SHA-1 值</p>\n</li>\n<li>\n<p>解决冲突的子模块记录</p>\n</li>\n<li>\n<p>提交我们的合并</p>\n</li>\n</ol>\n</div>\n<div class="paragraph">\n<p>这可能会让你有点儿困惑，但它确实不难。</p>\n</div>\n<div class="paragraph">\n<p>有趣的是，Git 还能处理另一种情况。\n如果子模块目录中存在着这样一个合并提交，它的历史中包含了的<strong>两边</strong>的提交，那么 Git 会建议你将它作为一个可行的解决方案。\n它看到有人在子模块项目的某一点上合并了包含这两次提交的分支，所以你可能想要那个。</p>\n</div>\n<div class="paragraph">\n<p>这就是为什么前面的错误信息是 “merge following commits not found”，因为它不能 <strong>这样</strong> 做。\n它让人困惑是因为<strong>谁能想到它会尝试这样做？</strong></p>\n</div>\n<div class="paragraph">\n<p>如果它找到了一个可以接受的合并提交，你会看到类似下面的信息：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git merge origin/master\nwarning: Failed to merge submodule DbConnector (not fast-forward)\nFound a possible merge resolution for the submodule:\n 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a: > merged our changes\nIf this is correct simply add it to the index for example\nby using:\n\n  git update-index --cacheinfo 160000 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a "DbConnector"\n\nwhich will accept this suggestion.\nAuto-merging DbConnector\nCONFLICT (submodule): Merge conflict in DbConnector\nAutomatic merge failed; fix conflicts and then commit the result.</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>Git 建议的命令是更新索引，就像你运行了 <code>git add</code> 那样，这样会清除冲突然后提交。\n不过你可能不应该这样做。你可以轻松地进入子模块目录，查看差异是什么，快进到这次提交，恰当地测试，然后提交它。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ cd DbConnector/\n$ git merge 9fd905e\nUpdating eb41d76..9fd905e\nFast-forward\n\n$ cd ..\n$ git add DbConnector\n$ git commit -am \'Fast forwarded to a common submodule child\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这些命令完成了同一件事，但是通过这种方式你至少可以验证工作是否有效，以及当你在完成时可以确保子模块目录中有你的代码。</p>\n</div>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_子模块的技巧">子模块的技巧</h4>\n<div class="paragraph">\n<p>你可以做几件事情来让用子模块工作轻松一点儿。</p>\n</div>\n<div class="sect4">\n<h5 id="_子模块遍历">子模块遍历</h5>\n<div class="paragraph">\n<p>有一个 <code>foreach</code> 子模块命令，它能在每一个子模块中运行任意命令。\n如果项目中包含了大量子模块，这会非常有用。</p>\n</div>\n<div class="paragraph">\n<p>例如，假设我们想要开始开发一项新功能或者修复一些错误，并且需要在几个子模块内工作。\n我们可以轻松地保存所有子模块的工作进度。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git submodule foreach \'git stash\'\nEntering \'CryptoLibrary\'\nNo local changes to save\nEntering \'DbConnector\'\nSaved working directory and index state WIP on stable: 82d2ad3 Merge from origin/stable\nHEAD is now at 82d2ad3 Merge from origin/stable</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>然后我们可以创建一个新分支，并将所有子模块都切换过去。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git submodule foreach \'git checkout -b featureA\'\nEntering \'CryptoLibrary\'\nSwitched to a new branch \'featureA\'\nEntering \'DbConnector\'\nSwitched to a new branch \'featureA\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>你应该明白。\n能够生成一个主项目与所有子项目的改动的统一差异是非常有用的。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git diff; git submodule foreach \'git diff\'\nSubmodule DbConnector contains modified content\ndiff --git a/src/main.c b/src/main.c\nindex 210f1ae..1f0acdc 100644\n--- a/src/main.c\n+++ b/src/main.c\n@@ -245,6 +245,8 @@ static int handle_alias(int *argcp, const char ***argv)\n\n      commit_pager_choice();\n\n+     url = url_decode(url_orig);\n+\n      /* build alias_argv */\n      alias_argv = xmalloc(sizeof(*alias_argv) * (argc + 1));\n      alias_argv[0] = alias_string + 1;\nEntering \'DbConnector\'\ndiff --git a/src/db.c b/src/db.c\nindex 1aaefb6..5297645 100644\n--- a/src/db.c\n+++ b/src/db.c\n@@ -93,6 +93,11 @@ char *url_decode_mem(const char *url, int len)\n        return url_decode_internal(&url, len, NULL, &out, 0);\n }\n\n+char *url_decode(const char *url)\n+{\n+       return url_decode_mem(url, strlen(url));\n+}\n+\n char *url_decode_parameter_name(const char **query)\n {\n        struct strbuf out = STRBUF_INIT;</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>在这里，我们看到子模块中定义了一个函数并在主项目中调用了它。\n这明显是个简化了的例子，但是希望它能让你明白这种方法的用处。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_有用的别名">有用的别名</h5>\n<div class="paragraph">\n<p>你可能想为其中一些命令设置别名，因为它们可能会非常长而你又不能设置选项作为它们的默认选项。\n我们在 <a href="ch00/_git_aliases">Git 别名</a> 介绍了设置 Git 别名，\n但是如果你计划在 Git 中大量使用子模块的话，这里有一些例子。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git config alias.sdiff \'!\'"git diff && git submodule foreach \'git diff\'"\n$ git config alias.spush \'push --recurse-submodules=on-demand\'\n$ git config alias.supdate \'submodule update --remote --merge\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这样当你想要更新子模块时可以简单地运行 <code>git supdate</code>，或 <code>git spush</code> 检查子模块依赖后推送。</p>\n</div>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_子模块的问题">子模块的问题</h4>\n<div class="paragraph">\n<p>然而使用子模块还是有一些小问题。</p>\n</div>\n<div class="sect4">\n<h5 id="_切换分支">切换分支</h5>\n<div class="paragraph">\n<p>例如，使用 Git 2.13 以前的版本时，在有子模块的项目中切换分支可能会造成麻烦。\n如果你创建一个新分支，在其中添加一个子模块，之后切换到没有该子模块的分支上时，你仍然会有一个还未跟踪的子模块目录。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git --version\ngit version 2.12.2\n\n$ git checkout -b add-crypto\nSwitched to a new branch \'add-crypto\'\n\n$ git submodule add https://github.com/chaconinc/CryptoLibrary\nCloning into \'CryptoLibrary\'...\n...\n\n$ git commit -am \'adding crypto library\'\n[add-crypto 4445836] adding crypto library\n 2 files changed, 4 insertions(+)\n create mode 160000 CryptoLibrary\n\n$ git checkout master\nwarning: unable to rmdir CryptoLibrary: Directory not empty\nSwitched to branch \'master\'\nYour branch is up-to-date with \'origin/master\'.\n\n$ git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\n\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n\n\tCryptoLibrary/\n\nnothing added to commit but untracked files present (use "git add" to track)</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>移除那个目录并不困难，但是有一个目录在那儿会让人有一点困惑。\n如果你移除它然后切换回有那个子模块的分支，需要运行 <code>submodule update --init</code> 来重新建立和填充。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git clean -fdx\nRemoving CryptoLibrary/\n\n$ git checkout add-crypto\nSwitched to branch \'add-crypto\'\n\n$ ls CryptoLibrary/\n\n$ git submodule update --init\nSubmodule path \'CryptoLibrary\': checked out \'b8dda6aa182ea4464f3f3264b11e0268545172af\'\n\n$ ls CryptoLibrary/\nMakefile\tincludes\tscripts\t\tsrc</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>再说一遍，这真的不难，只是会让人有点儿困惑。</p>\n</div>\n<div class="paragraph">\n<p>新版的 Git（>= 2.13）通过为 <code>git checkout</code> 命令添加 <code>--recurse-submodules</code> 选项简化了所有这些步骤，\n它能为了我们要切换到的分支让子模块处于的正确状态。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git --version\ngit version 2.13.3\n\n$ git checkout -b add-crypto\nSwitched to a new branch \'add-crypto\'\n\n$ git submodule add https://github.com/chaconinc/CryptoLibrary\nCloning into \'CryptoLibrary\'...\n...\n\n$ git commit -am \'adding crypto library\'\n[add-crypto 4445836] adding crypto library\n 2 files changed, 4 insertions(+)\n create mode 160000 CryptoLibrary\n\n$ git checkout --recurse-submodules master\nSwitched to branch \'master\'\nYour branch is up-to-date with \'origin/master\'.\n\n$ git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\n\nnothing to commit, working tree clean</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>当你在父级项目的几个分支上工作时，对 <code>git checkout</code> 使用 <code>--recurse-submodules</code> 选项也很有用，\n它能让你的子模块处于不同的提交上。确实，如果你在记录了子模块的不同提交的分支上切换，\n那么在执行 <code>git status</code> 后子模块会显示为“已修改”并指出“新的提交”。\n这是因为子模块的状态默认不会在切换分支时保留。</p>\n</div>\n<div class="paragraph">\n<p>这点非常让人困惑，因此当你的项目中拥有子模块时，可以总是使用 <code>git checkout --recurse-submodules</code>。\n（对于没有 <code>--recurse-submodules</code> 选项的旧版 Git，在检出之后可使用\n<code>git submodule update --init --recursive</code> 来让子模块处于正确的状态）。</p>\n</div>\n<div class="paragraph">\n<p>幸运的是，你可以通过 <code>git config submodule.recurse true</code> 设置 <code>submodule.recurse</code> 选项，\n告诉 Git（>=2.14）总是使用 <code>--recurse-submodules</code>。\n如上所述，这也会让 Git 为每个拥有 <code>--recurse-submodules</code> 选项的命令（除了 <code>git clone</code>）\n总是递归地在子模块中执行。</p>\n</div>\n</div>\n<div class="sect4">\n<h5 id="_从子目录切换到子模块">从子目录切换到子模块</h5>\n<div class="paragraph">\n<p>另一个主要的告诫是许多人遇到了将子目录转换为子模块的问题。\n如果你在项目中已经跟踪了一些文件，然后想要将它们移动到一个子模块中，那么请务必小心，否则 Git 会对你发脾气。\n假设项目内有一些文件在子目录中，你想要将其转换为一个子模块。\n如果删除子目录然后运行 <code>submodule add</code>，Git 会朝你大喊：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ rm -Rf CryptoLibrary/\n$ git submodule add https://github.com/chaconinc/CryptoLibrary\n\'CryptoLibrary\' already exists in the index</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>你必须要先取消暂存 <code>CryptoLibrary</code> 目录。\n然后才可以添加子模块：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git rm -r CryptoLibrary\n$ git submodule add https://github.com/chaconinc/CryptoLibrary\nCloning into \'CryptoLibrary\'...\nremote: Counting objects: 11, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 11 (delta 0), reused 11 (delta 0)\nUnpacking objects: 100% (11/11), done.\nChecking connectivity... done.</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在假设你在一个分支下做了这样的工作。\n如果尝试切换回的分支中那些文件还在子目录而非子模块中时——你会得到这个错误：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git checkout master\nerror: The following untracked working tree files would be overwritten by checkout:\n  CryptoLibrary/Makefile\n  CryptoLibrary/includes/crypto.h\n  ...\nPlease move or remove them before you can switch branches.\nAborting</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>你可以通过 <code>checkout -f</code> 来强制切换，但是要小心，如果其中还有未保存的修改，这个命令会把它们覆盖掉。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git checkout -f master\nwarning: unable to rmdir CryptoLibrary: Directory not empty\nSwitched to branch \'master\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>当你切换回来之后，因为某些原因你得到了一个空的 <code>CryptoLibrary</code> 目录，并且 <code>git submodule update</code> 也无法修复它。\n你需要进入到子模块目录中运行 <code>git checkout .</code> 来找回所有的文件。\n你也可以通过 <code>submodule foreach</code> 脚本来为多个子模块运行它。</p>\n</div>\n<div class="paragraph">\n<p>要特别注意的是，近来子模块会将它们的所有 Git 数据保存在顶级项目的 <code>.git</code> 目录中，所以不像旧版本的 Git，摧毁一个子模块目录并不会丢失任何提交或分支。</p>\n</div>\n<div class="paragraph">\n<p>拥有了这些工具，使用子模块会成为可以在几个相关但却分离的项目上同时开发的相当简单有效的方法。</p>\n</div>\n</div>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E4%BD%BF%E7%94%A8-Git-%E8%B0%83%E8%AF%95">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E6%89%93%E5%8C%85">next</a></div></div>\n\n\n    <h2>7.12 Git 工具 - 打包</h2>\n  <div>\n<h3 id="_bundling">打包</h3>\n<div class="paragraph">\n<p>虽然我们已经了解了网络传输 Git 数据的常用方法（如 HTTP，SSH 等），但还有另外一种不太常见却又十分有用的方式。</p>\n</div>\n<div class="paragraph">\n<p>Git 可以将它的数据“打包”到一个文件中。\n这在许多场景中都很有用。\n有可能你的网络中断了，但你又希望将你的提交传给你的合作者们。\n可能你不在办公网中并且出于安全考虑没有给你接入内网的权限。\n可能你的无线、有线网卡坏掉了。\n可能你现在没有共享服务器的权限，你又希望通过邮件将更新发送给别人，\n却不希望通过 <code>format-patch</code> 的方式传输 40 个提交。</p>\n</div>\n<div class="paragraph">\n<p>这些情况下 <code>git bundle</code> 就会很有用。\n<code>bundle</code> 命令会将 <code>git push</code> 命令所传输的所有内容打包成一个二进制文件，\n你可以将这个文件通过邮件或者闪存传给其他人，然后解包到其他的仓库中。</p>\n</div>\n<div class="paragraph">\n<p>来看看一个简单的例子。\n假设你有一个包含两个提交的仓库：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log\ncommit 9a466c572fe88b195efd356c3f2bbeccdb504102\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Wed Mar 10 07:34:10 2010 -0800\n\n    second commit\n\ncommit b1ec3248f39900d2a406049d762aa68e9641be25\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Wed Mar 10 07:34:01 2010 -0800\n\n    first commit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果你想把这个仓库发送给其他人但你没有其他仓库的权限，或者就是懒得新建一个仓库，\n你就可以用 <code>git bundle create</code> 命令来打包。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git bundle create repo.bundle HEAD master\nCounting objects: 6, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (6/6), 441 bytes, done.\nTotal 6 (delta 0), reused 0 (delta 0)</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>然后你就会有一个名为 <code>repo.bundle</code> 的文件，该文件包含了所有重建该仓库 <code>master</code> 分支所需的数据。\n在使用 <code>bundle</code> 命令时，你需要列出所有你希望打包的引用或者提交的区间。\n如果你希望这个仓库可以在别处被克隆，你应该像例子中那样增加一个 HEAD 引用。</p>\n</div>\n<div class="paragraph">\n<p>你可以将这个 <code>repo.bundle</code> 文件通过邮件或者U盘传给别人。</p>\n</div>\n<div class="paragraph">\n<p>另一方面，假设别人传给你一个 <code>repo.bundle</code> 文件并希望你在这个项目上工作。\n你可以从这个二进制文件中克隆出一个目录，就像从一个 URL 克隆一样。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git clone repo.bundle repo\nCloning into \'repo\'...\n...\n$ cd repo\n$ git log --oneline\n9a466c5 second commit\nb1ec324 first commit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果你在打包时没有包含 HEAD 引用，你还需要在命令后指定一个 <code>-b master</code> 或者其他被引入的分支，\n否则 Git 不知道应该检出哪一个分支。</p>\n</div>\n<div class="paragraph">\n<p>现在假设你提交了 3 个修订，并且要用邮件或者U盘将新的提交放在一个包里传回去。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --oneline\n71b84da last commit - second repo\nc99cf5b fourth commit - second repo\n7011d3d third commit - second repo\n9a466c5 second commit\nb1ec324 first commit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>首先我们需要确认我们希望被打包的提交区间。\n和网络协议不太一样，网络协议会自动计算出所需传输的最小数据集，而我们需要手动计算。\n当然你可以像上面那样将整个仓库打包，但最好仅仅打包变更的部分 —— 就是我们刚刚在本地做的 3 个提交。</p>\n</div>\n<div class="paragraph">\n<p>为了实现这个目标，你需要计算出差别。\n就像我们在 <a href="ch00/_commit_ranges">提交区间</a> 介绍的，你有很多种方式去指明一个提交区间。\n我们可以使用 <code>origin/master..master</code> 或者 <code>master ^origin/master</code> 之类的方法\n来获取那 3 个在我们的 <code>master</code> 分支而不在原始仓库中的提交。\n你可以用 <code>log</code> 命令来测试。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --oneline master ^origin/master\n71b84da last commit - second repo\nc99cf5b fourth commit - second repo\n7011d3d third commit - second repo</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这样就获取到我们希望被打包的提交列表，让我们将这些提交打包。\n我们可以用 <code>git bundle create</code> 命令，加上我们想用的文件名，以及要打包的提交区间。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git bundle create commits.bundle master ^9a466c5\nCounting objects: 11, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (9/9), 775 bytes, done.\nTotal 9 (delta 0), reused 0 (delta 0)</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在在我们的目录下会有一个 <code>commits.bundle</code> 文件。\n如果我们把这个文件发送给我们的合作者，她可以将这个文件导入到原始的仓库中，\n即使在这期间已经有其他的工作提交到这个仓库中。</p>\n</div>\n<div class="paragraph">\n<p>当她拿到这个包时，她可以在导入到仓库之前查看这个包里包含了什么内容。\n<code>bundle verify</code> 命令可以检查这个文件是否是一个合法的 Git 包，是否拥有共同的祖先来导入。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git bundle verify ../commits.bundle\nThe bundle contains 1 ref\n71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master\nThe bundle requires these 1 ref\n9a466c572fe88b195efd356c3f2bbeccdb504102 second commit\n../commits.bundle is okay</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>如果打包工具仅仅把最后两个提交打包，而不是三个，原始的仓库是无法导入这个包的，\n因为这个包缺失了必要的提交记录。这时候 <code>verify</code> 的输出类似：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git bundle verify ../commits-bad.bundle\nerror: Repository lacks these prerequisite commits:\nerror: 7011d3d8fc200abe0ad561c011c3852a4b7bbe95 third commit - second repo</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>而我们的第一个包是合法的，所以我们可以从这个包里提取出提交。\n如果你想查看这边包里可以导入哪些分支，同样有一个命令可以列出这些顶端：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git bundle list-heads ../commits.bundle\n71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p><code>verify</code> 子命令同样可以告诉你有哪些顶端。\n该功能的目的是查看哪些是可以被拉入的，所以你可以使用 <code>fetch</code> 或者 <code>pull</code> 命令从包中导入提交。\n这里我们要从包中取出 <code>master</code> 分支到我们仓库中的 \'other-master\' 分支：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git fetch ../commits.bundle master:other-master\nFrom ../commits.bundle\n * [new branch]      master     -> other-master</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>可以看到我们已经将提交导入到 <code>other-master</code> 分支，以及在这期间我们自己在 <code>master</code> 分支上的提交。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --oneline --decorate --graph --all\n* 8255d41 (HEAD, master) third commit - first repo\n| * 71b84da (other-master) last commit - second repo\n| * c99cf5b fourth commit - second repo\n| * 7011d3d third commit - second repo\n|/\n* 9a466c5 second commit\n* b1ec324 first commit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>因此，当你在没有合适的网络或者可共享仓库的情况下，<code>git bundle</code> 很适合用于共享或者网络类型的操作。</p>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E6%9B%BF%E6%8D%A2">next</a></div></div>\n\n\n    <h2>7.13 Git 工具 - 替换</h2>\n  <div>\n<h3 id="_replace">替换</h3>\n<div class="paragraph">\n<p>我们之前强调过，Git 对象数据库中的对象是不可改变的，\n然而 Git 提供了一种有趣的方式来用其他对象 <strong>假装</strong> 替换数据库中的 Git 对象。</p>\n</div>\n<div class="paragraph">\n<p><code>replace</code> 命令可以让你在 Git 中指定 <strong>某个对象</strong> 并告诉 Git：“每次遇到这个 Git 对象时，假装它是 <strong>其它对象</strong>”。\n在你用一个不同的提交替换历史中的一个提交而不想以 <code>git filter-branch</code> 之类的方式重建完整的历史时，这会非常有用。</p>\n</div>\n<div class="paragraph">\n<p>例如，你有一个大型的代码历史并想把自己的仓库分成一个短的历史和一个更大更长久的历史，\n短历史供新的开发者使用，后者给喜欢数据挖掘的人使用。\n你可以通过用新仓库中最早的提交“替换”老仓库中最新的提交来连接历史，这种方式可以把一条历史移植到其他历史上。\n这意味着你不用在新历史中真正替换每一个提交（因为历史来源会影响 SHA-1 值），你可以加入他们。</p>\n</div>\n<div class="paragraph">\n<p>让我们来试试吧。\n首先获取一个已经存在的仓库，并将其分成两个仓库，一个是最近的仓库，一个是历史版本的仓库，\n然后我们将看到如何在不更改仓库 SHA-1 值的情况下通过 <code>replace</code> 命令来合并他们。</p>\n</div>\n<div class="paragraph">\n<p>我们将使用一个拥有 5 个提交的简单仓库：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --oneline\nef989d8 fifth commit\nc6e1e95 fourth commit\n9c68fdc third commit\n945704c second commit\nc1822cf first commit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>我们想将其分成拆分成两条历史。\n第一个到第四个提交的作为第一个历史版本。\n第四、第五个提交的作为最近的第二个历史版本。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/replace1.png" alt="replace1">\n</div>\n</div>\n<div class="paragraph">\n<p>创建历史版本的历史很容易，我们可以只将一个历史中的分支推送到一个新的远程仓库的 <code>master</code> 分支。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git branch history c6e1e95\n$ git log --oneline --decorate\nef989d8 (HEAD, master) fifth commit\nc6e1e95 (history) fourth commit\n9c68fdc third commit\n945704c second commit\nc1822cf first commit</code></pre>\n</div>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/replace2.png" alt="replace2">\n</div>\n</div>\n<div class="paragraph">\n<p>现在我们可以把这个新的 <code>history</code> 分支推送到我们新仓库的 <code>master</code> 分支：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git remote add project-history https://github.com/schacon/project-history\n$ git push project-history history:master\nCounting objects: 12, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (12/12), 907 bytes, done.\nTotal 12 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (12/12), done.\nTo git@github.com:schacon/project-history.git\n * [new branch]      history -> master</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这样一来，我们的历史版本就发布了。\n稍难的部分则是删减我们最近的历史来让它变得更小。\n我们需要一个重叠以便于用一个相等的提交来替换另一个提交，这样一来，我们将截断到第四、五个提交。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --oneline --decorate\nef989d8 (HEAD, master) fifth commit\nc6e1e95 (history) fourth commit\n9c68fdc third commit\n945704c second commit\nc1822cf first commit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>在这种情况下，创建一个能够指导扩展历史的基础提交是很有用的。\n这样一来，如果其他的开发者想要修改第一次提交或者其他操作时就知道要做些什么，因此，接下来我们要做的是用命令创建一个最初的提交对象，然后将剩下的提交（第四、第五个提交）变基到它的上面。</p>\n</div>\n<div class="paragraph">\n<p>为了这么做，我们需要选择一个点去拆分，对于我们而言是第三个提交（SHA 是 <code>9c68fdc</code>）。\n因此我们的提交将基于此提交树。我们可以使用 <code>commit-tree</code> 命令来创建基础提交，\n这样我们就有了一个树，并返回一个全新的、无父节点的 SHA-1 提交对象。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ echo \'get history from blah blah blah\' | git commit-tree 9c68fdc^{tree}\n622e88e9cbfbacfb75b5279245b9fb38dfea10cf</code></pre>\n</div>\n</div>\n<div class="admonitionblock note">\n<table>\n<tbody><tr>\n<td class="icon">\n<div class="title">Note</div>\n</td>\n<td class="content">\n<div class="paragraph">\n<p><code>commit-tree</code> 命令属于底层指令。有许多指令并非直接使用，而是被 <strong>其他的</strong> Git 命令用来做更小一些的工作。\n有时当我们做一些像这样的奇怪事情时，它们允许我们做一些不适用于日常使用但真正底层的东西。\n更多关于底层命令的内容请参见 <a href="ch00/_plumbing_porcelain">底层命令与上层命令</a>。</p>\n</div>\n</td>\n</tr>\n</tbody></table>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/replace3.png" alt="replace3">\n</div>\n</div>\n<div class="paragraph">\n<p>现在我们已经有一个基础提交了，我们可以通过 <code>git rebase --onto</code> 命令来将剩余的历史变基到基础提交之上。\n<code>--onto</code> 参数是刚才 <code>commit-tree</code> 命令返回的 SHA-1 值，变基点会成为第三个提交（我们想留下的第一个提交的父提交，<code>9c68fdc</code>）：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git rebase --onto 622e88 9c68fdc\nFirst, rewinding head to replay your work on top of it...\nApplying: fourth commit\nApplying: fifth commit</code></pre>\n</div>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/replace4.png" alt="replace4">\n</div>\n</div>\n<div class="paragraph">\n<p>我们已经用基础提交重写了最近的历史，基础提交包括如何重新组成整个历史的说明。\n我们可以将新历史推送到新项目中，当其他人克隆这个仓库时，他们仅能看到最近两次提交以及一个包含上述说明的基础提交。</p>\n</div>\n<div class="paragraph">\n<p>现在我们将以想获得整个历史的人的身份来初次克隆这个项目。\n在克隆这个截断后的仓库后为了得到历史数据，需要添加第二个远程的历史版本库并对其做获取操作：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git clone https://github.com/schacon/project\n$ cd project\n\n$ git log --oneline master\ne146b5f fifth commit\n81a708d fourth commit\n622e88e get history from blah blah blah\n\n$ git remote add project-history https://github.com/schacon/project-history\n$ git fetch project-history\nFrom https://github.com/schacon/project-history\n * [new branch]      master     -> project-history/master</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在，协作者在 <code>master</code> 分支中拥有他们最近的提交并且在 <code>project-history/master</code> 分支中拥有过去的提交。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --oneline master\ne146b5f fifth commit\n81a708d fourth commit\n622e88e get history from blah blah blah\n\n$ git log --oneline project-history/master\nc6e1e95 fourth commit\n9c68fdc third commit\n945704c second commit\nc1822cf first commit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>为了合并它们，你可以使用 <code>git replace</code> 命令加上你想替换的提交信息来进行替换。\n这样一来，我们就可以将 <code>master</code> 分支中的第四个提交替换为 <code>project-history/master</code> 分支中的“第四个”提交。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git replace 81a708d c6e1e95</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>现在，查看 <code>master</code> 分支中的历史信息，显示如下：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git log --oneline master\ne146b5f fifth commit\n81a708d fourth commit\n9c68fdc third commit\n945704c second commit\nc1822cf first commit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>很酷，是不是？不用改变上游的 SHA-1 我们就能用一个提交来替换历史中的所有不同的提交，\n并且所有的工具（<code>bisect</code>，<code>blame</code> 等）也都奏效。</p>\n</div>\n<div class="imageblock">\n<div class="content">\n<img src="https://juejin.cn/post/book/en/v2/images/replace5.png" alt="replace5">\n</div>\n</div>\n<div class="paragraph">\n<p>有趣的是，即使是使用了 <code>c6e1e95</code> 提交数据来进行替换，它的 SHA-1 仍显示为 <code>81a708d</code>。\n即使你运行了 <code>cat-file</code> 命令，它仍会显示你替换的数据：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git cat-file -p 81a708d\ntree 7bc544cf438903b65ca9104a1e30345eee6c083d\nparent 9c68fdceee073230f19ebb8b5e7fc71b479c0252\nauthor Scott Chacon <schacon@gmail.com> 1268712581 -0700\ncommitter Scott Chacon <schacon@gmail.com> 1268712581 -0700\n\nfourth commit</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>请记住，<code>81a708d</code> 真正的父提交是 <code>622e882</code> 占位提交，而非呈现的 <code>9c68fdce</code> 提交。</p>\n</div>\n<div class="paragraph">\n<p>另一个有趣的事情是数据将会以以下引用显示：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git for-each-ref\ne146b5f14e79d4935160c0e83fb9ebe526b8da0d commit\trefs/heads/master\nc6e1e95051d41771a649f3145423f8809d1a74d4 commit\trefs/remotes/history/master\ne146b5f14e79d4935160c0e83fb9ebe526b8da0d commit\trefs/remotes/origin/HEAD\ne146b5f14e79d4935160c0e83fb9ebe526b8da0d commit\trefs/remotes/origin/master\nc6e1e95051d41771a649f3145423f8809d1a74d4 commit\trefs/replace/81a708dd0e167a3f691541c7a6463343bc457040</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>这意味着我们可以轻而易举的和其他人分享替换，因为我们可以将替换推送到服务器中并且其他人可以轻松地下载。\n也许在历史移植情况下不是很有用（既然每个人都乐意下载最新版本和历史版本，为何还要拆分他们呢？），但在其他情况下仍然很有用。</p>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E6%89%93%E5%8C%85">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8">next</a></div></div>\n\n\n    <h2>7.14 Git 工具 - 凭证存储</h2>\n  <div>\n<h3 id="_credential_caching">凭证存储</h3>\n<div class="paragraph">\n<p>\n\n如果你使用的是 SSH 方式连接远端，并且设置了一个没有口令的密钥，这样就可以在不输入用户名和密码的情况下安全地传输数据。\n然而，这对 HTTP 协议来说是不可能的 —— 每一个连接都是需要用户名和密码的。\n这在使用双重认证的情况下会更麻烦，因为你需要输入一个随机生成并且毫无规律的 token 作为密码。</p>\n</div>\n<div class="paragraph">\n<p>幸运的是，Git 拥有一个凭证系统来处理这个事情。\n下面有一些 Git 的选项：</p>\n</div>\n<div class="ulist">\n<ul>\n<li>\n<p>默认所有都不缓存。\n每一次连接都会询问你的用户名和密码。</p>\n</li>\n<li>\n<p>“cache” 模式会将凭证存放在内存中一段时间。\n密码永远不会被存储在磁盘中，并且在15分钟后从内存中清除。</p>\n</li>\n<li>\n<p>“store” 模式会将凭证用明文的形式存放在磁盘中，并且永不过期。\n这意味着除非你修改了你在 Git 服务器上的密码，否则你永远不需要再次输入你的凭证信息。\n这种方式的缺点是你的密码是用明文的方式存放在你的 home 目录下。</p>\n</li>\n<li>\n<p>如果你使用的是 Mac，Git 还有一种 “osxkeychain” 模式，它会将凭证缓存到你系统用户的钥匙串中。\n这种方式将凭证存放在磁盘中，并且永不过期，但是是被加密的，这种加密方式与存放 HTTPS 凭证以及 Safari 的自动填写是相同的。</p>\n</li>\n<li>\n<p>如果你使用的是 Windows，你可以安装一个叫做 “Git Credential Manager for Windows” 的辅助工具。\n这和上面说的 “osxkeychain” 十分类似，但是是使用 Windows Credential Store 来控制敏感信息。\n可以在 <a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows" class="bare">https://github.com/Microsoft/Git-Credential-Manager-for-Windows</a> 下载。</p>\n</li>\n</ul>\n</div>\n<div class="paragraph">\n<p>你可以设置 Git 的配置来选择上述的一种方式</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git config --global credential.helper cache</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>部分辅助工具有一些选项。\n“store” 模式可以接受一个 <code>--file <path></code> 参数，可以自定义存放密码的文件路径（默认是 <code>~/.git-credentials</code> ）。\n“cache” 模式有 <code>--timeout <seconds></code> 参数，可以设置后台进程的存活时间（默认是 “900”，也就是 15 分钟）。\n下面是一个配置 “store” 模式自定义路径的例子：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git config --global credential.helper \'store --file ~/.my-credentials\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>Git 甚至允许你配置多个辅助工具。\n当查找特定服务器的凭证时，Git 会按顺序查询，并且在找到第一个回答时停止查询。\n当保存凭证时，Git 会将用户名和密码发送给 <strong>所有</strong> 配置列表中的辅助工具，它们会按自己的方式处理用户名和密码。\n如果你在闪存上有一个凭证文件，但又希望在该闪存被拔出的情况下使用内存缓存来保存用户名密码，<code>.gitconfig</code> 配置文件如下：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-ini" data-lang="ini">[credential]\n    helper = store --file /mnt/thumbdrive/.git-credentials\n    helper = cache --timeout 30000</code></pre>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_底层实现">底层实现</h4>\n<div class="paragraph">\n<p>这些是如何实现的呢？\nGit 凭证辅助工具系统的命令是 <code>git credential</code>，这个命令接收一个参数，并通过标准输入获取更多的参数。</p>\n</div>\n<div class="paragraph">\n<p>举一个例子更容易理解。\n我们假设已经配置好一个凭证辅助工具，这个辅助工具保存了 <code>mygithost</code> 的凭证信息。\n下面是一个使用 “fill” 命令的会话，当 Git 尝试寻找一个服务器的凭证时就会被调用。</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git credential fill <b class="conum">(1)</b>\nprotocol=https <b class="conum">(2)</b>\nhost=mygithost\n<b class="conum">(3)</b>\nprotocol=https <b class="conum">(4)</b>\nhost=mygithost\nusername=bob\npassword=s3cre7\n$ git credential fill <b class="conum">(5)</b>\nprotocol=https\nhost=unknownhost\n\nUsername for \'https://unknownhost\': bob\nPassword for \'https://bob@unknownhost\':\nprotocol=https\nhost=unknownhost\nusername=bob\npassword=s3cre7</code></pre>\n</div>\n</div>\n<div class="colist arabic">\n<ol>\n<li>\n<p>这是开始交互的命令。</p>\n</li>\n<li>\n<p>Git-credential 接下来会等待标准输入。\n我们提供我们所知道的信息：协议和主机名。</p>\n</li>\n<li>\n<p>一个空行代表输入已经完成，凭证系统应该输出它所知道的信息。</p>\n</li>\n<li>\n<p>接下来由 Git-credential 接管，并且将找到的信息打印到标准输出。</p>\n</li>\n<li>\n<p>如果没有找到对应的凭证，Git 会询问用户的用户名和密码，我们将这些信息输入到在标准输出的地方（这个例子中是同一个控制台）。</p>\n</li>\n</ol>\n</div>\n<div class="paragraph">\n<p>凭证系统实际调用的程序和 Git 本身是分开的；具体是哪一个以及如何调用与 <code>credential.helper</code> 配置的值有关。\n这个配置有多种格式：</p>\n</div>\n<table class="tableblock frame-all grid-all stretch">\n<colgroup>\n<col style="width: 50%;">\n<col style="width: 50%;">\n</colgroup>\n<thead>\n<tr>\n<th class="tableblock halign-left valign-top">配置值</th>\n<th class="tableblock halign-left valign-top">行为</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><code>foo</code></p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">执行 <code>git-credential-foo</code></p></td>\n</tr>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><code>foo -a --opt=bcd</code></p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">执行 <code>git-credential-foo -a --opt=bcd</code></p></td>\n</tr>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><code>/absolute/path/foo -xyz</code></p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock">执行 <code>/absolute/path/foo -xyz</code></p></td>\n</tr>\n<tr>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><code>!f() { echo "password=s3cre7"; }; f</code></p></td>\n<td class="tableblock halign-left valign-top"><p class="tableblock"><code>!</code> 后面的代码会在 shell 执行</p></td>\n</tr>\n</tbody>\n</table>\n<div class="paragraph">\n<p>上面描述的辅助工具可以被称做 <code>git-credential-cache</code>、<code>git-credential-store</code> 之类，我们可以配置它们来接受命令行参数。\n通常的格式是 “git-credential-foo [args] <action>”\n标准输入/输出协议和 git-credential 一样，但它们使用的是一套稍微不太一样的行为：</p>\n</div>\n<div class="ulist">\n<ul>\n<li>\n<p><code>get</code> 是请求输入一对用户名和密码。</p>\n</li>\n<li>\n<p><code>store</code> 是请求保存一个凭证到辅助工具的内存。</p>\n</li>\n<li>\n<p><code>erase</code> 会将给定的证书从辅助工具内存中清除。</p>\n</li>\n</ul>\n</div>\n<div class="paragraph">\n<p>对于 <code>store</code> 和 <code>erase</code> 两个行为是不需要返回数据的（Git 也会忽略掉）。\n然而对于 <code>get</code>，Git 对辅助工具的返回信息十分感兴趣。\n如果辅助工具并不知道任何有用的信息，它就会直接退出而没有任何输出，但如果知道的话，\n它就会在已存储信息的基础上扩充所提供的信息。\n它的输出可看做一系列赋值语句，提供的任何内容都会取代 Git 已知的内容。</p>\n</div>\n<div class="paragraph">\n<p>如果辅助工具没有任何有用的信息，它可以直接退出而不需要输出任何东西，但如果它有这些信息，它在提供的信息后面增加它所拥有的信息。\n这些输出会被视为一系列的赋值语句；每一个提供的数据都会将 Git 已有的数据替换掉。</p>\n</div>\n<div class="paragraph">\n<p>这有一个和上面一样的例子，但是跳过了 git-credential 这一步，直接到 git-credential-store:</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git credential-store --file ~/git.store store <b class="conum">(1)</b>\nprotocol=https\nhost=mygithost\nusername=bob\npassword=s3cre7\n$ git credential-store --file ~/git.store get <b class="conum">(2)</b>\nprotocol=https\nhost=mygithost\n\nusername=bob <b class="conum">(3)</b>\npassword=s3cre7</code></pre>\n</div>\n</div>\n<div class="colist arabic">\n<ol>\n<li>\n<p>我们告诉 <code>git-credential-store</code> 去保存凭证：当访问 <code><a href="https://mygithost" class="bare">https://mygithost</a></code> 时使用用户名 “bob”，密码是 “s3cre7”。</p>\n</li>\n<li>\n<p>现在我们取出这个凭证。\n我们提供连接这部分的信息（<code><a href="https://mygithost" class="bare">https://mygithost</a></code>）以及一个空行。</p>\n</li>\n<li>\n<p><code>git-credential-store</code> 输出我们之前保存的用户名和密码。</p>\n</li>\n</ol>\n</div>\n<div class="paragraph">\n<p><code>~/git.store</code> 文件的内容类似：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-ini" data-lang="ini">https://bob:s3cre7@mygithost</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>仅仅是一系列包含凭证信息 URL 组成的行。\n<code>osxkeychain</code> 和 <code>wincred</code> 辅助工具使用它们后端存储的原生格式，而 <code>cache</code> 使用它的内存格式（其他进程无法读取）。</p>\n</div>\n</div>\n<div class="sect3">\n<h4 id="_自定义凭证缓存">自定义凭证缓存</h4>\n<div class="paragraph">\n<p>已经知道 <code>git-credential-store</code> 之类的是和 Git 是相互独立的程序，就不难理解 Git 凭证辅助工具可以是 <em>任意</em> 程序。\n虽然 Git 提供的辅助工具覆盖了大多数常见的使用场景，但并不能满足所有情况。\n比如，假设你的整个团队共享一些凭证，也许是在部署时使用。\n这些凭证是保存在一个共享目录里，由于这些凭证经常变更，所以你不想把它们复制到你自己的凭证仓库中。\n现有的辅助工具无法满足这种情况；来看看我们如何自己实现一个。\n这个程序应该拥有几个核心功能：</p>\n</div>\n<div class="olist arabic">\n<ol class="arabic">\n<li>\n<p>我们唯一需要关注的行为是 <code>get</code>；<code>store</code> 和 <code>erase</code> 是写操作，所以当接受到这两个请求时我们直接退出即可。</p>\n</li>\n<li>\n<p>共享的凭证文件格式和 <code>git-credential-store</code> 使用的格式相同。</p>\n</li>\n<li>\n<p>凭证文件的路径一般是固定的，但我们应该允许用户传入一个自定义路径以防万一。</p>\n</li>\n</ol>\n</div>\n<div class="paragraph">\n<p>我们再一次使用 Ruby 来编写这个扩展，但只要 Git 能够执行最终的程序，任何语言都是可以的。\n这是我们的凭证辅助工具的完整代码：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-ruby" data-lang="ruby">#!/usr/bin/env ruby\n\nrequire \'optparse\'\n\npath = File.expand_path \'~/.git-credentials\' # <b class="conum">(1)</b>\nOptionParser.new do |opts|\n    opts.banner = \'USAGE: git-credential-read-only [options] <action>\'\n    opts.on(\'-f\', \'--file PATH\', \'Specify path for backing store\') do |argpath|\n        path = File.expand_path argpath\n    end\nend.parse!\n\nexit(0) unless ARGV[0].downcase == \'get\' # <b class="conum">(2)</b>\nexit(0) unless File.exists? path\n\nknown = {} # <b class="conum">(3)</b>\nwhile line = STDIN.gets\n    break if line.strip == \'\'\n    k,v = line.strip.split \'=\', 2\n    known[k] = v\nend\n\nFile.readlines(path).each do |fileline| # <b class="conum">(4)</b>\n    prot,user,pass,host = fileline.scan(/^(.*?):\\/\\/(.*?):(.*?)@(.*)$/).first\n    if prot == known[\'protocol\'] and host == known[\'host\'] and user == known[\'username\'] then\n        puts "protocol=#{prot}"\n        puts "host=#{host}"\n        puts "username=#{user}"\n        puts "password=#{pass}"\n        exit(0)\n    end\nend</code></pre>\n</div>\n</div>\n<div class="colist arabic">\n<ol>\n<li>\n<p>我们在这里解析命令行参数，允许用户指定输入文件，默认是 <code>~/.git-credentials</code>.</p>\n</li>\n<li>\n<p>这个程序只有在接受到 <code>get</code> 行为的请求并且后端存储的文件存在时才会有输出。</p>\n</li>\n<li>\n<p>这个循环从标准输入读取数据，直到读取到第一个空行。\n输入的数据被保存到 <code>known</code> 哈希表中，之后需要用到。</p>\n</li>\n<li>\n<p>这个循环读取存储文件中的内容，寻找匹配的行。\n如果 <code>known</code> 中的协议和主机名与该行相匹配，这个程序输出结果并退出。</p>\n</li>\n</ol>\n</div>\n<div class="paragraph">\n<p>我们把这个辅助工具保存为 <code>git-credential-read-only</code>，放到我们的 <code>PATH</code> 路径下并且给予执行权限。\n一个交互式会话类似：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git credential-read-only --file=/mnt/shared/creds get\nprotocol=https\nhost=mygithost\n\nprotocol=https\nhost=mygithost\nusername=bob\npassword=s3cre7</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>由于这个的名字是 “git-” 开头，所以我们可以在配置值中使用简便的语法：</p>\n</div>\n<div class="listingblock">\n<div class="content">\n<pre class="highlight"><code class="language-console" data-lang="console">$ git config --global credential.helper \'read-only --file /mnt/shared/creds\'</code></pre>\n</div>\n</div>\n<div class="paragraph">\n<p>正如你看到的，扩展这个系统是相当简单的，并且可以为你和你的团队解决一些常见问题。</p>\n</div>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E6%9B%BF%E6%8D%A2">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E6%80%BB%E7%BB%93">next</a></div></div>\n\n\n    <h2>7.15 Git 工具 - 总结</h2>\n  <div>\n<h3 id="_总结_9">总结</h3>\n<div class="paragraph">\n<p>你已经接触了很多能够精确地操控提交和暂存区的高级工具。\n当你碰到问题时，你应该可以很容易找出是哪个分支在什么时候由谁引入了它们。\n如果你想在项目中使用子项目，你也已经知道如何来满足这些需求。\n到此，你应该能毫无压力地在命令行中使用 Git 来完成日常中的大部分事情。</p>\n</div>\n<div id="nav"><a href="https://juejin.cn/post/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8">prev</a> | <a href="https://juejin.cn/post/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git">next</a></div></div>\n</x-turndown>\n')])])])])}),[],!1,null,null,null);e.default=i.exports}}]);